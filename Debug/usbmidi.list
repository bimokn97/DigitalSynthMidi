
usbmidi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008380  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08008520  08008520  00018520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008840  08008840  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008840  08008840  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008840  08008840  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008840  08008840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008844  08008844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ac  200001d8  08008a20  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b84  08008a20  00020b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001608a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c77  00000000  00000000  00036292  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  00039fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000198e6  00000000  00000000  0003af48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000109e8  00000000  00000000  0005482e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009f83c  00000000  00000000  00065216  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104a52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053bc  00000000  00000000  00104ad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008508 	.word	0x08008508

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008508 	.word	0x08008508

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void){
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	2300      	movs	r3, #0

}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cba:	f000 f8b5 	bl	8000e28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010000 	.word	0x40010000

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <Error_Handler+0x6>

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d06:	f001 f9b3 	bl	8002070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000734 	.word	0x20000734

08000d14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <DMA2_Stream0_IRQHandler+0x10>)
 8000d1a:	f000 f899 	bl	8000e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200006d4 	.word	0x200006d4

08000d28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <OTG_FS_IRQHandler+0x10>)
 8000d2e:	f000 fa19 	bl	8001164 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000778 	.word	0x20000778

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f003 fe62 	bl	8004a34 <__errno>
 8000d70:	4602      	mov	r2, r0
 8000d72:	230c      	movs	r3, #12
 8000d74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20010000 	.word	0x20010000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	200001f4 	.word	0x200001f4
 8000da4:	20000b88 	.word	0x20000b88

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <SystemInit+0x28>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <SystemInit+0x28>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SystemInit+0x28>)
 8000dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dda:	e003      	b.n	8000de4 <LoopCopyDataInit>

08000ddc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000de0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000de2:	3104      	adds	r1, #4

08000de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000de8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dec:	d3f6      	bcc.n	8000ddc <CopyDataInit>
  ldr  r2, =_sbss
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000df0:	e002      	b.n	8000df8 <LoopFillZerobss>

08000df2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000df2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000df4:	f842 3b04 	str.w	r3, [r2], #4

08000df8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dfc:	d3f9      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dfe:	f7ff ffd3 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f003 fe1d 	bl	8004a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff ff47 	bl	8000c98 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000e10:	08008848 	.word	0x08008848
  ldr  r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e18:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8000e1c:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8000e20:	20000b84 	.word	0x20000b84

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	20000774 	.word	0x20000774

08000e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e5c:	4b92      	ldr	r3, [pc, #584]	; (80010a8 <HAL_DMA_IRQHandler+0x258>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a92      	ldr	r2, [pc, #584]	; (80010ac <HAL_DMA_IRQHandler+0x25c>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	0a9b      	lsrs	r3, r3, #10
 8000e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d01a      	beq.n	8000ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d013      	beq.n	8000ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0204 	bic.w	r2, r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb4:	f043 0201 	orr.w	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	409a      	lsls	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d012      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ede:	2201      	movs	r2, #1
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eea:	f043 0202 	orr.w	r2, r3, #2
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d012      	beq.n	8000f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00b      	beq.n	8000f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f14:	2204      	movs	r2, #4
 8000f16:	409a      	lsls	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f20:	f043 0204 	orr.w	r2, r3, #4
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d043      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d03c      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d018      	beq.n	8000f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d108      	bne.n	8000f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d024      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	4798      	blx	r3
 8000f7e:	e01f      	b.n	8000fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d01b      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	4798      	blx	r3
 8000f90:	e016      	b.n	8000fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d107      	bne.n	8000fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0208 	bic.w	r2, r2, #8
 8000fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 808e 	beq.w	80010ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 8086 	beq.w	80010ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d136      	bne.n	8001068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0216 	bic.w	r2, r2, #22
 8001008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	2b00      	cmp	r3, #0
 8001020:	d103      	bne.n	800102a <HAL_DMA_IRQHandler+0x1da>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0208 	bic.w	r2, r2, #8
 8001038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103e:	223f      	movs	r2, #63	; 0x3f
 8001040:	409a      	lsls	r2, r3
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800105a:	2b00      	cmp	r3, #0
 800105c:	d07d      	beq.n	800115a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	4798      	blx	r3
        }
        return;
 8001066:	e078      	b.n	800115a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d01c      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d108      	bne.n	8001096 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001088:	2b00      	cmp	r3, #0
 800108a:	d030      	beq.n	80010ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	4798      	blx	r3
 8001094:	e02b      	b.n	80010ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109a:	2b00      	cmp	r3, #0
 800109c:	d027      	beq.n	80010ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	4798      	blx	r3
 80010a6:	e022      	b.n	80010ee <HAL_DMA_IRQHandler+0x29e>
 80010a8:	20000000 	.word	0x20000000
 80010ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10f      	bne.n	80010de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0210 	bic.w	r2, r2, #16
 80010cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d032      	beq.n	800115c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d022      	beq.n	8001148 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2205      	movs	r2, #5
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3301      	adds	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	429a      	cmp	r2, r3
 8001124:	d307      	bcc.n	8001136 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f2      	bne.n	800111a <HAL_DMA_IRQHandler+0x2ca>
 8001134:	e000      	b.n	8001138 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001136:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
 8001158:	e000      	b.n	800115c <HAL_DMA_IRQHandler+0x30c>
        return;
 800115a:	bf00      	nop
    }
  }
}
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop

08001164 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b08d      	sub	sp, #52	; 0x34
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f001 ffb2 	bl	80030e4 <USB_GetMode>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 839d 	bne.w	80018c2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f001 ff16 	bl	8002fbe <USB_ReadInterrupts>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 8393 	beq.w	80018c0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 ff0d 	bl	8002fbe <USB_ReadInterrupts>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d107      	bne.n	80011be <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f002 0202 	and.w	r2, r2, #2
 80011bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fefb 	bl	8002fbe <USB_ReadInterrupts>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	d161      	bne.n	8001296 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	699a      	ldr	r2, [r3, #24]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0210 	bic.w	r2, r2, #16
 80011e0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	f003 020f 	and.w	r2, r3, #15
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	3304      	adds	r3, #4
 8001200:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	0c5b      	lsrs	r3, r3, #17
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	2b02      	cmp	r3, #2
 800120c:	d124      	bne.n	8001258 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d035      	beq.n	8001286 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001224:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001228:	b29b      	uxth	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	6a38      	ldr	r0, [r7, #32]
 800122e:	f001 fda3 	bl	8002d78 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123e:	441a      	add	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001250:	441a      	add	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	619a      	str	r2, [r3, #24]
 8001256:	e016      	b.n	8001286 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	0c5b      	lsrs	r3, r3, #17
 800125c:	f003 030f 	and.w	r3, r3, #15
 8001260:	2b06      	cmp	r3, #6
 8001262:	d110      	bne.n	8001286 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800126a:	2208      	movs	r2, #8
 800126c:	4619      	mov	r1, r3
 800126e:	6a38      	ldr	r0, [r7, #32]
 8001270:	f001 fd82 	bl	8002d78 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	699a      	ldr	r2, [r3, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001280:	441a      	add	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0210 	orr.w	r2, r2, #16
 8001294:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fe8f 	bl	8002fbe <USB_ReadInterrupts>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012aa:	d16e      	bne.n	800138a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fe95 	bl	8002fe4 <USB_ReadDevAllOutEpInterrupt>
 80012ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012bc:	e062      	b.n	8001384 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d057      	beq.n	8001378 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 feba 	bl	800304c <USB_ReadDevOutEPInterrupt>
 80012d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00c      	beq.n	80012fe <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f0:	461a      	mov	r2, r3
 80012f2:	2301      	movs	r3, #1
 80012f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fd4f 	bl	8001d9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00c      	beq.n	8001322 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	015a      	lsls	r2, r3, #5
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	4413      	add	r3, r2
 8001310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001314:	461a      	mov	r2, r3
 8001316:	2308      	movs	r3, #8
 8001318:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800131a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fe49 	bl	8001fb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	015a      	lsls	r2, r3, #5
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4413      	add	r3, r2
 8001334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001338:	461a      	mov	r2, r3
 800133a:	2310      	movs	r3, #16
 800133c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	015a      	lsls	r2, r3, #5
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	4413      	add	r3, r2
 8001350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001354:	461a      	mov	r2, r3
 8001356:	2320      	movs	r3, #32
 8001358:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d009      	beq.n	8001378 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	015a      	lsls	r2, r3, #5
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	4413      	add	r3, r2
 800136c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001370:	461a      	mov	r2, r3
 8001372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001376:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	3301      	adds	r3, #1
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	2b00      	cmp	r3, #0
 8001388:	d199      	bne.n	80012be <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fe15 	bl	8002fbe <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800139a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800139e:	f040 80c0 	bne.w	8001522 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fe36 	bl	8003018 <USB_ReadDevAllInEpInterrupt>
 80013ac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013b2:	e0b2      	b.n	800151a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80a7 	beq.w	800150e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fe5c 	bl	8003088 <USB_ReadDevInEPInterrupt>
 80013d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d057      	beq.n	800148c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	2201      	movs	r2, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69f9      	ldr	r1, [r7, #28]
 80013f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013fc:	4013      	ands	r3, r2
 80013fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	015a      	lsls	r2, r3, #5
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	4413      	add	r3, r2
 8001408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140c:	461a      	mov	r2, r3
 800140e:	2301      	movs	r3, #1
 8001410:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d132      	bne.n	8001480 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3348      	adds	r3, #72	; 0x48
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4403      	add	r3, r0
 800143a:	3344      	adds	r3, #68	; 0x44
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4419      	add	r1, r3
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4403      	add	r3, r0
 800144e:	3348      	adds	r3, #72	; 0x48
 8001450:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	2b00      	cmp	r3, #0
 8001456:	d113      	bne.n	8001480 <HAL_PCD_IRQHandler+0x31c>
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	4613      	mov	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	3350      	adds	r3, #80	; 0x50
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d108      	bne.n	8001480 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001478:	461a      	mov	r2, r3
 800147a:	2101      	movs	r1, #1
 800147c:	f001 fe64 	bl	8003148 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4619      	mov	r1, r3
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f003 f8fb 	bl	8004682 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d008      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a2:	461a      	mov	r2, r3
 80014a4:	2308      	movs	r3, #8
 80014a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	015a      	lsls	r2, r3, #5
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014be:	461a      	mov	r2, r3
 80014c0:	2310      	movs	r3, #16
 80014c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014da:	461a      	mov	r2, r3
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014f6:	461a      	mov	r2, r3
 80014f8:	2302      	movs	r3, #2
 80014fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fbb9 	bl	8001c80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	3301      	adds	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f af49 	bne.w	80013b4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fd49 	bl	8002fbe <USB_ReadInterrupts>
 800152c:	4603      	mov	r3, r0
 800152e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001536:	d122      	bne.n	800157e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800155e:	2100      	movs	r1, #0
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fd6d 	bl	8002040 <HAL_PCDEx_LPM_Callback>
 8001566:	e002      	b.n	800156e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f003 f8f7 	bl	800475c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	695a      	ldr	r2, [r3, #20]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800157c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fd1b 	bl	8002fbe <USB_ReadInterrupts>
 8001588:	4603      	mov	r3, r0
 800158a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001592:	d112      	bne.n	80015ba <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d102      	bne.n	80015aa <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f003 f8b3 	bl	8004710 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	695a      	ldr	r2, [r3, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015b8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 fcfd 	bl	8002fbe <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ce:	f040 80c7 	bne.w	8001760 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2110      	movs	r1, #16
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 ff25 	bl	800243c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f6:	e056      	b.n	80016a6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	015a      	lsls	r2, r3, #5
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	4413      	add	r3, r2
 8001600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001604:	461a      	mov	r2, r3
 8001606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800160a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	015a      	lsls	r2, r3, #5
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4413      	add	r3, r2
 8001614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800161c:	0151      	lsls	r1, r2, #5
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	440a      	add	r2, r1
 8001622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001626:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800162a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162e:	015a      	lsls	r2, r3, #5
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	4413      	add	r3, r2
 8001634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800163c:	0151      	lsls	r1, r2, #5
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	440a      	add	r2, r1
 8001642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001646:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800164a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001658:	461a      	mov	r2, r3
 800165a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800165e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001670:	0151      	lsls	r1, r2, #5
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	440a      	add	r2, r1
 8001676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800167a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800167e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001690:	0151      	lsls	r1, r2, #5
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	440a      	add	r2, r1
 8001696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800169a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800169e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	3301      	adds	r3, #1
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d3a3      	bcc.n	80015f8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016be:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d016      	beq.n	80016fa <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016dc:	f043 030b 	orr.w	r3, r3, #11
 80016e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f2:	f043 030b 	orr.w	r3, r3, #11
 80016f6:	6453      	str	r3, [r2, #68]	; 0x44
 80016f8:	e015      	b.n	8001726 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800170c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001710:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001720:	f043 030b 	orr.w	r3, r3, #11
 8001724:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001734:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001738:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800174a:	461a      	mov	r2, r3
 800174c:	f001 fcfc 	bl	8003148 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800175e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fc2a 	bl	8002fbe <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001774:	d124      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fcc0 	bl	8003100 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fe7f 	bl	8002488 <USB_GetDevSpeed>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681c      	ldr	r4, [r3, #0]
 8001796:	f000 fc5f 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 800179a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	4620      	mov	r0, r4
 80017a6:	f000 fda7 	bl	80022f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f002 ff91 	bl	80046d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fbfa 	bl	8002fbe <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d10a      	bne.n	80017ea <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f002 ff6e 	bl	80046b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f002 0208 	and.w	r2, r2, #8
 80017e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fbe5 	bl	8002fbe <USB_ReadInterrupts>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017fe:	d10f      	bne.n	8001820 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f002 ffc6 	bl	800479c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800181e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fbca 	bl	8002fbe <USB_ReadInterrupts>
 800182a:	4603      	mov	r3, r0
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001834:	d10f      	bne.n	8001856 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f002 ff99 	bl	8004778 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fbaf 	bl	8002fbe <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186a:	d10a      	bne.n	8001882 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f002 ffa7 	bl	80047c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fb99 	bl	8002fbe <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b04      	cmp	r3, #4
 8001894:	d115      	bne.n	80018c2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f002 ff97 	bl	80047dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	e000      	b.n	80018c2 <HAL_PCD_IRQHandler+0x75e>
      return;
 80018c0:	bf00      	nop
    }
  }
}
 80018c2:	3734      	adds	r7, #52	; 0x34
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}

080018c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <HAL_PCD_SetAddress+0x1a>
 80018de:	2302      	movs	r3, #2
 80018e0:	e013      	b.n	800190a <HAL_PCD_SetAddress+0x42>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 fb39 	bl	8002f72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	4608      	mov	r0, r1
 800191c:	4611      	mov	r1, r2
 800191e:	461a      	mov	r2, r3
 8001920:	4603      	mov	r3, r0
 8001922:	70fb      	strb	r3, [r7, #3]
 8001924:	460b      	mov	r3, r1
 8001926:	803b      	strh	r3, [r7, #0]
 8001928:	4613      	mov	r3, r2
 800192a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001934:	2b00      	cmp	r3, #0
 8001936:	da0f      	bge.n	8001958 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f003 020f 	and.w	r2, r3, #15
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	3338      	adds	r3, #56	; 0x38
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	3304      	adds	r3, #4
 800194e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	705a      	strb	r2, [r3, #1]
 8001956:	e00f      	b.n	8001978 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	f003 020f 	and.w	r2, r3, #15
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	3304      	adds	r3, #4
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001984:	883a      	ldrh	r2, [r7, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	78ba      	ldrb	r2, [r7, #2]
 800198e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d102      	bne.n	80019ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_EP_Open+0xaa>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e00e      	b.n	80019da <HAL_PCD_EP_Open+0xc8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68f9      	ldr	r1, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fd81 	bl	80024d2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80019d8:	7afb      	ldrb	r3, [r7, #11]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	460b      	mov	r3, r1
 80019f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019f2:	7afb      	ldrb	r3, [r7, #11]
 80019f4:	f003 020f 	and.w	r2, r3, #15
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d102      	bne.n	8001a3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a3e:	7afb      	ldrb	r3, [r7, #11]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	6979      	ldr	r1, [r7, #20]
 8001a56:	f001 f807 	bl	8002a68 <USB_EP0StartXfer>
 8001a5a:	e008      	b.n	8001a6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	6979      	ldr	r1, [r7, #20]
 8001a6a:	f000 fdb9 	bl	80025e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	460b      	mov	r3, r1
 8001a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	f003 020f 	and.w	r2, r3, #15
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	3338      	adds	r3, #56	; 0x38
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad2:	7afb      	ldrb	r3, [r7, #11]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6979      	ldr	r1, [r7, #20]
 8001aea:	f000 ffbd 	bl	8002a68 <USB_EP0StartXfer>
 8001aee:	e008      	b.n	8001b02 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	6979      	ldr	r1, [r7, #20]
 8001afe:	f000 fd6f 	bl	80025e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	f003 020f 	and.w	r2, r3, #15
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d901      	bls.n	8001b2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e050      	b.n	8001bcc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da0f      	bge.n	8001b52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f003 020f 	and.w	r2, r3, #15
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	3338      	adds	r3, #56	; 0x38
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	705a      	strb	r2, [r3, #1]
 8001b50:	e00d      	b.n	8001b6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	3304      	adds	r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_PCD_EP_SetStall+0x82>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e01e      	b.n	8001bcc <HAL_PCD_EP_SetStall+0xc0>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68f9      	ldr	r1, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 f914 	bl	8002dca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10a      	bne.n	8001bc2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	b2d9      	uxtb	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f001 fac3 	bl	8003148 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 020f 	and.w	r2, r3, #15
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d901      	bls.n	8001bf2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e042      	b.n	8001c78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da0f      	bge.n	8001c1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3338      	adds	r3, #56	; 0x38
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3304      	adds	r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	705a      	strb	r2, [r3, #1]
 8001c18:	e00f      	b.n	8001c3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 020f 	and.w	r2, r3, #15
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_EP_ClrStall+0x86>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e00e      	b.n	8001c78 <HAL_PCD_EP_ClrStall+0xa4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68f9      	ldr	r1, [r7, #12]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 f91c 	bl	8002ea6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	3338      	adds	r3, #56	; 0x38
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d901      	bls.n	8001cb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e06c      	b.n	8001d92 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d902      	bls.n	8001cd4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cdc:	e02b      	b.n	8001d36 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d902      	bls.n	8001cfa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4603      	mov	r3, r0
 8001d18:	6978      	ldr	r0, [r7, #20]
 8001d1a:	f000 fff8 	bl	8002d0e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	441a      	add	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	441a      	add	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d809      	bhi.n	8001d60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d203      	bcs.n	8001d60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1be      	bne.n	8001cde <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d811      	bhi.n	8001d90 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	2201      	movs	r2, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	6939      	ldr	r1, [r7, #16]
 8001d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	333c      	adds	r3, #60	; 0x3c
 8001db4:	3304      	adds	r3, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 80a0 	bne.w	8001f14 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a72      	ldr	r2, [pc, #456]	; (8001fac <PCD_EP_OutXfrComplete_int+0x210>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	f240 80dd 	bls.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80d7 	beq.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e00:	461a      	mov	r2, r3
 8001e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e06:	6093      	str	r3, [r2, #8]
 8001e08:	e0cb      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e20:	461a      	mov	r2, r3
 8001e22:	2320      	movs	r3, #32
 8001e24:	6093      	str	r3, [r2, #8]
 8001e26:	e0bc      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80b7 	bne.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <PCD_EP_OutXfrComplete_int+0x210>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d90f      	bls.n	8001e5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e52:	461a      	mov	r2, r3
 8001e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	e0a2      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	440b      	add	r3, r1
 8001e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4403      	add	r3, r0
 8001e92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4403      	add	r3, r0
 8001eba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4419      	add	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4403      	add	r3, r0
 8001ed0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ed4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d114      	bne.n	8001f06 <PCD_EP_OutXfrComplete_int+0x16a>
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d108      	bne.n	8001f06 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001efe:	461a      	mov	r2, r3
 8001f00:	2101      	movs	r1, #1
 8001f02:	f001 f921 	bl	8003148 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f002 fb9d 	bl	800464c <HAL_PCD_DataOutStageCallback>
 8001f12:	e046      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d124      	bne.n	8001f66 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f32:	461a      	mov	r2, r3
 8001f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f38:	6093      	str	r3, [r2, #8]
 8001f3a:	e032      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2320      	movs	r3, #32
 8001f56:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f002 fb74 	bl	800464c <HAL_PCD_DataOutStageCallback>
 8001f64:	e01d      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d114      	bne.n	8001f96 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d108      	bne.n	8001f96 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2100      	movs	r1, #0
 8001f92:	f001 f8d9 	bl	8003148 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f002 fb55 	bl	800464c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	4f54300a 	.word	0x4f54300a
 8001fb0:	4f54310a 	.word	0x4f54310a

08001fb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	333c      	adds	r3, #60	; 0x3c
 8001fcc:	3304      	adds	r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4a15      	ldr	r2, [pc, #84]	; (800203c <PCD_EP_OutSetupPacket_int+0x88>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d90e      	bls.n	8002008 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002000:	461a      	mov	r2, r3
 8002002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002006:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f002 fb0d 	bl	8004628 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <PCD_EP_OutSetupPacket_int+0x88>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d90c      	bls.n	8002030 <PCD_EP_OutSetupPacket_int+0x7c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002028:	461a      	mov	r2, r3
 800202a:	2101      	movs	r1, #1
 800202c:	f001 f88c 	bl	8003148 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	4f54300a 	.word	0x4f54300a

08002040 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_RCC_GetHCLKFreq+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000

08002070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b02      	cmp	r3, #2
 8002084:	d122      	bne.n	80020cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d11b      	bne.n	80020cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0202 	mvn.w	r2, #2
 800209c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8ee 	bl	8002294 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8e0 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f8f1 	bl	80022a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0204 	mvn.w	r2, #4
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8c4 	bl	8002294 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8b6 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f8c7 	bl	80022a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b08      	cmp	r3, #8
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b08      	cmp	r3, #8
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0208 	mvn.w	r2, #8
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f89a 	bl	8002294 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f88c 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f89d 	bl	80022a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b10      	cmp	r3, #16
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b10      	cmp	r3, #16
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0210 	mvn.w	r2, #16
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2208      	movs	r2, #8
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f870 	bl	8002294 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f862 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f873 	bl	80022a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0201 	mvn.w	r2, #1
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fd5a 	bl	8000ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b80      	cmp	r3, #128	; 0x80
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f862 	bl	80022e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d10e      	bne.n	800224c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d107      	bne.n	800224c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f838 	bl	80022bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b20      	cmp	r3, #32
 8002258:	d10e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b20      	cmp	r3, #32
 8002266:	d107      	bne.n	8002278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0220 	mvn.w	r2, #32
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f82c 	bl	80022d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d165      	bne.n	80023d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4a41      	ldr	r2, [pc, #260]	; (8002414 <USB_SetTurnaroundTime+0x11c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d906      	bls.n	8002322 <USB_SetTurnaroundTime+0x2a>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4a40      	ldr	r2, [pc, #256]	; (8002418 <USB_SetTurnaroundTime+0x120>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d802      	bhi.n	8002322 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800231c:	230f      	movs	r3, #15
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e062      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <USB_SetTurnaroundTime+0x120>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d906      	bls.n	8002338 <USB_SetTurnaroundTime+0x40>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4a3b      	ldr	r2, [pc, #236]	; (800241c <USB_SetTurnaroundTime+0x124>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d802      	bhi.n	8002338 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002332:	230e      	movs	r3, #14
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e057      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4a38      	ldr	r2, [pc, #224]	; (800241c <USB_SetTurnaroundTime+0x124>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d906      	bls.n	800234e <USB_SetTurnaroundTime+0x56>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4a37      	ldr	r2, [pc, #220]	; (8002420 <USB_SetTurnaroundTime+0x128>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d802      	bhi.n	800234e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002348:	230d      	movs	r3, #13
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e04c      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	4a33      	ldr	r2, [pc, #204]	; (8002420 <USB_SetTurnaroundTime+0x128>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d906      	bls.n	8002364 <USB_SetTurnaroundTime+0x6c>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4a32      	ldr	r2, [pc, #200]	; (8002424 <USB_SetTurnaroundTime+0x12c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d802      	bhi.n	8002364 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800235e:	230c      	movs	r3, #12
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e041      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4a2f      	ldr	r2, [pc, #188]	; (8002424 <USB_SetTurnaroundTime+0x12c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d906      	bls.n	800237a <USB_SetTurnaroundTime+0x82>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4a2e      	ldr	r2, [pc, #184]	; (8002428 <USB_SetTurnaroundTime+0x130>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d802      	bhi.n	800237a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002374:	230b      	movs	r3, #11
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e036      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4a2a      	ldr	r2, [pc, #168]	; (8002428 <USB_SetTurnaroundTime+0x130>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d906      	bls.n	8002390 <USB_SetTurnaroundTime+0x98>
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4a29      	ldr	r2, [pc, #164]	; (800242c <USB_SetTurnaroundTime+0x134>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d802      	bhi.n	8002390 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800238a:	230a      	movs	r3, #10
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e02b      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4a26      	ldr	r2, [pc, #152]	; (800242c <USB_SetTurnaroundTime+0x134>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d906      	bls.n	80023a6 <USB_SetTurnaroundTime+0xae>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4a25      	ldr	r2, [pc, #148]	; (8002430 <USB_SetTurnaroundTime+0x138>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d802      	bhi.n	80023a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80023a0:	2309      	movs	r3, #9
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	e020      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4a21      	ldr	r2, [pc, #132]	; (8002430 <USB_SetTurnaroundTime+0x138>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d906      	bls.n	80023bc <USB_SetTurnaroundTime+0xc4>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <USB_SetTurnaroundTime+0x13c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d802      	bhi.n	80023bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80023b6:	2308      	movs	r3, #8
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e015      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <USB_SetTurnaroundTime+0x13c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d906      	bls.n	80023d2 <USB_SetTurnaroundTime+0xda>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <USB_SetTurnaroundTime+0x140>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d802      	bhi.n	80023d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80023cc:	2307      	movs	r3, #7
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e00a      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80023d2:	2306      	movs	r3, #6
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e007      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80023de:	2309      	movs	r3, #9
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e001      	b.n	80023e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80023e4:	2309      	movs	r3, #9
 80023e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	029b      	lsls	r3, r3, #10
 80023fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	00d8acbf 	.word	0x00d8acbf
 8002418:	00e4e1bf 	.word	0x00e4e1bf
 800241c:	00f423ff 	.word	0x00f423ff
 8002420:	0106737f 	.word	0x0106737f
 8002424:	011a499f 	.word	0x011a499f
 8002428:	01312cff 	.word	0x01312cff
 800242c:	014ca43f 	.word	0x014ca43f
 8002430:	016e35ff 	.word	0x016e35ff
 8002434:	01a6ab1f 	.word	0x01a6ab1f
 8002438:	01e847ff 	.word	0x01e847ff

0800243c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	f043 0220 	orr.w	r2, r3, #32
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <USB_FlushTxFifo+0x48>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e006      	b.n	8002476 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b20      	cmp	r3, #32
 8002472:	d0f0      	beq.n	8002456 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	00030d40 	.word	0x00030d40

08002488 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0306 	and.w	r3, r3, #6
 80024a0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80024a8:	2300      	movs	r3, #0
 80024aa:	75fb      	strb	r3, [r7, #23]
 80024ac:	e00a      	b.n	80024c4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d002      	beq.n	80024ba <USB_GetDevSpeed+0x32>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d102      	bne.n	80024c0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80024ba:	2302      	movs	r3, #2
 80024bc:	75fb      	strb	r3, [r7, #23]
 80024be:	e001      	b.n	80024c4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80024c0:	230f      	movs	r3, #15
 80024c2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	785b      	ldrb	r3, [r3, #1]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d13a      	bne.n	8002564 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	b29b      	uxth	r3, r3
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800250c:	4313      	orrs	r3, r2
 800250e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d155      	bne.n	80025d2 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	78db      	ldrb	r3, [r3, #3]
 8002540:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002542:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	059b      	lsls	r3, r3, #22
 8002548:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800254a:	4313      	orrs	r3, r2
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	0151      	lsls	r1, r2, #5
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	440a      	add	r2, r1
 8002554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e036      	b.n	80025d2 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002582:	4313      	orrs	r3, r2
 8002584:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11a      	bne.n	80025d2 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	78db      	ldrb	r3, [r3, #3]
 80025b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80025b8:	430b      	orrs	r3, r1
 80025ba:	4313      	orrs	r3, r2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d0:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	785b      	ldrb	r3, [r3, #1]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	f040 815c 	bne.w	80028ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d132      	bne.n	8002670 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	015a      	lsls	r2, r3, #5
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	4413      	add	r3, r2
 8002612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	0151      	lsls	r1, r2, #5
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	440a      	add	r2, r1
 8002620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800262c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	0151      	lsls	r1, r2, #5
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	440a      	add	r2, r1
 8002644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800264c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	0151      	lsls	r1, r2, #5
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	440a      	add	r2, r1
 8002664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002668:	0cdb      	lsrs	r3, r3, #19
 800266a:	04db      	lsls	r3, r3, #19
 800266c:	6113      	str	r3, [r2, #16]
 800266e:	e074      	b.n	800275a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	0151      	lsls	r1, r2, #5
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	440a      	add	r2, r1
 8002686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800268a:	0cdb      	lsrs	r3, r3, #19
 800268c:	04db      	lsls	r3, r3, #19
 800268e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	0151      	lsls	r1, r2, #5
 80026a2:	69fa      	ldr	r2, [r7, #28]
 80026a4:	440a      	add	r2, r1
 80026a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80026ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80026b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6959      	ldr	r1, [r3, #20]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	440b      	add	r3, r1
 80026cc:	1e59      	subs	r1, r3, #1
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d6:	04d9      	lsls	r1, r3, #19
 80026d8:	4b9d      	ldr	r3, [pc, #628]	; (8002950 <USB_EPStartXfer+0x370>)
 80026da:	400b      	ands	r3, r1
 80026dc:	69b9      	ldr	r1, [r7, #24]
 80026de:	0148      	lsls	r0, r1, #5
 80026e0:	69f9      	ldr	r1, [r7, #28]
 80026e2:	4401      	add	r1, r0
 80026e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80026e8:	4313      	orrs	r3, r2
 80026ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	0148      	lsls	r0, r1, #5
 8002706:	69f9      	ldr	r1, [r7, #28]
 8002708:	4401      	add	r1, r0
 800270a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800270e:	4313      	orrs	r3, r2
 8002710:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	78db      	ldrb	r3, [r3, #3]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d11f      	bne.n	800275a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	0151      	lsls	r1, r2, #5
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	440a      	add	r2, r1
 8002730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002734:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002738:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	0151      	lsls	r1, r2, #5
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	440a      	add	r2, r1
 8002750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002754:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002758:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d14b      	bne.n	80027f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002774:	461a      	mov	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	78db      	ldrb	r3, [r3, #3]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d128      	bne.n	80027d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d110      	bne.n	80027b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	0151      	lsls	r1, r2, #5
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	440a      	add	r2, r1
 80027aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e00f      	b.n	80027d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	0151      	lsls	r1, r2, #5
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	440a      	add	r2, r1
 80027cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e12f      	b.n	8002a58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	0151      	lsls	r1, r2, #5
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	440a      	add	r2, r1
 800280e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002812:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002816:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	78db      	ldrb	r3, [r3, #3]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d015      	beq.n	800284c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8117 	beq.w	8002a58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	2101      	movs	r1, #1
 800283c:	fa01 f303 	lsl.w	r3, r1, r3
 8002840:	69f9      	ldr	r1, [r7, #28]
 8002842:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002846:	4313      	orrs	r3, r2
 8002848:	634b      	str	r3, [r1, #52]	; 0x34
 800284a:	e105      	b.n	8002a58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d110      	bne.n	800287e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	440a      	add	r2, r1
 8002872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002876:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e00f      	b.n	800289e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	0151      	lsls	r1, r2, #5
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	440a      	add	r2, r1
 8002894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	68d9      	ldr	r1, [r3, #12]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	b298      	uxth	r0, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa2b 	bl	8002d0e <USB_WritePacket>
 80028b8:	e0ce      	b.n	8002a58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	0151      	lsls	r1, r2, #5
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	440a      	add	r2, r1
 80028d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028d4:	0cdb      	lsrs	r3, r3, #19
 80028d6:	04db      	lsls	r3, r3, #19
 80028d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80028f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80028fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d126      	bne.n	8002954 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4413      	add	r3, r2
 800290e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	69b9      	ldr	r1, [r7, #24]
 800291e:	0148      	lsls	r0, r1, #5
 8002920:	69f9      	ldr	r1, [r7, #28]
 8002922:	4401      	add	r1, r0
 8002924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002928:	4313      	orrs	r3, r2
 800292a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	4413      	add	r3, r2
 8002934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	0151      	lsls	r1, r2, #5
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	440a      	add	r2, r1
 8002942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800294a:	6113      	str	r3, [r2, #16]
 800294c:	e036      	b.n	80029bc <USB_EPStartXfer+0x3dc>
 800294e:	bf00      	nop
 8002950:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4413      	add	r3, r2
 800295e:	1e5a      	subs	r2, r3, #1
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	8afb      	ldrh	r3, [r7, #22]
 800297a:	04d9      	lsls	r1, r3, #19
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <USB_EPStartXfer+0x484>)
 800297e:	400b      	ands	r3, r1
 8002980:	69b9      	ldr	r1, [r7, #24]
 8002982:	0148      	lsls	r0, r1, #5
 8002984:	69f9      	ldr	r1, [r7, #28]
 8002986:	4401      	add	r1, r0
 8002988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800298c:	4313      	orrs	r3, r2
 800298e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299c:	691a      	ldr	r2, [r3, #16]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	8af9      	ldrh	r1, [r7, #22]
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ac:	69b9      	ldr	r1, [r7, #24]
 80029ae:	0148      	lsls	r0, r1, #5
 80029b0:	69f9      	ldr	r1, [r7, #28]
 80029b2:	4401      	add	r1, r0
 80029b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80029b8:	4313      	orrs	r3, r2
 80029ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d10d      	bne.n	80029de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	68d9      	ldr	r1, [r3, #12]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	460a      	mov	r2, r1
 80029dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	78db      	ldrb	r3, [r3, #3]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d128      	bne.n	8002a38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d110      	bne.n	8002a18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	0151      	lsls	r1, r2, #5
 8002a08:	69fa      	ldr	r2, [r7, #28]
 8002a0a:	440a      	add	r2, r1
 8002a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00f      	b.n	8002a38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	0151      	lsls	r1, r2, #5
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	0151      	lsls	r1, r2, #5
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	1ff80000 	.word	0x1ff80000

08002a68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	785b      	ldrb	r3, [r3, #1]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	f040 80cd 	bne.w	8002c24 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d132      	bne.n	8002af8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	0151      	lsls	r1, r2, #5
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	440a      	add	r2, r1
 8002aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002aac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002ab0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	0151      	lsls	r1, r2, #5
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	440a      	add	r2, r1
 8002acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	0151      	lsls	r1, r2, #5
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	440a      	add	r2, r1
 8002aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002af0:	0cdb      	lsrs	r3, r3, #19
 8002af2:	04db      	lsls	r3, r3, #19
 8002af4:	6113      	str	r3, [r2, #16]
 8002af6:	e04e      	b.n	8002b96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b12:	0cdb      	lsrs	r3, r3, #19
 8002b14:	04db      	lsls	r3, r3, #19
 8002b16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	0151      	lsls	r1, r2, #5
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	440a      	add	r2, r1
 8002b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002b36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002b3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d903      	bls.n	8002b50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	0151      	lsls	r1, r2, #5
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	440a      	add	r2, r1
 8002b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	6939      	ldr	r1, [r7, #16]
 8002b88:	0148      	lsls	r0, r1, #5
 8002b8a:	6979      	ldr	r1, [r7, #20]
 8002b8c:	4401      	add	r1, r0
 8002b8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002b92:	4313      	orrs	r3, r2
 8002b94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d11e      	bne.n	8002bda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	0151      	lsls	r1, r2, #5
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	440a      	add	r2, r1
 8002bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	e092      	b.n	8002d00 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	0151      	lsls	r1, r2, #5
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	440a      	add	r2, r1
 8002bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d07e      	beq.n	8002d00 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	6979      	ldr	r1, [r7, #20]
 8002c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	634b      	str	r3, [r1, #52]	; 0x34
 8002c22:	e06d      	b.n	8002d00 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	0151      	lsls	r1, r2, #5
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	440a      	add	r2, r1
 8002c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c3e:	0cdb      	lsrs	r3, r3, #19
 8002c40:	04db      	lsls	r3, r3, #19
 8002c42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	0151      	lsls	r1, r2, #5
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	440a      	add	r2, r1
 8002c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002c62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002c66:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	0151      	lsls	r1, r2, #5
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	440a      	add	r2, r1
 8002c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	6939      	ldr	r1, [r7, #16]
 8002cb0:	0148      	lsls	r0, r1, #5
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	4401      	add	r1, r0
 8002cb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10d      	bne.n	8002ce0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	460a      	mov	r2, r1
 8002cde:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	0151      	lsls	r1, r2, #5
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	440a      	add	r2, r1
 8002cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002cfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	371c      	adds	r7, #28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b089      	sub	sp, #36	; 0x24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	71fb      	strb	r3, [r7, #7]
 8002d20:	4613      	mov	r3, r2
 8002d22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8002d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11a      	bne.n	8002d6a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8002d34:	88bb      	ldrh	r3, [r7, #4]
 8002d36:	3303      	adds	r3, #3
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	e00f      	b.n	8002d62 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	031a      	lsls	r2, r3, #12
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4e:	461a      	mov	r2, r3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6013      	str	r3, [r2, #0]
      pSrc++;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d3eb      	bcc.n	8002d42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3724      	adds	r7, #36	; 0x24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	3303      	adds	r3, #3
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e00b      	b.n	8002db4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	601a      	str	r2, [r3, #0]
    pDest++;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	3304      	adds	r3, #4
 8002dac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d3ef      	bcc.n	8002d9c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	785b      	ldrb	r3, [r3, #1]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d12c      	bne.n	8002e40 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db12      	blt.n	8002e1e <USB_EPSetStall+0x54>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00f      	beq.n	8002e1e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	0151      	lsls	r1, r2, #5
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	440a      	add	r2, r1
 8002e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e1c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	0151      	lsls	r1, r2, #5
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	440a      	add	r2, r1
 8002e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e02b      	b.n	8002e98 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db12      	blt.n	8002e78 <USB_EPSetStall+0xae>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00f      	beq.n	8002e78 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	0151      	lsls	r1, r2, #5
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	440a      	add	r2, r1
 8002e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e76:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	0151      	lsls	r1, r2, #5
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	440a      	add	r2, r1
 8002e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d128      	bne.n	8002f14 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002edc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	78db      	ldrb	r3, [r3, #3]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d003      	beq.n	8002ef2 <USB_EPClearStall+0x4c>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	78db      	ldrb	r3, [r3, #3]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d138      	bne.n	8002f64 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	0151      	lsls	r1, r2, #5
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	440a      	add	r2, r1
 8002f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e027      	b.n	8002f64 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	0151      	lsls	r1, r2, #5
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	440a      	add	r2, r1
 8002f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	78db      	ldrb	r3, [r3, #3]
 8002f38:	2b03      	cmp	r3, #3
 8002f3a:	d003      	beq.n	8002f44 <USB_EPClearStall+0x9e>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	78db      	ldrb	r3, [r3, #3]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d10f      	bne.n	8002f64 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	0151      	lsls	r1, r2, #5
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	440a      	add	r2, r1
 8002f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f94:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	0c1b      	lsrs	r3, r3, #16
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	b29b      	uxth	r3, r3
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800307a:	68bb      	ldr	r3, [r7, #8]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030aa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	01db      	lsls	r3, r3, #7
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4013      	ands	r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80030d6:	68bb      	ldr	r3, [r7, #8]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0301 	and.w	r3, r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800311a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003136:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	460b      	mov	r3, r1
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	333c      	adds	r3, #60	; 0x3c
 800315e:	3304      	adds	r3, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4a26      	ldr	r2, [pc, #152]	; (8003200 <USB_EP0_OutStart+0xb8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d90a      	bls.n	8003182 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800317c:	d101      	bne.n	8003182 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e037      	b.n	80031f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003188:	461a      	mov	r2, r3
 800318a:	2300      	movs	r3, #0
 800318c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800319c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031b0:	f043 0318 	orr.w	r3, r3, #24
 80031b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80031c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80031ca:	7afb      	ldrb	r3, [r7, #11]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10f      	bne.n	80031f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80031ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	4f54300a 	.word	0x4f54300a

08003204 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003226:	2303      	movs	r3, #3
 8003228:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	4611      	mov	r1, r2
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	4611      	mov	r1, r2
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
  }

  return USBD_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8003292:	6839      	ldr	r1, [r7, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 ff2b 	bl	80040f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80032a8:	461a      	mov	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d00e      	beq.n	80032dc <USBD_LL_SetupStage+0x5a>
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d302      	bcc.n	80032c8 <USBD_LL_SetupStage+0x46>
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d014      	beq.n	80032f0 <USBD_LL_SetupStage+0x6e>
 80032c6:	e01d      	b.n	8003304 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80032ce:	4619      	mov	r1, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fa17 	bl	8003704 <USBD_StdDevReq>
 80032d6:	4603      	mov	r3, r0
 80032d8:	73fb      	strb	r3, [r7, #15]
      break;
 80032da:	e020      	b.n	800331e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fa7b 	bl	80037e0 <USBD_StdItfReq>
 80032ea:	4603      	mov	r3, r0
 80032ec:	73fb      	strb	r3, [r7, #15]
      break;
 80032ee:	e016      	b.n	800331e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fab7 	bl	800386c <USBD_StdEPReq>
 80032fe:	4603      	mov	r3, r0
 8003300:	73fb      	strb	r3, [r7, #15]
      break;
 8003302:	e00c      	b.n	800331e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800330a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f001 fa96 	bl	8004844 <USBD_LL_StallEP>
 8003318:	4603      	mov	r3, r0
 800331a:	73fb      	strb	r3, [r7, #15]
      break;
 800331c:	bf00      	nop
  }

  return ret;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	460b      	mov	r3, r1
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d137      	bne.n	80033ac <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003342:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800334a:	2b03      	cmp	r3, #3
 800334c:	d14a      	bne.n	80033e4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	429a      	cmp	r2, r3
 8003358:	d913      	bls.n	8003382 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	1ad2      	subs	r2, r2, r3
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4293      	cmp	r3, r2
 8003372:	bf28      	it	cs
 8003374:	4613      	movcs	r3, r2
 8003376:	461a      	mov	r2, r3
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 ff2f 	bl	80041de <USBD_CtlContinueRx>
 8003380:	e030      	b.n	80033e4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003394:	2b03      	cmp	r3, #3
 8003396:	d105      	bne.n	80033a4 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 ff2b 	bl	8004200 <USBD_CtlSendStatus>
 80033aa:	e01b      	b.n	80033e4 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d10e      	bne.n	80033e0 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	7afa      	ldrb	r2, [r7, #11]
 80033cc:	4611      	mov	r1, r2
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	4798      	blx	r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80033d6:	7dfb      	ldrb	r3, [r7, #23]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
 80033de:	e002      	b.n	80033e6 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e000      	b.n	80033e6 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b086      	sub	sp, #24
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	460b      	mov	r3, r1
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d16a      	bne.n	80034d8 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3314      	adds	r3, #20
 8003406:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800340e:	2b02      	cmp	r3, #2
 8003410:	d155      	bne.n	80034be <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	429a      	cmp	r2, r3
 800341c:	d914      	bls.n	8003448 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	1ad2      	subs	r2, r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	461a      	mov	r2, r3
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 fec1 	bl	80041bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800343a:	2300      	movs	r3, #0
 800343c:	2200      	movs	r2, #0
 800343e:	2100      	movs	r1, #0
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f001 faa9 	bl	8004998 <USBD_LL_PrepareReceive>
 8003446:	e03a      	b.n	80034be <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	d11c      	bne.n	800348e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800345c:	429a      	cmp	r2, r3
 800345e:	d316      	bcc.n	800348e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800346a:	429a      	cmp	r2, r3
 800346c:	d20f      	bcs.n	800348e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fea2 	bl	80041bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003480:	2300      	movs	r3, #0
 8003482:	2200      	movs	r2, #0
 8003484:	2100      	movs	r1, #0
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f001 fa86 	bl	8004998 <USBD_LL_PrepareReceive>
 800348c:	e017      	b.n	80034be <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d105      	bne.n	80034b0 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f001 f9c6 	bl	8004844 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 feb4 	bl	8004226 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d123      	bne.n	8003510 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff fe9b 	bl	8003204 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80034d6:	e01b      	b.n	8003510 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d10e      	bne.n	800350c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	7afa      	ldrb	r2, [r7, #11]
 80034f8:	4611      	mov	r1, r2
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	4798      	blx	r3
 80034fe:	4603      	mov	r3, r0
 8003500:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	e002      	b.n	8003512 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800350c:	2303      	movs	r3, #3
 800350e:	e000      	b.n	8003512 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6852      	ldr	r2, [r2, #4]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	4611      	mov	r1, r2
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800355e:	2340      	movs	r3, #64	; 0x40
 8003560:	2200      	movs	r2, #0
 8003562:	2100      	movs	r1, #0
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f001 f947 	bl	80047f8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2240      	movs	r2, #64	; 0x40
 8003576:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800357a:	2340      	movs	r3, #64	; 0x40
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 f939 	bl	80047f8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2240      	movs	r2, #64	; 0x40
 8003590:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2204      	movs	r2, #4
 80035d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d105      	bne.n	8003604 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003620:	2b03      	cmp	r3, #3
 8003622:	d10b      	bne.n	800363c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6852      	ldr	r2, [r2, #4]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	4611      	mov	r1, r2
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
  }

  return USBD_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3301      	adds	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80036e6:	8a3b      	ldrh	r3, [r7, #16]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	b21a      	sxth	r2, r3
 80036ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	b21b      	sxth	r3, r3
 80036f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80036f6:	89fb      	ldrh	r3, [r7, #14]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800371a:	2b20      	cmp	r3, #32
 800371c:	d004      	beq.n	8003728 <USBD_StdDevReq+0x24>
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d002      	beq.n	8003728 <USBD_StdDevReq+0x24>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <USBD_StdDevReq+0x38>
 8003726:	e050      	b.n	80037ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
 8003736:	4603      	mov	r3, r0
 8003738:	73fb      	strb	r3, [r7, #15]
    break;
 800373a:	e04b      	b.n	80037d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	2b09      	cmp	r3, #9
 8003742:	d83c      	bhi.n	80037be <USBD_StdDevReq+0xba>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <USBD_StdDevReq+0x48>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	080037a1 	.word	0x080037a1
 8003750:	080037b5 	.word	0x080037b5
 8003754:	080037bf 	.word	0x080037bf
 8003758:	080037ab 	.word	0x080037ab
 800375c:	080037bf 	.word	0x080037bf
 8003760:	0800377f 	.word	0x0800377f
 8003764:	08003775 	.word	0x08003775
 8003768:	080037bf 	.word	0x080037bf
 800376c:	08003797 	.word	0x08003797
 8003770:	08003789 	.word	0x08003789
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f9ce 	bl	8003b18 <USBD_GetDescriptor>
      break;
 800377c:	e024      	b.n	80037c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb33 	bl	8003dec <USBD_SetAddress>
      break;
 8003786:	e01f      	b.n	80037c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb70 	bl	8003e70 <USBD_SetConfig>
 8003790:	4603      	mov	r3, r0
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e018      	b.n	80037c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fc0d 	bl	8003fb8 <USBD_GetConfig>
      break;
 800379e:	e013      	b.n	80037c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fc3c 	bl	8004020 <USBD_GetStatus>
      break;
 80037a8:	e00e      	b.n	80037c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80037aa:	6839      	ldr	r1, [r7, #0]
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fc6a 	bl	8004086 <USBD_SetFeature>
      break;
 80037b2:	e009      	b.n	80037c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80037b4:	6839      	ldr	r1, [r7, #0]
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fc79 	bl	80040ae <USBD_ClrFeature>
      break;
 80037bc:	e004      	b.n	80037c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80037be:	6839      	ldr	r1, [r7, #0]
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fccf 	bl	8004164 <USBD_CtlError>
      break;
 80037c6:	bf00      	nop
    }
    break;
 80037c8:	e004      	b.n	80037d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80037ca:	6839      	ldr	r1, [r7, #0]
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fcc9 	bl	8004164 <USBD_CtlError>
    break;
 80037d2:	bf00      	nop
  }

  return ret;
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop

080037e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d003      	beq.n	8003802 <USBD_StdItfReq+0x22>
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	d001      	beq.n	8003802 <USBD_StdItfReq+0x22>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d12a      	bne.n	8003858 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003808:	3b01      	subs	r3, #1
 800380a:	2b02      	cmp	r3, #2
 800380c:	d81d      	bhi.n	800384a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	889b      	ldrh	r3, [r3, #4]
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d813      	bhi.n	8003840 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
 8003826:	4603      	mov	r3, r0
 8003828:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	88db      	ldrh	r3, [r3, #6]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d110      	bne.n	8003854 <USBD_StdItfReq+0x74>
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10d      	bne.n	8003854 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fce1 	bl	8004200 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800383e:	e009      	b.n	8003854 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fc8e 	bl	8004164 <USBD_CtlError>
      break;
 8003848:	e004      	b.n	8003854 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800384a:	6839      	ldr	r1, [r7, #0]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fc89 	bl	8004164 <USBD_CtlError>
      break;
 8003852:	e000      	b.n	8003856 <USBD_StdItfReq+0x76>
      break;
 8003854:	bf00      	nop
    }
    break;
 8003856:	e004      	b.n	8003862 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8003858:	6839      	ldr	r1, [r7, #0]
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fc82 	bl	8004164 <USBD_CtlError>
    break;
 8003860:	bf00      	nop
  }

  return ret;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	889b      	ldrh	r3, [r3, #4]
 800387e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003888:	2b20      	cmp	r3, #32
 800388a:	d004      	beq.n	8003896 <USBD_StdEPReq+0x2a>
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d002      	beq.n	8003896 <USBD_StdEPReq+0x2a>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <USBD_StdEPReq+0x3e>
 8003894:	e135      	b.n	8003b02 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]
    break;
 80038a8:	e130      	b.n	8003b0c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	785b      	ldrb	r3, [r3, #1]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d03e      	beq.n	8003930 <USBD_StdEPReq+0xc4>
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d002      	beq.n	80038bc <USBD_StdEPReq+0x50>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d077      	beq.n	80039aa <USBD_StdEPReq+0x13e>
 80038ba:	e11c      	b.n	8003af6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d002      	beq.n	80038cc <USBD_StdEPReq+0x60>
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d015      	beq.n	80038f6 <USBD_StdEPReq+0x8a>
 80038ca:	e02b      	b.n	8003924 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80038cc:	7bbb      	ldrb	r3, [r7, #14]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <USBD_StdEPReq+0x80>
 80038d2:	7bbb      	ldrb	r3, [r7, #14]
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d009      	beq.n	80038ec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 ffb1 	bl	8004844 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 ffad 	bl	8004844 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80038ea:	e020      	b.n	800392e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fc38 	bl	8004164 <USBD_CtlError>
        break;
 80038f4:	e01b      	b.n	800392e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	885b      	ldrh	r3, [r3, #2]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10e      	bne.n	800391c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80038fe:	7bbb      	ldrb	r3, [r7, #14]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00b      	beq.n	800391c <USBD_StdEPReq+0xb0>
 8003904:	7bbb      	ldrb	r3, [r7, #14]
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d008      	beq.n	800391c <USBD_StdEPReq+0xb0>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	88db      	ldrh	r3, [r3, #6]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8003912:	7bbb      	ldrb	r3, [r7, #14]
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 ff94 	bl	8004844 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fc6f 	bl	8004200 <USBD_CtlSendStatus>

        break;
 8003922:	e004      	b.n	800392e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fc1c 	bl	8004164 <USBD_CtlError>
        break;
 800392c:	bf00      	nop
      }
      break;
 800392e:	e0e7      	b.n	8003b00 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003936:	2b02      	cmp	r3, #2
 8003938:	d002      	beq.n	8003940 <USBD_StdEPReq+0xd4>
 800393a:	2b03      	cmp	r3, #3
 800393c:	d015      	beq.n	800396a <USBD_StdEPReq+0xfe>
 800393e:	e02d      	b.n	800399c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003940:	7bbb      	ldrb	r3, [r7, #14]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <USBD_StdEPReq+0xf4>
 8003946:	7bbb      	ldrb	r3, [r7, #14]
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d009      	beq.n	8003960 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800394c:	7bbb      	ldrb	r3, [r7, #14]
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 ff77 	bl	8004844 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 ff73 	bl	8004844 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800395e:	e023      	b.n	80039a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8003960:	6839      	ldr	r1, [r7, #0]
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fbfe 	bl	8004164 <USBD_CtlError>
        break;
 8003968:	e01e      	b.n	80039a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	885b      	ldrh	r3, [r3, #2]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d119      	bne.n	80039a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8003972:	7bbb      	ldrb	r3, [r7, #14]
 8003974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 ff7e 	bl	8004882 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fc3a 	bl	8004200 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
        }
        break;
 800399a:	e004      	b.n	80039a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800399c:	6839      	ldr	r1, [r7, #0]
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fbe0 	bl	8004164 <USBD_CtlError>
        break;
 80039a4:	e000      	b.n	80039a8 <USBD_StdEPReq+0x13c>
        break;
 80039a6:	bf00      	nop
      }
      break;
 80039a8:	e0aa      	b.n	8003b00 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d002      	beq.n	80039ba <USBD_StdEPReq+0x14e>
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d032      	beq.n	8003a1e <USBD_StdEPReq+0x1b2>
 80039b8:	e097      	b.n	8003aea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80039ba:	7bbb      	ldrb	r3, [r7, #14]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <USBD_StdEPReq+0x164>
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d004      	beq.n	80039d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80039c6:	6839      	ldr	r1, [r7, #0]
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fbcb 	bl	8004164 <USBD_CtlError>
          break;
 80039ce:	e091      	b.n	8003af4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80039d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da0b      	bge.n	80039f0 <USBD_StdEPReq+0x184>
 80039d8:	7bbb      	ldrb	r3, [r7, #14]
 80039da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3310      	adds	r3, #16
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	3304      	adds	r3, #4
 80039ee:	e00b      	b.n	8003a08 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	3304      	adds	r3, #4
 8003a08:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2202      	movs	r2, #2
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fbb5 	bl	8004186 <USBD_CtlSendData>
        break;
 8003a1c:	e06a      	b.n	8003af4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8003a1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da11      	bge.n	8003a4a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003a26:	7bbb      	ldrb	r3, [r7, #14]
 8003a28:	f003 020f 	and.w	r2, r3, #15
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	3324      	adds	r3, #36	; 0x24
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d117      	bne.n	8003a70 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8003a40:	6839      	ldr	r1, [r7, #0]
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fb8e 	bl	8004164 <USBD_CtlError>
            break;
 8003a48:	e054      	b.n	8003af4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003a4a:	7bbb      	ldrb	r3, [r7, #14]
 8003a4c:	f003 020f 	and.w	r2, r3, #15
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8003a66:	6839      	ldr	r1, [r7, #0]
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fb7b 	bl	8004164 <USBD_CtlError>
            break;
 8003a6e:	e041      	b.n	8003af4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	da0b      	bge.n	8003a90 <USBD_StdEPReq+0x224>
 8003a78:	7bbb      	ldrb	r3, [r7, #14]
 8003a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	3310      	adds	r3, #16
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	e00b      	b.n	8003aa8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8003a90:	7bbb      	ldrb	r3, [r7, #14]
 8003a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003aaa:	7bbb      	ldrb	r3, [r7, #14]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <USBD_StdEPReq+0x24a>
 8003ab0:	7bbb      	ldrb	r3, [r7, #14]
 8003ab2:	2b80      	cmp	r3, #128	; 0x80
 8003ab4:	d103      	bne.n	8003abe <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e00e      	b.n	8003adc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8003abe:	7bbb      	ldrb	r3, [r7, #14]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fefc 	bl	80048c0 <USBD_LL_IsStallEP>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e002      	b.n	8003adc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fb4f 	bl	8004186 <USBD_CtlSendData>
          break;
 8003ae8:	e004      	b.n	8003af4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8003aea:	6839      	ldr	r1, [r7, #0]
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fb39 	bl	8004164 <USBD_CtlError>
        break;
 8003af2:	bf00      	nop
      }
      break;
 8003af4:	e004      	b.n	8003b00 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8003af6:	6839      	ldr	r1, [r7, #0]
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fb33 	bl	8004164 <USBD_CtlError>
      break;
 8003afe:	bf00      	nop
    }
    break;
 8003b00:	e004      	b.n	8003b0c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8003b02:	6839      	ldr	r1, [r7, #0]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fb2d 	bl	8004164 <USBD_CtlError>
    break;
 8003b0a:	bf00      	nop
  }

  return ret;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	885b      	ldrh	r3, [r3, #2]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	f200 8128 	bhi.w	8003d8e <USBD_GetDescriptor+0x276>
 8003b3e:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <USBD_GetDescriptor+0x2c>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b61 	.word	0x08003b61
 8003b48:	08003b79 	.word	0x08003b79
 8003b4c:	08003bb9 	.word	0x08003bb9
 8003b50:	08003d8f 	.word	0x08003d8f
 8003b54:	08003d8f 	.word	0x08003d8f
 8003b58:	08003d2f 	.word	0x08003d2f
 8003b5c:	08003d5b 	.word	0x08003d5b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	7c12      	ldrb	r2, [r2, #16]
 8003b6c:	f107 0108 	add.w	r1, r7, #8
 8003b70:	4610      	mov	r0, r2
 8003b72:	4798      	blx	r3
 8003b74:	60f8      	str	r0, [r7, #12]
    break;
 8003b76:	e112      	b.n	8003d9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	7c1b      	ldrb	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10d      	bne.n	8003b9c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f107 0208 	add.w	r2, r7, #8
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4798      	blx	r3
 8003b90:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	2202      	movs	r2, #2
 8003b98:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8003b9a:	e100      	b.n	8003d9e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	f107 0208 	add.w	r2, r7, #8
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4798      	blx	r3
 8003bac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	701a      	strb	r2, [r3, #0]
    break;
 8003bb6:	e0f2      	b.n	8003d9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	885b      	ldrh	r3, [r3, #2]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	f200 80ac 	bhi.w	8003d1c <USBD_GetDescriptor+0x204>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <USBD_GetDescriptor+0xb4>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003be5 	.word	0x08003be5
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c4d 	.word	0x08003c4d
 8003bd8:	08003c81 	.word	0x08003c81
 8003bdc:	08003cb5 	.word	0x08003cb5
 8003be0:	08003ce9 	.word	0x08003ce9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	7c12      	ldrb	r2, [r2, #16]
 8003bfc:	f107 0108 	add.w	r1, r7, #8
 8003c00:	4610      	mov	r0, r2
 8003c02:	4798      	blx	r3
 8003c04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003c06:	e091      	b.n	8003d2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8003c08:	6839      	ldr	r1, [r7, #0]
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 faaa 	bl	8004164 <USBD_CtlError>
        err++;
 8003c10:	7afb      	ldrb	r3, [r7, #11]
 8003c12:	3301      	adds	r3, #1
 8003c14:	72fb      	strb	r3, [r7, #11]
      break;
 8003c16:	e089      	b.n	8003d2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	7c12      	ldrb	r2, [r2, #16]
 8003c30:	f107 0108 	add.w	r1, r7, #8
 8003c34:	4610      	mov	r0, r2
 8003c36:	4798      	blx	r3
 8003c38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003c3a:	e077      	b.n	8003d2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8003c3c:	6839      	ldr	r1, [r7, #0]
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa90 	bl	8004164 <USBD_CtlError>
        err++;
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	3301      	adds	r3, #1
 8003c48:	72fb      	strb	r3, [r7, #11]
      break;
 8003c4a:	e06f      	b.n	8003d2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	7c12      	ldrb	r2, [r2, #16]
 8003c64:	f107 0108 	add.w	r1, r7, #8
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
 8003c6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003c6e:	e05d      	b.n	8003d2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8003c70:	6839      	ldr	r1, [r7, #0]
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fa76 	bl	8004164 <USBD_CtlError>
        err++;
 8003c78:	7afb      	ldrb	r3, [r7, #11]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	72fb      	strb	r3, [r7, #11]
      break;
 8003c7e:	e055      	b.n	8003d2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00b      	beq.n	8003ca4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	7c12      	ldrb	r2, [r2, #16]
 8003c98:	f107 0108 	add.w	r1, r7, #8
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4798      	blx	r3
 8003ca0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003ca2:	e043      	b.n	8003d2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fa5c 	bl	8004164 <USBD_CtlError>
        err++;
 8003cac:	7afb      	ldrb	r3, [r7, #11]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	72fb      	strb	r3, [r7, #11]
      break;
 8003cb2:	e03b      	b.n	8003d2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	7c12      	ldrb	r2, [r2, #16]
 8003ccc:	f107 0108 	add.w	r1, r7, #8
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4798      	blx	r3
 8003cd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003cd6:	e029      	b.n	8003d2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fa42 	bl	8004164 <USBD_CtlError>
        err++;
 8003ce0:	7afb      	ldrb	r3, [r7, #11]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	72fb      	strb	r3, [r7, #11]
      break;
 8003ce6:	e021      	b.n	8003d2c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00b      	beq.n	8003d0c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	7c12      	ldrb	r2, [r2, #16]
 8003d00:	f107 0108 	add.w	r1, r7, #8
 8003d04:	4610      	mov	r0, r2
 8003d06:	4798      	blx	r3
 8003d08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8003d0a:	e00f      	b.n	8003d2c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fa28 	bl	8004164 <USBD_CtlError>
        err++;
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	3301      	adds	r3, #1
 8003d18:	72fb      	strb	r3, [r7, #11]
      break;
 8003d1a:	e007      	b.n	8003d2c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa20 	bl	8004164 <USBD_CtlError>
      err++;
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	3301      	adds	r3, #1
 8003d28:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8003d2a:	bf00      	nop
    }
    break;
 8003d2c:	e037      	b.n	8003d9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7c1b      	ldrb	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	f107 0208 	add.w	r2, r7, #8
 8003d42:	4610      	mov	r0, r2
 8003d44:	4798      	blx	r3
 8003d46:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8003d48:	e029      	b.n	8003d9e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8003d4a:	6839      	ldr	r1, [r7, #0]
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fa09 	bl	8004164 <USBD_CtlError>
      err++;
 8003d52:	7afb      	ldrb	r3, [r7, #11]
 8003d54:	3301      	adds	r3, #1
 8003d56:	72fb      	strb	r3, [r7, #11]
    break;
 8003d58:	e021      	b.n	8003d9e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7c1b      	ldrb	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10d      	bne.n	8003d7e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f107 0208 	add.w	r2, r7, #8
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4798      	blx	r3
 8003d72:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3301      	adds	r3, #1
 8003d78:	2207      	movs	r2, #7
 8003d7a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8003d7c:	e00f      	b.n	8003d9e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f9ef 	bl	8004164 <USBD_CtlError>
      err++;
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	72fb      	strb	r3, [r7, #11]
    break;
 8003d8c:	e007      	b.n	8003d9e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f9e7 	bl	8004164 <USBD_CtlError>
    err++;
 8003d96:	7afb      	ldrb	r3, [r7, #11]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	72fb      	strb	r3, [r7, #11]
    break;
 8003d9c:	bf00      	nop
  }

  if (err != 0U)
 8003d9e:	7afb      	ldrb	r3, [r7, #11]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11e      	bne.n	8003de2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	88db      	ldrh	r3, [r3, #6]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d016      	beq.n	8003dda <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	88da      	ldrh	r2, [r3, #6]
 8003db6:	893b      	ldrh	r3, [r7, #8]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf28      	it	cs
 8003dbc:	4613      	movcs	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f9dc 	bl	8004186 <USBD_CtlSendData>
 8003dce:	e009      	b.n	8003de4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8003dd0:	6839      	ldr	r1, [r7, #0]
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9c6 	bl	8004164 <USBD_CtlError>
 8003dd8:	e004      	b.n	8003de4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa10 	bl	8004200 <USBD_CtlSendStatus>
 8003de0:	e000      	b.n	8003de4 <USBD_GetDescriptor+0x2cc>
    return;
 8003de2:	bf00      	nop
    }
  }
}
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop

08003dec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	889b      	ldrh	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d130      	bne.n	8003e60 <USBD_SetAddress+0x74>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	88db      	ldrh	r3, [r3, #6]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d12c      	bne.n	8003e60 <USBD_SetAddress+0x74>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	885b      	ldrh	r3, [r3, #2]
 8003e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e0c:	d828      	bhi.n	8003e60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	885b      	ldrh	r3, [r3, #2]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d104      	bne.n	8003e2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8003e24:	6839      	ldr	r1, [r7, #0]
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f99c 	bl	8004164 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e2c:	e01c      	b.n	8003e68 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fd6c 	bl	8004918 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9dd 	bl	8004200 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e54:	e008      	b.n	8003e68 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e5e:	e003      	b.n	8003e68 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f97e 	bl	8004164 <USBD_CtlError>
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	885b      	ldrh	r3, [r3, #2]
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	4b4b      	ldr	r3, [pc, #300]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003e86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003e88:	4b4a      	ldr	r3, [pc, #296]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d905      	bls.n	8003e9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f966 	bl	8004164 <USBD_CtlError>
    return USBD_FAIL;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e087      	b.n	8003fac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d002      	beq.n	8003eac <USBD_SetConfig+0x3c>
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d025      	beq.n	8003ef6 <USBD_SetConfig+0x86>
 8003eaa:	e071      	b.n	8003f90 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8003eac:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01c      	beq.n	8003eee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8003eb4:	4b3f      	ldr	r3, [pc, #252]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003ebe:	4b3d      	ldr	r3, [pc, #244]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff f9a8 	bl	800321a <USBD_SetClassConfig>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8003ed4:	6839      	ldr	r1, [r7, #0]
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f944 	bl	8004164 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8003edc:	e065      	b.n	8003faa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f98e 	bl	8004200 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8003eec:	e05d      	b.n	8003faa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f986 	bl	8004200 <USBD_CtlSendStatus>
    break;
 8003ef4:	e059      	b.n	8003faa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d112      	bne.n	8003f24 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003f10:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff f99b 	bl	8003252 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f96f 	bl	8004200 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8003f22:	e042      	b.n	8003faa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d02a      	beq.n	8003f88 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff f989 	bl	8003252 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8003f40:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff f962 	bl	800321a <USBD_SetClassConfig>
 8003f56:	4603      	mov	r3, r0
 8003f58:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00f      	beq.n	8003f80 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8003f60:	6839      	ldr	r1, [r7, #0]
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8fe 	bl	8004164 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff f96e 	bl	8003252 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8003f7e:	e014      	b.n	8003faa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f93d 	bl	8004200 <USBD_CtlSendStatus>
    break;
 8003f86:	e010      	b.n	8003faa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f939 	bl	8004200 <USBD_CtlSendStatus>
    break;
 8003f8e:	e00c      	b.n	8003faa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8003f90:	6839      	ldr	r1, [r7, #0]
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8e6 	bl	8004164 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <USBD_SetConfig+0x144>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff f957 	bl	8003252 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8003fa8:	bf00      	nop
  }

  return ret;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	200001f8 	.word	0x200001f8

08003fb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	88db      	ldrh	r3, [r3, #6]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d004      	beq.n	8003fd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f8c9 	bl	8004164 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8003fd2:	e021      	b.n	8004018 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	db17      	blt.n	800400e <USBD_GetConfig+0x56>
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	dd02      	ble.n	8003fe8 <USBD_GetConfig+0x30>
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d00b      	beq.n	8003ffe <USBD_GetConfig+0x46>
 8003fe6:	e012      	b.n	800400e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8c5 	bl	8004186 <USBD_CtlSendData>
      break;
 8003ffc:	e00c      	b.n	8004018 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2201      	movs	r2, #1
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8bd 	bl	8004186 <USBD_CtlSendData>
      break;
 800400c:	e004      	b.n	8004018 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800400e:	6839      	ldr	r1, [r7, #0]
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8a7 	bl	8004164 <USBD_CtlError>
      break;
 8004016:	bf00      	nop
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004030:	3b01      	subs	r3, #1
 8004032:	2b02      	cmp	r3, #2
 8004034:	d81e      	bhi.n	8004074 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	88db      	ldrh	r3, [r3, #6]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d004      	beq.n	8004048 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800403e:	6839      	ldr	r1, [r7, #0]
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f88f 	bl	8004164 <USBD_CtlError>
      break;
 8004046:	e01a      	b.n	800407e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f043 0202 	orr.w	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	330c      	adds	r3, #12
 8004068:	2202      	movs	r2, #2
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f88a 	bl	8004186 <USBD_CtlSendData>
    break;
 8004072:	e004      	b.n	800407e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f874 	bl	8004164 <USBD_CtlError>
    break;
 800407c:	bf00      	nop
  }
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	885b      	ldrh	r3, [r3, #2]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d106      	bne.n	80040a6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f8ad 	bl	8004200 <USBD_CtlSendStatus>
  }
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80040be:	3b01      	subs	r3, #1
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d80b      	bhi.n	80040dc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	885b      	ldrh	r3, [r3, #2]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10c      	bne.n	80040e6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f893 	bl	8004200 <USBD_CtlSendStatus>
      }
      break;
 80040da:	e004      	b.n	80040e6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f840 	bl	8004164 <USBD_CtlError>
      break;
 80040e4:	e000      	b.n	80040e8 <USBD_ClrFeature+0x3a>
      break;
 80040e6:	bf00      	nop
  }
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	781a      	ldrb	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	3301      	adds	r3, #1
 8004118:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff fad4 	bl	80036c8 <SWAPBYTE>
 8004120:	4603      	mov	r3, r0
 8004122:	461a      	mov	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3301      	adds	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fac7 	bl	80036c8 <SWAPBYTE>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3301      	adds	r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff faba 	bl	80036c8 <SWAPBYTE>
 8004154:	4603      	mov	r3, r0
 8004156:	461a      	mov	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	80da      	strh	r2, [r3, #6]
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fb67 	bl	8004844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8004176:	2100      	movs	r1, #0
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fb63 	bl	8004844 <USBD_LL_StallEP>
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2202      	movs	r2, #2
 8004196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	2100      	movs	r1, #0
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fbd2 	bl	8004956 <USBD_LL_Transmit>

  return USBD_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	2100      	movs	r1, #0
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fbc1 	bl	8004956 <USBD_LL_Transmit>

  return USBD_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	2100      	movs	r1, #0
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fbd1 	bl	8004998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2204      	movs	r2, #4
 800420c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004210:	2300      	movs	r3, #0
 8004212:	2200      	movs	r2, #0
 8004214:	2100      	movs	r1, #0
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fb9d 	bl	8004956 <USBD_LL_Transmit>

  return USBD_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2205      	movs	r2, #5
 8004232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004236:	2300      	movs	r3, #0
 8004238:	2200      	movs	r2, #0
 800423a:	2100      	movs	r1, #0
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fbab 	bl	8004998 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6892      	ldr	r2, [r2, #8]
 80042aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6852      	ldr	r2, [r2, #4]
 80042b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d103      	bne.n	80042c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	1e5a      	subs	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f2:	4b4e      	ldr	r3, [pc, #312]	; (800442c <xTaskIncrementTick+0x144>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 8088 	bne.w	800440c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042fc:	4b4c      	ldr	r3, [pc, #304]	; (8004430 <xTaskIncrementTick+0x148>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004304:	4a4a      	ldr	r2, [pc, #296]	; (8004430 <xTaskIncrementTick+0x148>)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11f      	bne.n	8004350 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004310:	4b48      	ldr	r3, [pc, #288]	; (8004434 <xTaskIncrementTick+0x14c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	e7fe      	b.n	800432c <xTaskIncrementTick+0x44>
 800432e:	4b41      	ldr	r3, [pc, #260]	; (8004434 <xTaskIncrementTick+0x14c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	4b40      	ldr	r3, [pc, #256]	; (8004438 <xTaskIncrementTick+0x150>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a3e      	ldr	r2, [pc, #248]	; (8004434 <xTaskIncrementTick+0x14c>)
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4a3e      	ldr	r2, [pc, #248]	; (8004438 <xTaskIncrementTick+0x150>)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b3e      	ldr	r3, [pc, #248]	; (800443c <xTaskIncrementTick+0x154>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	4a3c      	ldr	r2, [pc, #240]	; (800443c <xTaskIncrementTick+0x154>)
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	f000 f8e0 	bl	8004510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004350:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <xTaskIncrementTick+0x158>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	429a      	cmp	r2, r3
 8004358:	d349      	bcc.n	80043ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800435a:	4b36      	ldr	r3, [pc, #216]	; (8004434 <xTaskIncrementTick+0x14c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004364:	4b36      	ldr	r3, [pc, #216]	; (8004440 <xTaskIncrementTick+0x158>)
 8004366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800436a:	601a      	str	r2, [r3, #0]
					break;
 800436c:	e03f      	b.n	80043ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <xTaskIncrementTick+0x14c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d203      	bcs.n	800438e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004386:	4a2e      	ldr	r2, [pc, #184]	; (8004440 <xTaskIncrementTick+0x158>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800438c:	e02f      	b.n	80043ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3304      	adds	r3, #4
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff7e 	bl	8004294 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d004      	beq.n	80043aa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	3318      	adds	r3, #24
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff75 	bl	8004294 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	4b25      	ldr	r3, [pc, #148]	; (8004444 <xTaskIncrementTick+0x15c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d903      	bls.n	80043be <xTaskIncrementTick+0xd6>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	4a22      	ldr	r2, [pc, #136]	; (8004444 <xTaskIncrementTick+0x15c>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <xTaskIncrementTick+0x160>)
 80043cc:	441a      	add	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7ff ff39 	bl	800424c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <xTaskIncrementTick+0x164>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d3b8      	bcc.n	800435a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80043e8:	2301      	movs	r3, #1
 80043ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ec:	e7b5      	b.n	800435a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <xTaskIncrementTick+0x164>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	4914      	ldr	r1, [pc, #80]	; (8004448 <xTaskIncrementTick+0x160>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d907      	bls.n	8004416 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004406:	2301      	movs	r3, #1
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e004      	b.n	8004416 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <xTaskIncrementTick+0x168>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3301      	adds	r3, #1
 8004412:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <xTaskIncrementTick+0x168>)
 8004414:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <xTaskIncrementTick+0x16c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800441e:	2301      	movs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004422:	697b      	ldr	r3, [r7, #20]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000680 	.word	0x20000680
 8004430:	20000668 	.word	0x20000668
 8004434:	20000660 	.word	0x20000660
 8004438:	20000664 	.word	0x20000664
 800443c:	20000678 	.word	0x20000678
 8004440:	2000067c 	.word	0x2000067c
 8004444:	2000066c 	.word	0x2000066c
 8004448:	20000200 	.word	0x20000200
 800444c:	200001fc 	.word	0x200001fc
 8004450:	20000670 	.word	0x20000670
 8004454:	20000674 	.word	0x20000674

08004458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800445e:	4b27      	ldr	r3, [pc, #156]	; (80044fc <vTaskSwitchContext+0xa4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004466:	4b26      	ldr	r3, [pc, #152]	; (8004500 <vTaskSwitchContext+0xa8>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800446c:	e040      	b.n	80044f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <vTaskSwitchContext+0xa8>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004474:	4b23      	ldr	r3, [pc, #140]	; (8004504 <vTaskSwitchContext+0xac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e00f      	b.n	800449c <vTaskSwitchContext+0x44>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <vTaskSwitchContext+0x3e>
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	e7fe      	b.n	8004494 <vTaskSwitchContext+0x3c>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3b01      	subs	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	491a      	ldr	r1, [pc, #104]	; (8004508 <vTaskSwitchContext+0xb0>)
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0e5      	beq.n	800447c <vTaskSwitchContext+0x24>
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4a13      	ldr	r2, [pc, #76]	; (8004508 <vTaskSwitchContext+0xb0>)
 80044bc:	4413      	add	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	3308      	adds	r3, #8
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d104      	bne.n	80044e0 <vTaskSwitchContext+0x88>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <vTaskSwitchContext+0xb4>)
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4a06      	ldr	r2, [pc, #24]	; (8004504 <vTaskSwitchContext+0xac>)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6013      	str	r3, [r2, #0]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000680 	.word	0x20000680
 8004500:	20000674 	.word	0x20000674
 8004504:	2000066c 	.word	0x2000066c
 8004508:	20000200 	.word	0x20000200
 800450c:	200001fc 	.word	0x200001fc

08004510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004516:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <prvResetNextTaskUnblockTime+0x38>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d104      	bne.n	800452a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <prvResetNextTaskUnblockTime+0x3c>)
 8004522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004526:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004528:	e008      	b.n	800453c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <prvResetNextTaskUnblockTime+0x38>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a04      	ldr	r2, [pc, #16]	; (800454c <prvResetNextTaskUnblockTime+0x3c>)
 800453a:	6013      	str	r3, [r2, #0]
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000660 	.word	0x20000660
 800454c:	2000067c 	.word	0x2000067c

08004550 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <pxCurrentTCBConst2>)
 8004552:	6819      	ldr	r1, [r3, #0]
 8004554:	6808      	ldr	r0, [r1, #0]
 8004556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455a:	f380 8809 	msr	PSP, r0
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f380 8811 	msr	BASEPRI, r0
 800456a:	4770      	bx	lr
 800456c:	f3af 8000 	nop.w

08004570 <pxCurrentTCBConst2>:
 8004570:	200001fc 	.word	0x200001fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop
	...

08004580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004580:	f3ef 8009 	mrs	r0, PSP
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <pxCurrentTCBConst>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	f01e 0f10 	tst.w	lr, #16
 8004590:	bf08      	it	eq
 8004592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459a:	6010      	str	r0, [r2, #0]
 800459c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045a4:	f380 8811 	msr	BASEPRI, r0
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f7ff ff52 	bl	8004458 <vTaskSwitchContext>
 80045b4:	f04f 0000 	mov.w	r0, #0
 80045b8:	f380 8811 	msr	BASEPRI, r0
 80045bc:	bc09      	pop	{r0, r3}
 80045be:	6819      	ldr	r1, [r3, #0]
 80045c0:	6808      	ldr	r0, [r1, #0]
 80045c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c6:	f01e 0f10 	tst.w	lr, #16
 80045ca:	bf08      	it	eq
 80045cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045d0:	f380 8809 	msr	PSP, r0
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst>:
 80045e0:	200001fc 	.word	0x200001fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004600:	f7ff fe72 	bl	80042e8 <xTaskIncrementTick>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800460a:	4b06      	ldr	r3, [pc, #24]	; (8004624 <SysTick_Handler+0x3c>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fe fe1f 	bl	8003282 <USBD_LL_SetupStage>
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	4619      	mov	r1, r3
 8004676:	f7fe fe57 	bl	8003328 <USBD_LL_DataOutStage>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	460b      	mov	r3, r1
 800468c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	3348      	adds	r3, #72	; 0x48
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	78fb      	ldrb	r3, [r7, #3]
 80046a8:	4619      	mov	r1, r3
 80046aa:	f7fe fea0 	bl	80033ee <USBD_LL_DataInStage>
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe ffa4 	bl	8003612 <USBD_LL_SOF>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d001      	beq.n	80046ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80046e6:	f7fc faf1 	bl	8000ccc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe ff51 	bl	800359c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004700:	4618      	mov	r0, r3
 8004702:	f7fe ff0a 	bl	800351a <USBD_LL_Reset>
}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe ff4c 	bl	80035bc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <HAL_PCD_SuspendCallback+0x48>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	4a03      	ldr	r2, [pc, #12]	; (8004758 <HAL_PCD_SuspendCallback+0x48>)
 800474a:	f043 0306 	orr.w	r3, r3, #6
 800474e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe ff3b 	bl	80035e6 <USBD_LL_Resume>
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe ff66 	bl	8003660 <USBD_LL_IsoOUTIncomplete>
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe ff47 	bl	8003646 <USBD_LL_IsoINIncomplete>
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe ff53 	bl	800367a <USBD_LL_DevConnected>
}
 80047d4:	bf00      	nop
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe ff50 	bl	8003690 <USBD_LL_DevDisconnected>
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	4608      	mov	r0, r1
 8004802:	4611      	mov	r1, r2
 8004804:	461a      	mov	r2, r3
 8004806:	4603      	mov	r3, r0
 8004808:	70fb      	strb	r3, [r7, #3]
 800480a:	460b      	mov	r3, r1
 800480c:	70bb      	strb	r3, [r7, #2]
 800480e:	4613      	mov	r3, r2
 8004810:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8004820:	78bb      	ldrb	r3, [r7, #2]
 8004822:	883a      	ldrh	r2, [r7, #0]
 8004824:	78f9      	ldrb	r1, [r7, #3]
 8004826:	f7fd f874 	bl	8001912 <HAL_PCD_EP_Open>
 800482a:	4603      	mov	r3, r0
 800482c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800482e:	7bfb      	ldrb	r3, [r7, #15]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 f8d3 	bl	80049dc <USBD_Get_USB_Status>
 8004836:	4603      	mov	r3, r0
 8004838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800483a:	7bbb      	ldrb	r3, [r7, #14]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f7fd f952 	bl	8001b0c <HAL_PCD_EP_SetStall>
 8004868:	4603      	mov	r3, r0
 800486a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f8b4 	bl	80049dc <USBD_Get_USB_Status>
 8004874:	4603      	mov	r3, r0
 8004876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004878:	7bbb      	ldrb	r3, [r7, #14]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	4611      	mov	r1, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fd f997 	bl	8001bd4 <HAL_PCD_EP_ClrStall>
 80048a6:	4603      	mov	r3, r0
 80048a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 f895 	bl	80049dc <USBD_Get_USB_Status>
 80048b2:	4603      	mov	r3, r0
 80048b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80048d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80048d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da0b      	bge.n	80048f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	333e      	adds	r3, #62	; 0x3e
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	e00b      	b.n	800490c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80048f4:	78fb      	ldrb	r3, [r7, #3]
 80048f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800490a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f7fc ffc6 	bl	80018c8 <HAL_PCD_SetAddress>
 800493c:	4603      	mov	r3, r0
 800493e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f84a 	bl	80049dc <USBD_Get_USB_Status>
 8004948:	4603      	mov	r3, r0
 800494a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800494c:	7bbb      	ldrb	r3, [r7, #14]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	460b      	mov	r3, r1
 8004964:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8004974:	7af9      	ldrb	r1, [r7, #11]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	f7fd f87d 	bl	8001a78 <HAL_PCD_EP_Transmit>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	4618      	mov	r0, r3
 8004986:	f000 f829 	bl	80049dc <USBD_Get_USB_Status>
 800498a:	4603      	mov	r3, r0
 800498c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800498e:	7dbb      	ldrb	r3, [r7, #22]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	460b      	mov	r3, r1
 80049a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80049b6:	7af9      	ldrb	r1, [r7, #11]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	f7fd f811 	bl	80019e2 <HAL_PCD_EP_Receive>
 80049c0:	4603      	mov	r3, r0
 80049c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f808 	bl	80049dc <USBD_Get_USB_Status>
 80049cc:	4603      	mov	r3, r0
 80049ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80049d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d817      	bhi.n	8004a20 <USBD_Get_USB_Status+0x44>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <USBD_Get_USB_Status+0x1c>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a0f 	.word	0x08004a0f
 8004a00:	08004a15 	.word	0x08004a15
 8004a04:	08004a1b 	.word	0x08004a1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8004a0c:	e00b      	b.n	8004a26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	73fb      	strb	r3, [r7, #15]
    break;
 8004a12:	e008      	b.n	8004a26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
    break;
 8004a18:	e005      	b.n	8004a26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8004a1e:	e002      	b.n	8004a26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8004a20:	2303      	movs	r3, #3
 8004a22:	73fb      	strb	r3, [r7, #15]
    break;
 8004a24:	bf00      	nop
  }
  return usb_status;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <__errno>:
 8004a34:	4b01      	ldr	r3, [pc, #4]	; (8004a3c <__errno+0x8>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20000008 	.word	0x20000008

08004a40 <__libc_init_array>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4e0d      	ldr	r6, [pc, #52]	; (8004a78 <__libc_init_array+0x38>)
 8004a44:	4c0d      	ldr	r4, [pc, #52]	; (8004a7c <__libc_init_array+0x3c>)
 8004a46:	1ba4      	subs	r4, r4, r6
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	2500      	movs	r5, #0
 8004a4c:	42a5      	cmp	r5, r4
 8004a4e:	d109      	bne.n	8004a64 <__libc_init_array+0x24>
 8004a50:	4e0b      	ldr	r6, [pc, #44]	; (8004a80 <__libc_init_array+0x40>)
 8004a52:	4c0c      	ldr	r4, [pc, #48]	; (8004a84 <__libc_init_array+0x44>)
 8004a54:	f003 fd58 	bl	8008508 <_init>
 8004a58:	1ba4      	subs	r4, r4, r6
 8004a5a:	10a4      	asrs	r4, r4, #2
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	42a5      	cmp	r5, r4
 8004a60:	d105      	bne.n	8004a6e <__libc_init_array+0x2e>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a68:	4798      	blx	r3
 8004a6a:	3501      	adds	r5, #1
 8004a6c:	e7ee      	b.n	8004a4c <__libc_init_array+0xc>
 8004a6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a72:	4798      	blx	r3
 8004a74:	3501      	adds	r5, #1
 8004a76:	e7f2      	b.n	8004a5e <__libc_init_array+0x1e>
 8004a78:	08008840 	.word	0x08008840
 8004a7c:	08008840 	.word	0x08008840
 8004a80:	08008840 	.word	0x08008840
 8004a84:	08008844 	.word	0x08008844

08004a88 <malloc>:
 8004a88:	4b02      	ldr	r3, [pc, #8]	; (8004a94 <malloc+0xc>)
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	f000 b865 	b.w	8004b5c <_malloc_r>
 8004a92:	bf00      	nop
 8004a94:	20000008 	.word	0x20000008

08004a98 <memcpy>:
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	1e43      	subs	r3, r0, #1
 8004a9c:	440a      	add	r2, r1
 8004a9e:	4291      	cmp	r1, r2
 8004aa0:	d100      	bne.n	8004aa4 <memcpy+0xc>
 8004aa2:	bd10      	pop	{r4, pc}
 8004aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004aa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aac:	e7f7      	b.n	8004a9e <memcpy+0x6>

08004aae <memset>:
 8004aae:	4402      	add	r2, r0
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d100      	bne.n	8004ab8 <memset+0xa>
 8004ab6:	4770      	bx	lr
 8004ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8004abc:	e7f9      	b.n	8004ab2 <memset+0x4>
	...

08004ac0 <_free_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4605      	mov	r5, r0
 8004ac4:	2900      	cmp	r1, #0
 8004ac6:	d045      	beq.n	8004b54 <_free_r+0x94>
 8004ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004acc:	1f0c      	subs	r4, r1, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfb8      	it	lt
 8004ad2:	18e4      	addlt	r4, r4, r3
 8004ad4:	f002 ff50 	bl	8007978 <__malloc_lock>
 8004ad8:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <_free_r+0x98>)
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	4610      	mov	r0, r2
 8004ade:	b933      	cbnz	r3, 8004aee <_free_r+0x2e>
 8004ae0:	6063      	str	r3, [r4, #4]
 8004ae2:	6014      	str	r4, [r2, #0]
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aea:	f002 bf46 	b.w	800797a <__malloc_unlock>
 8004aee:	42a3      	cmp	r3, r4
 8004af0:	d90c      	bls.n	8004b0c <_free_r+0x4c>
 8004af2:	6821      	ldr	r1, [r4, #0]
 8004af4:	1862      	adds	r2, r4, r1
 8004af6:	4293      	cmp	r3, r2
 8004af8:	bf04      	itt	eq
 8004afa:	681a      	ldreq	r2, [r3, #0]
 8004afc:	685b      	ldreq	r3, [r3, #4]
 8004afe:	6063      	str	r3, [r4, #4]
 8004b00:	bf04      	itt	eq
 8004b02:	1852      	addeq	r2, r2, r1
 8004b04:	6022      	streq	r2, [r4, #0]
 8004b06:	6004      	str	r4, [r0, #0]
 8004b08:	e7ec      	b.n	8004ae4 <_free_r+0x24>
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	b10a      	cbz	r2, 8004b14 <_free_r+0x54>
 8004b10:	42a2      	cmp	r2, r4
 8004b12:	d9fa      	bls.n	8004b0a <_free_r+0x4a>
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	1858      	adds	r0, r3, r1
 8004b18:	42a0      	cmp	r0, r4
 8004b1a:	d10b      	bne.n	8004b34 <_free_r+0x74>
 8004b1c:	6820      	ldr	r0, [r4, #0]
 8004b1e:	4401      	add	r1, r0
 8004b20:	1858      	adds	r0, r3, r1
 8004b22:	4282      	cmp	r2, r0
 8004b24:	6019      	str	r1, [r3, #0]
 8004b26:	d1dd      	bne.n	8004ae4 <_free_r+0x24>
 8004b28:	6810      	ldr	r0, [r2, #0]
 8004b2a:	6852      	ldr	r2, [r2, #4]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	4401      	add	r1, r0
 8004b30:	6019      	str	r1, [r3, #0]
 8004b32:	e7d7      	b.n	8004ae4 <_free_r+0x24>
 8004b34:	d902      	bls.n	8004b3c <_free_r+0x7c>
 8004b36:	230c      	movs	r3, #12
 8004b38:	602b      	str	r3, [r5, #0]
 8004b3a:	e7d3      	b.n	8004ae4 <_free_r+0x24>
 8004b3c:	6820      	ldr	r0, [r4, #0]
 8004b3e:	1821      	adds	r1, r4, r0
 8004b40:	428a      	cmp	r2, r1
 8004b42:	bf04      	itt	eq
 8004b44:	6811      	ldreq	r1, [r2, #0]
 8004b46:	6852      	ldreq	r2, [r2, #4]
 8004b48:	6062      	str	r2, [r4, #4]
 8004b4a:	bf04      	itt	eq
 8004b4c:	1809      	addeq	r1, r1, r0
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	605c      	str	r4, [r3, #4]
 8004b52:	e7c7      	b.n	8004ae4 <_free_r+0x24>
 8004b54:	bd38      	pop	{r3, r4, r5, pc}
 8004b56:	bf00      	nop
 8004b58:	20000684 	.word	0x20000684

08004b5c <_malloc_r>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	1ccd      	adds	r5, r1, #3
 8004b60:	f025 0503 	bic.w	r5, r5, #3
 8004b64:	3508      	adds	r5, #8
 8004b66:	2d0c      	cmp	r5, #12
 8004b68:	bf38      	it	cc
 8004b6a:	250c      	movcc	r5, #12
 8004b6c:	2d00      	cmp	r5, #0
 8004b6e:	4606      	mov	r6, r0
 8004b70:	db01      	blt.n	8004b76 <_malloc_r+0x1a>
 8004b72:	42a9      	cmp	r1, r5
 8004b74:	d903      	bls.n	8004b7e <_malloc_r+0x22>
 8004b76:	230c      	movs	r3, #12
 8004b78:	6033      	str	r3, [r6, #0]
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
 8004b7e:	f002 fefb 	bl	8007978 <__malloc_lock>
 8004b82:	4a21      	ldr	r2, [pc, #132]	; (8004c08 <_malloc_r+0xac>)
 8004b84:	6814      	ldr	r4, [r2, #0]
 8004b86:	4621      	mov	r1, r4
 8004b88:	b991      	cbnz	r1, 8004bb0 <_malloc_r+0x54>
 8004b8a:	4c20      	ldr	r4, [pc, #128]	; (8004c0c <_malloc_r+0xb0>)
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	b91b      	cbnz	r3, 8004b98 <_malloc_r+0x3c>
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 fe7b 	bl	800588c <_sbrk_r>
 8004b96:	6020      	str	r0, [r4, #0]
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f000 fe76 	bl	800588c <_sbrk_r>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d124      	bne.n	8004bee <_malloc_r+0x92>
 8004ba4:	230c      	movs	r3, #12
 8004ba6:	6033      	str	r3, [r6, #0]
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f002 fee6 	bl	800797a <__malloc_unlock>
 8004bae:	e7e4      	b.n	8004b7a <_malloc_r+0x1e>
 8004bb0:	680b      	ldr	r3, [r1, #0]
 8004bb2:	1b5b      	subs	r3, r3, r5
 8004bb4:	d418      	bmi.n	8004be8 <_malloc_r+0x8c>
 8004bb6:	2b0b      	cmp	r3, #11
 8004bb8:	d90f      	bls.n	8004bda <_malloc_r+0x7e>
 8004bba:	600b      	str	r3, [r1, #0]
 8004bbc:	50cd      	str	r5, [r1, r3]
 8004bbe:	18cc      	adds	r4, r1, r3
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	f002 feda 	bl	800797a <__malloc_unlock>
 8004bc6:	f104 000b 	add.w	r0, r4, #11
 8004bca:	1d23      	adds	r3, r4, #4
 8004bcc:	f020 0007 	bic.w	r0, r0, #7
 8004bd0:	1ac3      	subs	r3, r0, r3
 8004bd2:	d0d3      	beq.n	8004b7c <_malloc_r+0x20>
 8004bd4:	425a      	negs	r2, r3
 8004bd6:	50e2      	str	r2, [r4, r3]
 8004bd8:	e7d0      	b.n	8004b7c <_malloc_r+0x20>
 8004bda:	428c      	cmp	r4, r1
 8004bdc:	684b      	ldr	r3, [r1, #4]
 8004bde:	bf16      	itet	ne
 8004be0:	6063      	strne	r3, [r4, #4]
 8004be2:	6013      	streq	r3, [r2, #0]
 8004be4:	460c      	movne	r4, r1
 8004be6:	e7eb      	b.n	8004bc0 <_malloc_r+0x64>
 8004be8:	460c      	mov	r4, r1
 8004bea:	6849      	ldr	r1, [r1, #4]
 8004bec:	e7cc      	b.n	8004b88 <_malloc_r+0x2c>
 8004bee:	1cc4      	adds	r4, r0, #3
 8004bf0:	f024 0403 	bic.w	r4, r4, #3
 8004bf4:	42a0      	cmp	r0, r4
 8004bf6:	d005      	beq.n	8004c04 <_malloc_r+0xa8>
 8004bf8:	1a21      	subs	r1, r4, r0
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f000 fe46 	bl	800588c <_sbrk_r>
 8004c00:	3001      	adds	r0, #1
 8004c02:	d0cf      	beq.n	8004ba4 <_malloc_r+0x48>
 8004c04:	6025      	str	r5, [r4, #0]
 8004c06:	e7db      	b.n	8004bc0 <_malloc_r+0x64>
 8004c08:	20000684 	.word	0x20000684
 8004c0c:	20000688 	.word	0x20000688

08004c10 <__cvt>:
 8004c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c14:	ec55 4b10 	vmov	r4, r5, d0
 8004c18:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004c1a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	460e      	mov	r6, r1
 8004c22:	4691      	mov	r9, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	bfb8      	it	lt
 8004c28:	4622      	movlt	r2, r4
 8004c2a:	462b      	mov	r3, r5
 8004c2c:	f027 0720 	bic.w	r7, r7, #32
 8004c30:	bfbb      	ittet	lt
 8004c32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c36:	461d      	movlt	r5, r3
 8004c38:	2300      	movge	r3, #0
 8004c3a:	232d      	movlt	r3, #45	; 0x2d
 8004c3c:	bfb8      	it	lt
 8004c3e:	4614      	movlt	r4, r2
 8004c40:	2f46      	cmp	r7, #70	; 0x46
 8004c42:	700b      	strb	r3, [r1, #0]
 8004c44:	d004      	beq.n	8004c50 <__cvt+0x40>
 8004c46:	2f45      	cmp	r7, #69	; 0x45
 8004c48:	d100      	bne.n	8004c4c <__cvt+0x3c>
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	2102      	movs	r1, #2
 8004c4e:	e000      	b.n	8004c52 <__cvt+0x42>
 8004c50:	2103      	movs	r1, #3
 8004c52:	ab03      	add	r3, sp, #12
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	ab02      	add	r3, sp, #8
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	4632      	mov	r2, r6
 8004c5c:	4653      	mov	r3, sl
 8004c5e:	ec45 4b10 	vmov	d0, r4, r5
 8004c62:	f001 fd85 	bl	8006770 <_dtoa_r>
 8004c66:	2f47      	cmp	r7, #71	; 0x47
 8004c68:	4680      	mov	r8, r0
 8004c6a:	d102      	bne.n	8004c72 <__cvt+0x62>
 8004c6c:	f019 0f01 	tst.w	r9, #1
 8004c70:	d026      	beq.n	8004cc0 <__cvt+0xb0>
 8004c72:	2f46      	cmp	r7, #70	; 0x46
 8004c74:	eb08 0906 	add.w	r9, r8, r6
 8004c78:	d111      	bne.n	8004c9e <__cvt+0x8e>
 8004c7a:	f898 3000 	ldrb.w	r3, [r8]
 8004c7e:	2b30      	cmp	r3, #48	; 0x30
 8004c80:	d10a      	bne.n	8004c98 <__cvt+0x88>
 8004c82:	2200      	movs	r2, #0
 8004c84:	2300      	movs	r3, #0
 8004c86:	4620      	mov	r0, r4
 8004c88:	4629      	mov	r1, r5
 8004c8a:	f7fb ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c8e:	b918      	cbnz	r0, 8004c98 <__cvt+0x88>
 8004c90:	f1c6 0601 	rsb	r6, r6, #1
 8004c94:	f8ca 6000 	str.w	r6, [sl]
 8004c98:	f8da 3000 	ldr.w	r3, [sl]
 8004c9c:	4499      	add	r9, r3
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	f7fb ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8004caa:	b938      	cbnz	r0, 8004cbc <__cvt+0xac>
 8004cac:	2230      	movs	r2, #48	; 0x30
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	454b      	cmp	r3, r9
 8004cb2:	d205      	bcs.n	8004cc0 <__cvt+0xb0>
 8004cb4:	1c59      	adds	r1, r3, #1
 8004cb6:	9103      	str	r1, [sp, #12]
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e7f8      	b.n	8004cae <__cvt+0x9e>
 8004cbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004cc0:	9b03      	ldr	r3, [sp, #12]
 8004cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cc4:	eba3 0308 	sub.w	r3, r3, r8
 8004cc8:	4640      	mov	r0, r8
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	b004      	add	sp, #16
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004cd2 <__exponent>:
 8004cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	bfba      	itte	lt
 8004cda:	4249      	neglt	r1, r1
 8004cdc:	232d      	movlt	r3, #45	; 0x2d
 8004cde:	232b      	movge	r3, #43	; 0x2b
 8004ce0:	2909      	cmp	r1, #9
 8004ce2:	f804 2b02 	strb.w	r2, [r4], #2
 8004ce6:	7043      	strb	r3, [r0, #1]
 8004ce8:	dd20      	ble.n	8004d2c <__exponent+0x5a>
 8004cea:	f10d 0307 	add.w	r3, sp, #7
 8004cee:	461f      	mov	r7, r3
 8004cf0:	260a      	movs	r6, #10
 8004cf2:	fb91 f5f6 	sdiv	r5, r1, r6
 8004cf6:	fb06 1115 	mls	r1, r6, r5, r1
 8004cfa:	3130      	adds	r1, #48	; 0x30
 8004cfc:	2d09      	cmp	r5, #9
 8004cfe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d02:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004d06:	4629      	mov	r1, r5
 8004d08:	dc09      	bgt.n	8004d1e <__exponent+0x4c>
 8004d0a:	3130      	adds	r1, #48	; 0x30
 8004d0c:	3b02      	subs	r3, #2
 8004d0e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d12:	42bb      	cmp	r3, r7
 8004d14:	4622      	mov	r2, r4
 8004d16:	d304      	bcc.n	8004d22 <__exponent+0x50>
 8004d18:	1a10      	subs	r0, r2, r0
 8004d1a:	b003      	add	sp, #12
 8004d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d1e:	4613      	mov	r3, r2
 8004d20:	e7e7      	b.n	8004cf2 <__exponent+0x20>
 8004d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d26:	f804 2b01 	strb.w	r2, [r4], #1
 8004d2a:	e7f2      	b.n	8004d12 <__exponent+0x40>
 8004d2c:	2330      	movs	r3, #48	; 0x30
 8004d2e:	4419      	add	r1, r3
 8004d30:	7083      	strb	r3, [r0, #2]
 8004d32:	1d02      	adds	r2, r0, #4
 8004d34:	70c1      	strb	r1, [r0, #3]
 8004d36:	e7ef      	b.n	8004d18 <__exponent+0x46>

08004d38 <_printf_float>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	b08d      	sub	sp, #52	; 0x34
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004d44:	4616      	mov	r6, r2
 8004d46:	461f      	mov	r7, r3
 8004d48:	4605      	mov	r5, r0
 8004d4a:	f002 fdf5 	bl	8007938 <_localeconv_r>
 8004d4e:	6803      	ldr	r3, [r0, #0]
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb fa44 	bl	80001e0 <strlen>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d60:	9005      	str	r0, [sp, #20]
 8004d62:	3307      	adds	r3, #7
 8004d64:	f023 0307 	bic.w	r3, r3, #7
 8004d68:	f103 0208 	add.w	r2, r3, #8
 8004d6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d70:	f8d4 b000 	ldr.w	fp, [r4]
 8004d74:	f8c8 2000 	str.w	r2, [r8]
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d80:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d88:	9307      	str	r3, [sp, #28]
 8004d8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d92:	4ba7      	ldr	r3, [pc, #668]	; (8005030 <_printf_float+0x2f8>)
 8004d94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d98:	f7fb fed0 	bl	8000b3c <__aeabi_dcmpun>
 8004d9c:	bb70      	cbnz	r0, 8004dfc <_printf_float+0xc4>
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da2:	4ba3      	ldr	r3, [pc, #652]	; (8005030 <_printf_float+0x2f8>)
 8004da4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004da8:	f7fb feaa 	bl	8000b00 <__aeabi_dcmple>
 8004dac:	bb30      	cbnz	r0, 8004dfc <_printf_float+0xc4>
 8004dae:	2200      	movs	r2, #0
 8004db0:	2300      	movs	r3, #0
 8004db2:	4640      	mov	r0, r8
 8004db4:	4649      	mov	r1, r9
 8004db6:	f7fb fe99 	bl	8000aec <__aeabi_dcmplt>
 8004dba:	b110      	cbz	r0, 8004dc2 <_printf_float+0x8a>
 8004dbc:	232d      	movs	r3, #45	; 0x2d
 8004dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc2:	4a9c      	ldr	r2, [pc, #624]	; (8005034 <_printf_float+0x2fc>)
 8004dc4:	4b9c      	ldr	r3, [pc, #624]	; (8005038 <_printf_float+0x300>)
 8004dc6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004dca:	bf8c      	ite	hi
 8004dcc:	4690      	movhi	r8, r2
 8004dce:	4698      	movls	r8, r3
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	f02b 0204 	bic.w	r2, fp, #4
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	6022      	str	r2, [r4, #0]
 8004dda:	f04f 0900 	mov.w	r9, #0
 8004dde:	9700      	str	r7, [sp, #0]
 8004de0:	4633      	mov	r3, r6
 8004de2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004de4:	4621      	mov	r1, r4
 8004de6:	4628      	mov	r0, r5
 8004de8:	f000 f9e6 	bl	80051b8 <_printf_common>
 8004dec:	3001      	adds	r0, #1
 8004dee:	f040 808d 	bne.w	8004f0c <_printf_float+0x1d4>
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004df6:	b00d      	add	sp, #52	; 0x34
 8004df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	4640      	mov	r0, r8
 8004e02:	4649      	mov	r1, r9
 8004e04:	f7fb fe9a 	bl	8000b3c <__aeabi_dcmpun>
 8004e08:	b110      	cbz	r0, 8004e10 <_printf_float+0xd8>
 8004e0a:	4a8c      	ldr	r2, [pc, #560]	; (800503c <_printf_float+0x304>)
 8004e0c:	4b8c      	ldr	r3, [pc, #560]	; (8005040 <_printf_float+0x308>)
 8004e0e:	e7da      	b.n	8004dc6 <_printf_float+0x8e>
 8004e10:	6861      	ldr	r1, [r4, #4]
 8004e12:	1c4b      	adds	r3, r1, #1
 8004e14:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004e18:	a80a      	add	r0, sp, #40	; 0x28
 8004e1a:	d13e      	bne.n	8004e9a <_printf_float+0x162>
 8004e1c:	2306      	movs	r3, #6
 8004e1e:	6063      	str	r3, [r4, #4]
 8004e20:	2300      	movs	r3, #0
 8004e22:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004e26:	ab09      	add	r3, sp, #36	; 0x24
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	ec49 8b10 	vmov	d0, r8, r9
 8004e2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e32:	6022      	str	r2, [r4, #0]
 8004e34:	f8cd a004 	str.w	sl, [sp, #4]
 8004e38:	6861      	ldr	r1, [r4, #4]
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7ff fee8 	bl	8004c10 <__cvt>
 8004e40:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004e44:	2b47      	cmp	r3, #71	; 0x47
 8004e46:	4680      	mov	r8, r0
 8004e48:	d109      	bne.n	8004e5e <_printf_float+0x126>
 8004e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4c:	1cd8      	adds	r0, r3, #3
 8004e4e:	db02      	blt.n	8004e56 <_printf_float+0x11e>
 8004e50:	6862      	ldr	r2, [r4, #4]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	dd47      	ble.n	8004ee6 <_printf_float+0x1ae>
 8004e56:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e5a:	fa5f fa8a 	uxtb.w	sl, sl
 8004e5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e64:	d824      	bhi.n	8004eb0 <_printf_float+0x178>
 8004e66:	3901      	subs	r1, #1
 8004e68:	4652      	mov	r2, sl
 8004e6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e6e:	9109      	str	r1, [sp, #36]	; 0x24
 8004e70:	f7ff ff2f 	bl	8004cd2 <__exponent>
 8004e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e76:	1813      	adds	r3, r2, r0
 8004e78:	2a01      	cmp	r2, #1
 8004e7a:	4681      	mov	r9, r0
 8004e7c:	6123      	str	r3, [r4, #16]
 8004e7e:	dc02      	bgt.n	8004e86 <_printf_float+0x14e>
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	07d1      	lsls	r1, r2, #31
 8004e84:	d501      	bpl.n	8004e8a <_printf_float+0x152>
 8004e86:	3301      	adds	r3, #1
 8004e88:	6123      	str	r3, [r4, #16]
 8004e8a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0a5      	beq.n	8004dde <_printf_float+0xa6>
 8004e92:	232d      	movs	r3, #45	; 0x2d
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e98:	e7a1      	b.n	8004dde <_printf_float+0xa6>
 8004e9a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004e9e:	f000 8177 	beq.w	8005190 <_printf_float+0x458>
 8004ea2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004ea6:	d1bb      	bne.n	8004e20 <_printf_float+0xe8>
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d1b9      	bne.n	8004e20 <_printf_float+0xe8>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e7b6      	b.n	8004e1e <_printf_float+0xe6>
 8004eb0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004eb4:	d119      	bne.n	8004eea <_printf_float+0x1b2>
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	6863      	ldr	r3, [r4, #4]
 8004eba:	dd0c      	ble.n	8004ed6 <_printf_float+0x19e>
 8004ebc:	6121      	str	r1, [r4, #16]
 8004ebe:	b913      	cbnz	r3, 8004ec6 <_printf_float+0x18e>
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	07d2      	lsls	r2, r2, #31
 8004ec4:	d502      	bpl.n	8004ecc <_printf_float+0x194>
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	440b      	add	r3, r1
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ece:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ed0:	f04f 0900 	mov.w	r9, #0
 8004ed4:	e7d9      	b.n	8004e8a <_printf_float+0x152>
 8004ed6:	b913      	cbnz	r3, 8004ede <_printf_float+0x1a6>
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	07d0      	lsls	r0, r2, #31
 8004edc:	d501      	bpl.n	8004ee2 <_printf_float+0x1aa>
 8004ede:	3302      	adds	r3, #2
 8004ee0:	e7f3      	b.n	8004eca <_printf_float+0x192>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e7f1      	b.n	8004eca <_printf_float+0x192>
 8004ee6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004eea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	db05      	blt.n	8004efe <_printf_float+0x1c6>
 8004ef2:	6822      	ldr	r2, [r4, #0]
 8004ef4:	6123      	str	r3, [r4, #16]
 8004ef6:	07d1      	lsls	r1, r2, #31
 8004ef8:	d5e8      	bpl.n	8004ecc <_printf_float+0x194>
 8004efa:	3301      	adds	r3, #1
 8004efc:	e7e5      	b.n	8004eca <_printf_float+0x192>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	bfd4      	ite	le
 8004f02:	f1c3 0302 	rsble	r3, r3, #2
 8004f06:	2301      	movgt	r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	e7de      	b.n	8004eca <_printf_float+0x192>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	055a      	lsls	r2, r3, #21
 8004f10:	d407      	bmi.n	8004f22 <_printf_float+0x1ea>
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	4642      	mov	r2, r8
 8004f16:	4631      	mov	r1, r6
 8004f18:	4628      	mov	r0, r5
 8004f1a:	47b8      	blx	r7
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d12b      	bne.n	8004f78 <_printf_float+0x240>
 8004f20:	e767      	b.n	8004df2 <_printf_float+0xba>
 8004f22:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004f26:	f240 80dc 	bls.w	80050e2 <_printf_float+0x3aa>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f32:	f7fb fdd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d033      	beq.n	8004fa2 <_printf_float+0x26a>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4a41      	ldr	r2, [pc, #260]	; (8005044 <_printf_float+0x30c>)
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f af54 	beq.w	8004df2 <_printf_float+0xba>
 8004f4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	db02      	blt.n	8004f58 <_printf_float+0x220>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	07d8      	lsls	r0, r3, #31
 8004f56:	d50f      	bpl.n	8004f78 <_printf_float+0x240>
 8004f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	4628      	mov	r0, r5
 8004f60:	47b8      	blx	r7
 8004f62:	3001      	adds	r0, #1
 8004f64:	f43f af45 	beq.w	8004df2 <_printf_float+0xba>
 8004f68:	f04f 0800 	mov.w	r8, #0
 8004f6c:	f104 091a 	add.w	r9, r4, #26
 8004f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f72:	3b01      	subs	r3, #1
 8004f74:	4543      	cmp	r3, r8
 8004f76:	dc09      	bgt.n	8004f8c <_printf_float+0x254>
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	079b      	lsls	r3, r3, #30
 8004f7c:	f100 8103 	bmi.w	8005186 <_printf_float+0x44e>
 8004f80:	68e0      	ldr	r0, [r4, #12]
 8004f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f84:	4298      	cmp	r0, r3
 8004f86:	bfb8      	it	lt
 8004f88:	4618      	movlt	r0, r3
 8004f8a:	e734      	b.n	8004df6 <_printf_float+0xbe>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	464a      	mov	r2, r9
 8004f90:	4631      	mov	r1, r6
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b8      	blx	r7
 8004f96:	3001      	adds	r0, #1
 8004f98:	f43f af2b 	beq.w	8004df2 <_printf_float+0xba>
 8004f9c:	f108 0801 	add.w	r8, r8, #1
 8004fa0:	e7e6      	b.n	8004f70 <_printf_float+0x238>
 8004fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dc2b      	bgt.n	8005000 <_printf_float+0x2c8>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4a26      	ldr	r2, [pc, #152]	; (8005044 <_printf_float+0x30c>)
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af1d 	beq.w	8004df2 <_printf_float+0xba>
 8004fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fba:	b923      	cbnz	r3, 8004fc6 <_printf_float+0x28e>
 8004fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fbe:	b913      	cbnz	r3, 8004fc6 <_printf_float+0x28e>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	07d9      	lsls	r1, r3, #31
 8004fc4:	d5d8      	bpl.n	8004f78 <_printf_float+0x240>
 8004fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4628      	mov	r0, r5
 8004fce:	47b8      	blx	r7
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	f43f af0e 	beq.w	8004df2 <_printf_float+0xba>
 8004fd6:	f04f 0900 	mov.w	r9, #0
 8004fda:	f104 0a1a 	add.w	sl, r4, #26
 8004fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe0:	425b      	negs	r3, r3
 8004fe2:	454b      	cmp	r3, r9
 8004fe4:	dc01      	bgt.n	8004fea <_printf_float+0x2b2>
 8004fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe8:	e794      	b.n	8004f14 <_printf_float+0x1dc>
 8004fea:	2301      	movs	r3, #1
 8004fec:	4652      	mov	r2, sl
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f aefc 	beq.w	8004df2 <_printf_float+0xba>
 8004ffa:	f109 0901 	add.w	r9, r9, #1
 8004ffe:	e7ee      	b.n	8004fde <_printf_float+0x2a6>
 8005000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005002:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005004:	429a      	cmp	r2, r3
 8005006:	bfa8      	it	ge
 8005008:	461a      	movge	r2, r3
 800500a:	2a00      	cmp	r2, #0
 800500c:	4691      	mov	r9, r2
 800500e:	dd07      	ble.n	8005020 <_printf_float+0x2e8>
 8005010:	4613      	mov	r3, r2
 8005012:	4631      	mov	r1, r6
 8005014:	4642      	mov	r2, r8
 8005016:	4628      	mov	r0, r5
 8005018:	47b8      	blx	r7
 800501a:	3001      	adds	r0, #1
 800501c:	f43f aee9 	beq.w	8004df2 <_printf_float+0xba>
 8005020:	f104 031a 	add.w	r3, r4, #26
 8005024:	f04f 0b00 	mov.w	fp, #0
 8005028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800502c:	9306      	str	r3, [sp, #24]
 800502e:	e015      	b.n	800505c <_printf_float+0x324>
 8005030:	7fefffff 	.word	0x7fefffff
 8005034:	08008524 	.word	0x08008524
 8005038:	08008520 	.word	0x08008520
 800503c:	0800852c 	.word	0x0800852c
 8005040:	08008528 	.word	0x08008528
 8005044:	08008530 	.word	0x08008530
 8005048:	2301      	movs	r3, #1
 800504a:	9a06      	ldr	r2, [sp, #24]
 800504c:	4631      	mov	r1, r6
 800504e:	4628      	mov	r0, r5
 8005050:	47b8      	blx	r7
 8005052:	3001      	adds	r0, #1
 8005054:	f43f aecd 	beq.w	8004df2 <_printf_float+0xba>
 8005058:	f10b 0b01 	add.w	fp, fp, #1
 800505c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005060:	ebaa 0309 	sub.w	r3, sl, r9
 8005064:	455b      	cmp	r3, fp
 8005066:	dcef      	bgt.n	8005048 <_printf_float+0x310>
 8005068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800506c:	429a      	cmp	r2, r3
 800506e:	44d0      	add	r8, sl
 8005070:	db15      	blt.n	800509e <_printf_float+0x366>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	07da      	lsls	r2, r3, #31
 8005076:	d412      	bmi.n	800509e <_printf_float+0x366>
 8005078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800507a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800507c:	eba3 020a 	sub.w	r2, r3, sl
 8005080:	eba3 0a01 	sub.w	sl, r3, r1
 8005084:	4592      	cmp	sl, r2
 8005086:	bfa8      	it	ge
 8005088:	4692      	movge	sl, r2
 800508a:	f1ba 0f00 	cmp.w	sl, #0
 800508e:	dc0e      	bgt.n	80050ae <_printf_float+0x376>
 8005090:	f04f 0800 	mov.w	r8, #0
 8005094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005098:	f104 091a 	add.w	r9, r4, #26
 800509c:	e019      	b.n	80050d2 <_printf_float+0x39a>
 800509e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	d1e5      	bne.n	8005078 <_printf_float+0x340>
 80050ac:	e6a1      	b.n	8004df2 <_printf_float+0xba>
 80050ae:	4653      	mov	r3, sl
 80050b0:	4642      	mov	r2, r8
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	d1e9      	bne.n	8005090 <_printf_float+0x358>
 80050bc:	e699      	b.n	8004df2 <_printf_float+0xba>
 80050be:	2301      	movs	r3, #1
 80050c0:	464a      	mov	r2, r9
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	f43f ae92 	beq.w	8004df2 <_printf_float+0xba>
 80050ce:	f108 0801 	add.w	r8, r8, #1
 80050d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	eba3 030a 	sub.w	r3, r3, sl
 80050dc:	4543      	cmp	r3, r8
 80050de:	dcee      	bgt.n	80050be <_printf_float+0x386>
 80050e0:	e74a      	b.n	8004f78 <_printf_float+0x240>
 80050e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050e4:	2a01      	cmp	r2, #1
 80050e6:	dc01      	bgt.n	80050ec <_printf_float+0x3b4>
 80050e8:	07db      	lsls	r3, r3, #31
 80050ea:	d53a      	bpl.n	8005162 <_printf_float+0x42a>
 80050ec:	2301      	movs	r3, #1
 80050ee:	4642      	mov	r2, r8
 80050f0:	4631      	mov	r1, r6
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	f43f ae7b 	beq.w	8004df2 <_printf_float+0xba>
 80050fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f108 0801 	add.w	r8, r8, #1
 800510c:	f43f ae71 	beq.w	8004df2 <_printf_float+0xba>
 8005110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005112:	2200      	movs	r2, #0
 8005114:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005118:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800511c:	2300      	movs	r3, #0
 800511e:	f7fb fcdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005122:	b9c8      	cbnz	r0, 8005158 <_printf_float+0x420>
 8005124:	4653      	mov	r3, sl
 8005126:	4642      	mov	r2, r8
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	d10e      	bne.n	8005150 <_printf_float+0x418>
 8005132:	e65e      	b.n	8004df2 <_printf_float+0xba>
 8005134:	2301      	movs	r3, #1
 8005136:	4652      	mov	r2, sl
 8005138:	4631      	mov	r1, r6
 800513a:	4628      	mov	r0, r5
 800513c:	47b8      	blx	r7
 800513e:	3001      	adds	r0, #1
 8005140:	f43f ae57 	beq.w	8004df2 <_printf_float+0xba>
 8005144:	f108 0801 	add.w	r8, r8, #1
 8005148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800514a:	3b01      	subs	r3, #1
 800514c:	4543      	cmp	r3, r8
 800514e:	dcf1      	bgt.n	8005134 <_printf_float+0x3fc>
 8005150:	464b      	mov	r3, r9
 8005152:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005156:	e6de      	b.n	8004f16 <_printf_float+0x1de>
 8005158:	f04f 0800 	mov.w	r8, #0
 800515c:	f104 0a1a 	add.w	sl, r4, #26
 8005160:	e7f2      	b.n	8005148 <_printf_float+0x410>
 8005162:	2301      	movs	r3, #1
 8005164:	e7df      	b.n	8005126 <_printf_float+0x3ee>
 8005166:	2301      	movs	r3, #1
 8005168:	464a      	mov	r2, r9
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	47b8      	blx	r7
 8005170:	3001      	adds	r0, #1
 8005172:	f43f ae3e 	beq.w	8004df2 <_printf_float+0xba>
 8005176:	f108 0801 	add.w	r8, r8, #1
 800517a:	68e3      	ldr	r3, [r4, #12]
 800517c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	4543      	cmp	r3, r8
 8005182:	dcf0      	bgt.n	8005166 <_printf_float+0x42e>
 8005184:	e6fc      	b.n	8004f80 <_printf_float+0x248>
 8005186:	f04f 0800 	mov.w	r8, #0
 800518a:	f104 0919 	add.w	r9, r4, #25
 800518e:	e7f4      	b.n	800517a <_printf_float+0x442>
 8005190:	2900      	cmp	r1, #0
 8005192:	f43f ae8b 	beq.w	8004eac <_printf_float+0x174>
 8005196:	2300      	movs	r3, #0
 8005198:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800519c:	ab09      	add	r3, sp, #36	; 0x24
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	ec49 8b10 	vmov	d0, r8, r9
 80051a4:	6022      	str	r2, [r4, #0]
 80051a6:	f8cd a004 	str.w	sl, [sp, #4]
 80051aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051ae:	4628      	mov	r0, r5
 80051b0:	f7ff fd2e 	bl	8004c10 <__cvt>
 80051b4:	4680      	mov	r8, r0
 80051b6:	e648      	b.n	8004e4a <_printf_float+0x112>

080051b8 <_printf_common>:
 80051b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	4691      	mov	r9, r2
 80051be:	461f      	mov	r7, r3
 80051c0:	688a      	ldr	r2, [r1, #8]
 80051c2:	690b      	ldr	r3, [r1, #16]
 80051c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bfb8      	it	lt
 80051cc:	4613      	movlt	r3, r2
 80051ce:	f8c9 3000 	str.w	r3, [r9]
 80051d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d6:	4606      	mov	r6, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	b112      	cbz	r2, 80051e2 <_printf_common+0x2a>
 80051dc:	3301      	adds	r3, #1
 80051de:	f8c9 3000 	str.w	r3, [r9]
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	0699      	lsls	r1, r3, #26
 80051e6:	bf42      	ittt	mi
 80051e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051ec:	3302      	addmi	r3, #2
 80051ee:	f8c9 3000 	strmi.w	r3, [r9]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	f015 0506 	ands.w	r5, r5, #6
 80051f8:	d107      	bne.n	800520a <_printf_common+0x52>
 80051fa:	f104 0a19 	add.w	sl, r4, #25
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	f8d9 2000 	ldr.w	r2, [r9]
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	42ab      	cmp	r3, r5
 8005208:	dc28      	bgt.n	800525c <_printf_common+0xa4>
 800520a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	3300      	adds	r3, #0
 8005212:	bf18      	it	ne
 8005214:	2301      	movne	r3, #1
 8005216:	0692      	lsls	r2, r2, #26
 8005218:	d42d      	bmi.n	8005276 <_printf_common+0xbe>
 800521a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521e:	4639      	mov	r1, r7
 8005220:	4630      	mov	r0, r6
 8005222:	47c0      	blx	r8
 8005224:	3001      	adds	r0, #1
 8005226:	d020      	beq.n	800526a <_printf_common+0xb2>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	68e5      	ldr	r5, [r4, #12]
 800522c:	f8d9 2000 	ldr.w	r2, [r9]
 8005230:	f003 0306 	and.w	r3, r3, #6
 8005234:	2b04      	cmp	r3, #4
 8005236:	bf08      	it	eq
 8005238:	1aad      	subeq	r5, r5, r2
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	6922      	ldr	r2, [r4, #16]
 800523e:	bf0c      	ite	eq
 8005240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005244:	2500      	movne	r5, #0
 8005246:	4293      	cmp	r3, r2
 8005248:	bfc4      	itt	gt
 800524a:	1a9b      	subgt	r3, r3, r2
 800524c:	18ed      	addgt	r5, r5, r3
 800524e:	f04f 0900 	mov.w	r9, #0
 8005252:	341a      	adds	r4, #26
 8005254:	454d      	cmp	r5, r9
 8005256:	d11a      	bne.n	800528e <_printf_common+0xd6>
 8005258:	2000      	movs	r0, #0
 800525a:	e008      	b.n	800526e <_printf_common+0xb6>
 800525c:	2301      	movs	r3, #1
 800525e:	4652      	mov	r2, sl
 8005260:	4639      	mov	r1, r7
 8005262:	4630      	mov	r0, r6
 8005264:	47c0      	blx	r8
 8005266:	3001      	adds	r0, #1
 8005268:	d103      	bne.n	8005272 <_printf_common+0xba>
 800526a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005272:	3501      	adds	r5, #1
 8005274:	e7c3      	b.n	80051fe <_printf_common+0x46>
 8005276:	18e1      	adds	r1, r4, r3
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	2030      	movs	r0, #48	; 0x30
 800527c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005280:	4422      	add	r2, r4
 8005282:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005286:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800528a:	3302      	adds	r3, #2
 800528c:	e7c5      	b.n	800521a <_printf_common+0x62>
 800528e:	2301      	movs	r3, #1
 8005290:	4622      	mov	r2, r4
 8005292:	4639      	mov	r1, r7
 8005294:	4630      	mov	r0, r6
 8005296:	47c0      	blx	r8
 8005298:	3001      	adds	r0, #1
 800529a:	d0e6      	beq.n	800526a <_printf_common+0xb2>
 800529c:	f109 0901 	add.w	r9, r9, #1
 80052a0:	e7d8      	b.n	8005254 <_printf_common+0x9c>
	...

080052a4 <_printf_i>:
 80052a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052ac:	460c      	mov	r4, r1
 80052ae:	7e09      	ldrb	r1, [r1, #24]
 80052b0:	b085      	sub	sp, #20
 80052b2:	296e      	cmp	r1, #110	; 0x6e
 80052b4:	4617      	mov	r7, r2
 80052b6:	4606      	mov	r6, r0
 80052b8:	4698      	mov	r8, r3
 80052ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052bc:	f000 80b3 	beq.w	8005426 <_printf_i+0x182>
 80052c0:	d822      	bhi.n	8005308 <_printf_i+0x64>
 80052c2:	2963      	cmp	r1, #99	; 0x63
 80052c4:	d036      	beq.n	8005334 <_printf_i+0x90>
 80052c6:	d80a      	bhi.n	80052de <_printf_i+0x3a>
 80052c8:	2900      	cmp	r1, #0
 80052ca:	f000 80b9 	beq.w	8005440 <_printf_i+0x19c>
 80052ce:	2958      	cmp	r1, #88	; 0x58
 80052d0:	f000 8083 	beq.w	80053da <_printf_i+0x136>
 80052d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80052dc:	e032      	b.n	8005344 <_printf_i+0xa0>
 80052de:	2964      	cmp	r1, #100	; 0x64
 80052e0:	d001      	beq.n	80052e6 <_printf_i+0x42>
 80052e2:	2969      	cmp	r1, #105	; 0x69
 80052e4:	d1f6      	bne.n	80052d4 <_printf_i+0x30>
 80052e6:	6820      	ldr	r0, [r4, #0]
 80052e8:	6813      	ldr	r3, [r2, #0]
 80052ea:	0605      	lsls	r5, r0, #24
 80052ec:	f103 0104 	add.w	r1, r3, #4
 80052f0:	d52a      	bpl.n	8005348 <_printf_i+0xa4>
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6011      	str	r1, [r2, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	da03      	bge.n	8005302 <_printf_i+0x5e>
 80052fa:	222d      	movs	r2, #45	; 0x2d
 80052fc:	425b      	negs	r3, r3
 80052fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005302:	486f      	ldr	r0, [pc, #444]	; (80054c0 <_printf_i+0x21c>)
 8005304:	220a      	movs	r2, #10
 8005306:	e039      	b.n	800537c <_printf_i+0xd8>
 8005308:	2973      	cmp	r1, #115	; 0x73
 800530a:	f000 809d 	beq.w	8005448 <_printf_i+0x1a4>
 800530e:	d808      	bhi.n	8005322 <_printf_i+0x7e>
 8005310:	296f      	cmp	r1, #111	; 0x6f
 8005312:	d020      	beq.n	8005356 <_printf_i+0xb2>
 8005314:	2970      	cmp	r1, #112	; 0x70
 8005316:	d1dd      	bne.n	80052d4 <_printf_i+0x30>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	f043 0320 	orr.w	r3, r3, #32
 800531e:	6023      	str	r3, [r4, #0]
 8005320:	e003      	b.n	800532a <_printf_i+0x86>
 8005322:	2975      	cmp	r1, #117	; 0x75
 8005324:	d017      	beq.n	8005356 <_printf_i+0xb2>
 8005326:	2978      	cmp	r1, #120	; 0x78
 8005328:	d1d4      	bne.n	80052d4 <_printf_i+0x30>
 800532a:	2378      	movs	r3, #120	; 0x78
 800532c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005330:	4864      	ldr	r0, [pc, #400]	; (80054c4 <_printf_i+0x220>)
 8005332:	e055      	b.n	80053e0 <_printf_i+0x13c>
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	1d19      	adds	r1, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6011      	str	r1, [r2, #0]
 800533c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005344:	2301      	movs	r3, #1
 8005346:	e08c      	b.n	8005462 <_printf_i+0x1be>
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6011      	str	r1, [r2, #0]
 800534c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005350:	bf18      	it	ne
 8005352:	b21b      	sxthne	r3, r3
 8005354:	e7cf      	b.n	80052f6 <_printf_i+0x52>
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	6825      	ldr	r5, [r4, #0]
 800535a:	1d18      	adds	r0, r3, #4
 800535c:	6010      	str	r0, [r2, #0]
 800535e:	0628      	lsls	r0, r5, #24
 8005360:	d501      	bpl.n	8005366 <_printf_i+0xc2>
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	e002      	b.n	800536c <_printf_i+0xc8>
 8005366:	0668      	lsls	r0, r5, #25
 8005368:	d5fb      	bpl.n	8005362 <_printf_i+0xbe>
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	4854      	ldr	r0, [pc, #336]	; (80054c0 <_printf_i+0x21c>)
 800536e:	296f      	cmp	r1, #111	; 0x6f
 8005370:	bf14      	ite	ne
 8005372:	220a      	movne	r2, #10
 8005374:	2208      	moveq	r2, #8
 8005376:	2100      	movs	r1, #0
 8005378:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800537c:	6865      	ldr	r5, [r4, #4]
 800537e:	60a5      	str	r5, [r4, #8]
 8005380:	2d00      	cmp	r5, #0
 8005382:	f2c0 8095 	blt.w	80054b0 <_printf_i+0x20c>
 8005386:	6821      	ldr	r1, [r4, #0]
 8005388:	f021 0104 	bic.w	r1, r1, #4
 800538c:	6021      	str	r1, [r4, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d13d      	bne.n	800540e <_printf_i+0x16a>
 8005392:	2d00      	cmp	r5, #0
 8005394:	f040 808e 	bne.w	80054b4 <_printf_i+0x210>
 8005398:	4665      	mov	r5, ip
 800539a:	2a08      	cmp	r2, #8
 800539c:	d10b      	bne.n	80053b6 <_printf_i+0x112>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	07db      	lsls	r3, r3, #31
 80053a2:	d508      	bpl.n	80053b6 <_printf_i+0x112>
 80053a4:	6923      	ldr	r3, [r4, #16]
 80053a6:	6862      	ldr	r2, [r4, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	bfde      	ittt	le
 80053ac:	2330      	movle	r3, #48	; 0x30
 80053ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053b6:	ebac 0305 	sub.w	r3, ip, r5
 80053ba:	6123      	str	r3, [r4, #16]
 80053bc:	f8cd 8000 	str.w	r8, [sp]
 80053c0:	463b      	mov	r3, r7
 80053c2:	aa03      	add	r2, sp, #12
 80053c4:	4621      	mov	r1, r4
 80053c6:	4630      	mov	r0, r6
 80053c8:	f7ff fef6 	bl	80051b8 <_printf_common>
 80053cc:	3001      	adds	r0, #1
 80053ce:	d14d      	bne.n	800546c <_printf_i+0x1c8>
 80053d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053d4:	b005      	add	sp, #20
 80053d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053da:	4839      	ldr	r0, [pc, #228]	; (80054c0 <_printf_i+0x21c>)
 80053dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80053e0:	6813      	ldr	r3, [r2, #0]
 80053e2:	6821      	ldr	r1, [r4, #0]
 80053e4:	1d1d      	adds	r5, r3, #4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6015      	str	r5, [r2, #0]
 80053ea:	060a      	lsls	r2, r1, #24
 80053ec:	d50b      	bpl.n	8005406 <_printf_i+0x162>
 80053ee:	07ca      	lsls	r2, r1, #31
 80053f0:	bf44      	itt	mi
 80053f2:	f041 0120 	orrmi.w	r1, r1, #32
 80053f6:	6021      	strmi	r1, [r4, #0]
 80053f8:	b91b      	cbnz	r3, 8005402 <_printf_i+0x15e>
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	f022 0220 	bic.w	r2, r2, #32
 8005400:	6022      	str	r2, [r4, #0]
 8005402:	2210      	movs	r2, #16
 8005404:	e7b7      	b.n	8005376 <_printf_i+0xd2>
 8005406:	064d      	lsls	r5, r1, #25
 8005408:	bf48      	it	mi
 800540a:	b29b      	uxthmi	r3, r3
 800540c:	e7ef      	b.n	80053ee <_printf_i+0x14a>
 800540e:	4665      	mov	r5, ip
 8005410:	fbb3 f1f2 	udiv	r1, r3, r2
 8005414:	fb02 3311 	mls	r3, r2, r1, r3
 8005418:	5cc3      	ldrb	r3, [r0, r3]
 800541a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800541e:	460b      	mov	r3, r1
 8005420:	2900      	cmp	r1, #0
 8005422:	d1f5      	bne.n	8005410 <_printf_i+0x16c>
 8005424:	e7b9      	b.n	800539a <_printf_i+0xf6>
 8005426:	6813      	ldr	r3, [r2, #0]
 8005428:	6825      	ldr	r5, [r4, #0]
 800542a:	6961      	ldr	r1, [r4, #20]
 800542c:	1d18      	adds	r0, r3, #4
 800542e:	6010      	str	r0, [r2, #0]
 8005430:	0628      	lsls	r0, r5, #24
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	d501      	bpl.n	800543a <_printf_i+0x196>
 8005436:	6019      	str	r1, [r3, #0]
 8005438:	e002      	b.n	8005440 <_printf_i+0x19c>
 800543a:	066a      	lsls	r2, r5, #25
 800543c:	d5fb      	bpl.n	8005436 <_printf_i+0x192>
 800543e:	8019      	strh	r1, [r3, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	4665      	mov	r5, ip
 8005446:	e7b9      	b.n	80053bc <_printf_i+0x118>
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	1d19      	adds	r1, r3, #4
 800544c:	6011      	str	r1, [r2, #0]
 800544e:	681d      	ldr	r5, [r3, #0]
 8005450:	6862      	ldr	r2, [r4, #4]
 8005452:	2100      	movs	r1, #0
 8005454:	4628      	mov	r0, r5
 8005456:	f7fa fecb 	bl	80001f0 <memchr>
 800545a:	b108      	cbz	r0, 8005460 <_printf_i+0x1bc>
 800545c:	1b40      	subs	r0, r0, r5
 800545e:	6060      	str	r0, [r4, #4]
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	2300      	movs	r3, #0
 8005466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800546a:	e7a7      	b.n	80053bc <_printf_i+0x118>
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	462a      	mov	r2, r5
 8005470:	4639      	mov	r1, r7
 8005472:	4630      	mov	r0, r6
 8005474:	47c0      	blx	r8
 8005476:	3001      	adds	r0, #1
 8005478:	d0aa      	beq.n	80053d0 <_printf_i+0x12c>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	079b      	lsls	r3, r3, #30
 800547e:	d413      	bmi.n	80054a8 <_printf_i+0x204>
 8005480:	68e0      	ldr	r0, [r4, #12]
 8005482:	9b03      	ldr	r3, [sp, #12]
 8005484:	4298      	cmp	r0, r3
 8005486:	bfb8      	it	lt
 8005488:	4618      	movlt	r0, r3
 800548a:	e7a3      	b.n	80053d4 <_printf_i+0x130>
 800548c:	2301      	movs	r3, #1
 800548e:	464a      	mov	r2, r9
 8005490:	4639      	mov	r1, r7
 8005492:	4630      	mov	r0, r6
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d09a      	beq.n	80053d0 <_printf_i+0x12c>
 800549a:	3501      	adds	r5, #1
 800549c:	68e3      	ldr	r3, [r4, #12]
 800549e:	9a03      	ldr	r2, [sp, #12]
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	42ab      	cmp	r3, r5
 80054a4:	dcf2      	bgt.n	800548c <_printf_i+0x1e8>
 80054a6:	e7eb      	b.n	8005480 <_printf_i+0x1dc>
 80054a8:	2500      	movs	r5, #0
 80054aa:	f104 0919 	add.w	r9, r4, #25
 80054ae:	e7f5      	b.n	800549c <_printf_i+0x1f8>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ac      	bne.n	800540e <_printf_i+0x16a>
 80054b4:	7803      	ldrb	r3, [r0, #0]
 80054b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054be:	e76c      	b.n	800539a <_printf_i+0xf6>
 80054c0:	08008532 	.word	0x08008532
 80054c4:	08008543 	.word	0x08008543

080054c8 <_scanf_float>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	469a      	mov	sl, r3
 80054ce:	688b      	ldr	r3, [r1, #8]
 80054d0:	4616      	mov	r6, r2
 80054d2:	1e5a      	subs	r2, r3, #1
 80054d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80054d8:	b087      	sub	sp, #28
 80054da:	bf83      	ittte	hi
 80054dc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80054e0:	189b      	addhi	r3, r3, r2
 80054e2:	9301      	strhi	r3, [sp, #4]
 80054e4:	2300      	movls	r3, #0
 80054e6:	bf86      	itte	hi
 80054e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80054ec:	608b      	strhi	r3, [r1, #8]
 80054ee:	9301      	strls	r3, [sp, #4]
 80054f0:	680b      	ldr	r3, [r1, #0]
 80054f2:	4688      	mov	r8, r1
 80054f4:	f04f 0b00 	mov.w	fp, #0
 80054f8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80054fc:	f848 3b1c 	str.w	r3, [r8], #28
 8005500:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005504:	4607      	mov	r7, r0
 8005506:	460c      	mov	r4, r1
 8005508:	4645      	mov	r5, r8
 800550a:	465a      	mov	r2, fp
 800550c:	46d9      	mov	r9, fp
 800550e:	f8cd b008 	str.w	fp, [sp, #8]
 8005512:	68a1      	ldr	r1, [r4, #8]
 8005514:	b181      	cbz	r1, 8005538 <_scanf_float+0x70>
 8005516:	6833      	ldr	r3, [r6, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b49      	cmp	r3, #73	; 0x49
 800551c:	d071      	beq.n	8005602 <_scanf_float+0x13a>
 800551e:	d84d      	bhi.n	80055bc <_scanf_float+0xf4>
 8005520:	2b39      	cmp	r3, #57	; 0x39
 8005522:	d840      	bhi.n	80055a6 <_scanf_float+0xde>
 8005524:	2b31      	cmp	r3, #49	; 0x31
 8005526:	f080 8088 	bcs.w	800563a <_scanf_float+0x172>
 800552a:	2b2d      	cmp	r3, #45	; 0x2d
 800552c:	f000 8090 	beq.w	8005650 <_scanf_float+0x188>
 8005530:	d815      	bhi.n	800555e <_scanf_float+0x96>
 8005532:	2b2b      	cmp	r3, #43	; 0x2b
 8005534:	f000 808c 	beq.w	8005650 <_scanf_float+0x188>
 8005538:	f1b9 0f00 	cmp.w	r9, #0
 800553c:	d003      	beq.n	8005546 <_scanf_float+0x7e>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	3a01      	subs	r2, #1
 8005548:	2a01      	cmp	r2, #1
 800554a:	f200 80ea 	bhi.w	8005722 <_scanf_float+0x25a>
 800554e:	4545      	cmp	r5, r8
 8005550:	f200 80dc 	bhi.w	800570c <_scanf_float+0x244>
 8005554:	2601      	movs	r6, #1
 8005556:	4630      	mov	r0, r6
 8005558:	b007      	add	sp, #28
 800555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	2b2e      	cmp	r3, #46	; 0x2e
 8005560:	f000 809f 	beq.w	80056a2 <_scanf_float+0x1da>
 8005564:	2b30      	cmp	r3, #48	; 0x30
 8005566:	d1e7      	bne.n	8005538 <_scanf_float+0x70>
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800556e:	d064      	beq.n	800563a <_scanf_float+0x172>
 8005570:	9b01      	ldr	r3, [sp, #4]
 8005572:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005576:	6020      	str	r0, [r4, #0]
 8005578:	f109 0901 	add.w	r9, r9, #1
 800557c:	b11b      	cbz	r3, 8005586 <_scanf_float+0xbe>
 800557e:	3b01      	subs	r3, #1
 8005580:	3101      	adds	r1, #1
 8005582:	9301      	str	r3, [sp, #4]
 8005584:	60a1      	str	r1, [r4, #8]
 8005586:	68a3      	ldr	r3, [r4, #8]
 8005588:	3b01      	subs	r3, #1
 800558a:	60a3      	str	r3, [r4, #8]
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	3301      	adds	r3, #1
 8005590:	6123      	str	r3, [r4, #16]
 8005592:	6873      	ldr	r3, [r6, #4]
 8005594:	3b01      	subs	r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	6073      	str	r3, [r6, #4]
 800559a:	f340 80ac 	ble.w	80056f6 <_scanf_float+0x22e>
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	6033      	str	r3, [r6, #0]
 80055a4:	e7b5      	b.n	8005512 <_scanf_float+0x4a>
 80055a6:	2b45      	cmp	r3, #69	; 0x45
 80055a8:	f000 8085 	beq.w	80056b6 <_scanf_float+0x1ee>
 80055ac:	2b46      	cmp	r3, #70	; 0x46
 80055ae:	d06a      	beq.n	8005686 <_scanf_float+0x1be>
 80055b0:	2b41      	cmp	r3, #65	; 0x41
 80055b2:	d1c1      	bne.n	8005538 <_scanf_float+0x70>
 80055b4:	2a01      	cmp	r2, #1
 80055b6:	d1bf      	bne.n	8005538 <_scanf_float+0x70>
 80055b8:	2202      	movs	r2, #2
 80055ba:	e046      	b.n	800564a <_scanf_float+0x182>
 80055bc:	2b65      	cmp	r3, #101	; 0x65
 80055be:	d07a      	beq.n	80056b6 <_scanf_float+0x1ee>
 80055c0:	d818      	bhi.n	80055f4 <_scanf_float+0x12c>
 80055c2:	2b54      	cmp	r3, #84	; 0x54
 80055c4:	d066      	beq.n	8005694 <_scanf_float+0x1cc>
 80055c6:	d811      	bhi.n	80055ec <_scanf_float+0x124>
 80055c8:	2b4e      	cmp	r3, #78	; 0x4e
 80055ca:	d1b5      	bne.n	8005538 <_scanf_float+0x70>
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	d146      	bne.n	800565e <_scanf_float+0x196>
 80055d0:	f1b9 0f00 	cmp.w	r9, #0
 80055d4:	d145      	bne.n	8005662 <_scanf_float+0x19a>
 80055d6:	6821      	ldr	r1, [r4, #0]
 80055d8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80055dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80055e0:	d13f      	bne.n	8005662 <_scanf_float+0x19a>
 80055e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80055e6:	6021      	str	r1, [r4, #0]
 80055e8:	2201      	movs	r2, #1
 80055ea:	e02e      	b.n	800564a <_scanf_float+0x182>
 80055ec:	2b59      	cmp	r3, #89	; 0x59
 80055ee:	d01e      	beq.n	800562e <_scanf_float+0x166>
 80055f0:	2b61      	cmp	r3, #97	; 0x61
 80055f2:	e7de      	b.n	80055b2 <_scanf_float+0xea>
 80055f4:	2b6e      	cmp	r3, #110	; 0x6e
 80055f6:	d0e9      	beq.n	80055cc <_scanf_float+0x104>
 80055f8:	d815      	bhi.n	8005626 <_scanf_float+0x15e>
 80055fa:	2b66      	cmp	r3, #102	; 0x66
 80055fc:	d043      	beq.n	8005686 <_scanf_float+0x1be>
 80055fe:	2b69      	cmp	r3, #105	; 0x69
 8005600:	d19a      	bne.n	8005538 <_scanf_float+0x70>
 8005602:	f1bb 0f00 	cmp.w	fp, #0
 8005606:	d138      	bne.n	800567a <_scanf_float+0x1b2>
 8005608:	f1b9 0f00 	cmp.w	r9, #0
 800560c:	d197      	bne.n	800553e <_scanf_float+0x76>
 800560e:	6821      	ldr	r1, [r4, #0]
 8005610:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005614:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005618:	d195      	bne.n	8005546 <_scanf_float+0x7e>
 800561a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800561e:	6021      	str	r1, [r4, #0]
 8005620:	f04f 0b01 	mov.w	fp, #1
 8005624:	e011      	b.n	800564a <_scanf_float+0x182>
 8005626:	2b74      	cmp	r3, #116	; 0x74
 8005628:	d034      	beq.n	8005694 <_scanf_float+0x1cc>
 800562a:	2b79      	cmp	r3, #121	; 0x79
 800562c:	d184      	bne.n	8005538 <_scanf_float+0x70>
 800562e:	f1bb 0f07 	cmp.w	fp, #7
 8005632:	d181      	bne.n	8005538 <_scanf_float+0x70>
 8005634:	f04f 0b08 	mov.w	fp, #8
 8005638:	e007      	b.n	800564a <_scanf_float+0x182>
 800563a:	eb12 0f0b 	cmn.w	r2, fp
 800563e:	f47f af7b 	bne.w	8005538 <_scanf_float+0x70>
 8005642:	6821      	ldr	r1, [r4, #0]
 8005644:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005648:	6021      	str	r1, [r4, #0]
 800564a:	702b      	strb	r3, [r5, #0]
 800564c:	3501      	adds	r5, #1
 800564e:	e79a      	b.n	8005586 <_scanf_float+0xbe>
 8005650:	6821      	ldr	r1, [r4, #0]
 8005652:	0608      	lsls	r0, r1, #24
 8005654:	f57f af70 	bpl.w	8005538 <_scanf_float+0x70>
 8005658:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800565c:	e7f4      	b.n	8005648 <_scanf_float+0x180>
 800565e:	2a02      	cmp	r2, #2
 8005660:	d047      	beq.n	80056f2 <_scanf_float+0x22a>
 8005662:	f1bb 0f01 	cmp.w	fp, #1
 8005666:	d003      	beq.n	8005670 <_scanf_float+0x1a8>
 8005668:	f1bb 0f04 	cmp.w	fp, #4
 800566c:	f47f af64 	bne.w	8005538 <_scanf_float+0x70>
 8005670:	f10b 0b01 	add.w	fp, fp, #1
 8005674:	fa5f fb8b 	uxtb.w	fp, fp
 8005678:	e7e7      	b.n	800564a <_scanf_float+0x182>
 800567a:	f1bb 0f03 	cmp.w	fp, #3
 800567e:	d0f7      	beq.n	8005670 <_scanf_float+0x1a8>
 8005680:	f1bb 0f05 	cmp.w	fp, #5
 8005684:	e7f2      	b.n	800566c <_scanf_float+0x1a4>
 8005686:	f1bb 0f02 	cmp.w	fp, #2
 800568a:	f47f af55 	bne.w	8005538 <_scanf_float+0x70>
 800568e:	f04f 0b03 	mov.w	fp, #3
 8005692:	e7da      	b.n	800564a <_scanf_float+0x182>
 8005694:	f1bb 0f06 	cmp.w	fp, #6
 8005698:	f47f af4e 	bne.w	8005538 <_scanf_float+0x70>
 800569c:	f04f 0b07 	mov.w	fp, #7
 80056a0:	e7d3      	b.n	800564a <_scanf_float+0x182>
 80056a2:	6821      	ldr	r1, [r4, #0]
 80056a4:	0588      	lsls	r0, r1, #22
 80056a6:	f57f af47 	bpl.w	8005538 <_scanf_float+0x70>
 80056aa:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80056ae:	6021      	str	r1, [r4, #0]
 80056b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80056b4:	e7c9      	b.n	800564a <_scanf_float+0x182>
 80056b6:	6821      	ldr	r1, [r4, #0]
 80056b8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80056bc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80056c0:	d006      	beq.n	80056d0 <_scanf_float+0x208>
 80056c2:	0548      	lsls	r0, r1, #21
 80056c4:	f57f af38 	bpl.w	8005538 <_scanf_float+0x70>
 80056c8:	f1b9 0f00 	cmp.w	r9, #0
 80056cc:	f43f af3b 	beq.w	8005546 <_scanf_float+0x7e>
 80056d0:	0588      	lsls	r0, r1, #22
 80056d2:	bf58      	it	pl
 80056d4:	9802      	ldrpl	r0, [sp, #8]
 80056d6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80056da:	bf58      	it	pl
 80056dc:	eba9 0000 	subpl.w	r0, r9, r0
 80056e0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80056e4:	bf58      	it	pl
 80056e6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80056ea:	6021      	str	r1, [r4, #0]
 80056ec:	f04f 0900 	mov.w	r9, #0
 80056f0:	e7ab      	b.n	800564a <_scanf_float+0x182>
 80056f2:	2203      	movs	r2, #3
 80056f4:	e7a9      	b.n	800564a <_scanf_float+0x182>
 80056f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80056fa:	9205      	str	r2, [sp, #20]
 80056fc:	4631      	mov	r1, r6
 80056fe:	4638      	mov	r0, r7
 8005700:	4798      	blx	r3
 8005702:	9a05      	ldr	r2, [sp, #20]
 8005704:	2800      	cmp	r0, #0
 8005706:	f43f af04 	beq.w	8005512 <_scanf_float+0x4a>
 800570a:	e715      	b.n	8005538 <_scanf_float+0x70>
 800570c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005710:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005714:	4632      	mov	r2, r6
 8005716:	4638      	mov	r0, r7
 8005718:	4798      	blx	r3
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	3b01      	subs	r3, #1
 800571e:	6123      	str	r3, [r4, #16]
 8005720:	e715      	b.n	800554e <_scanf_float+0x86>
 8005722:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8005726:	2b06      	cmp	r3, #6
 8005728:	d80a      	bhi.n	8005740 <_scanf_float+0x278>
 800572a:	f1bb 0f02 	cmp.w	fp, #2
 800572e:	d968      	bls.n	8005802 <_scanf_float+0x33a>
 8005730:	f1ab 0b03 	sub.w	fp, fp, #3
 8005734:	fa5f fb8b 	uxtb.w	fp, fp
 8005738:	eba5 0b0b 	sub.w	fp, r5, fp
 800573c:	455d      	cmp	r5, fp
 800573e:	d14b      	bne.n	80057d8 <_scanf_float+0x310>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	05da      	lsls	r2, r3, #23
 8005744:	d51f      	bpl.n	8005786 <_scanf_float+0x2be>
 8005746:	055b      	lsls	r3, r3, #21
 8005748:	d468      	bmi.n	800581c <_scanf_float+0x354>
 800574a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	2965      	cmp	r1, #101	; 0x65
 8005752:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005756:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800575a:	6123      	str	r3, [r4, #16]
 800575c:	d00d      	beq.n	800577a <_scanf_float+0x2b2>
 800575e:	2945      	cmp	r1, #69	; 0x45
 8005760:	d00b      	beq.n	800577a <_scanf_float+0x2b2>
 8005762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005766:	4632      	mov	r2, r6
 8005768:	4638      	mov	r0, r7
 800576a:	4798      	blx	r3
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005772:	3b01      	subs	r3, #1
 8005774:	f1a5 0b02 	sub.w	fp, r5, #2
 8005778:	6123      	str	r3, [r4, #16]
 800577a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800577e:	4632      	mov	r2, r6
 8005780:	4638      	mov	r0, r7
 8005782:	4798      	blx	r3
 8005784:	465d      	mov	r5, fp
 8005786:	6826      	ldr	r6, [r4, #0]
 8005788:	f016 0610 	ands.w	r6, r6, #16
 800578c:	d17a      	bne.n	8005884 <_scanf_float+0x3bc>
 800578e:	702e      	strb	r6, [r5, #0]
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579a:	d142      	bne.n	8005822 <_scanf_float+0x35a>
 800579c:	9b02      	ldr	r3, [sp, #8]
 800579e:	eba9 0303 	sub.w	r3, r9, r3
 80057a2:	425a      	negs	r2, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d149      	bne.n	800583c <_scanf_float+0x374>
 80057a8:	2200      	movs	r2, #0
 80057aa:	4641      	mov	r1, r8
 80057ac:	4638      	mov	r0, r7
 80057ae:	f000 feb3 	bl	8006518 <_strtod_r>
 80057b2:	6825      	ldr	r5, [r4, #0]
 80057b4:	f8da 3000 	ldr.w	r3, [sl]
 80057b8:	f015 0f02 	tst.w	r5, #2
 80057bc:	f103 0204 	add.w	r2, r3, #4
 80057c0:	ec59 8b10 	vmov	r8, r9, d0
 80057c4:	f8ca 2000 	str.w	r2, [sl]
 80057c8:	d043      	beq.n	8005852 <_scanf_float+0x38a>
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	e9c3 8900 	strd	r8, r9, [r3]
 80057d0:	68e3      	ldr	r3, [r4, #12]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60e3      	str	r3, [r4, #12]
 80057d6:	e6be      	b.n	8005556 <_scanf_float+0x8e>
 80057d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80057e0:	4632      	mov	r2, r6
 80057e2:	4638      	mov	r0, r7
 80057e4:	4798      	blx	r3
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	e7a6      	b.n	800573c <_scanf_float+0x274>
 80057ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057f2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80057f6:	4632      	mov	r2, r6
 80057f8:	4638      	mov	r0, r7
 80057fa:	4798      	blx	r3
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	3b01      	subs	r3, #1
 8005800:	6123      	str	r3, [r4, #16]
 8005802:	4545      	cmp	r5, r8
 8005804:	d8f3      	bhi.n	80057ee <_scanf_float+0x326>
 8005806:	e6a5      	b.n	8005554 <_scanf_float+0x8c>
 8005808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800580c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005810:	4632      	mov	r2, r6
 8005812:	4638      	mov	r0, r7
 8005814:	4798      	blx	r3
 8005816:	6923      	ldr	r3, [r4, #16]
 8005818:	3b01      	subs	r3, #1
 800581a:	6123      	str	r3, [r4, #16]
 800581c:	4545      	cmp	r5, r8
 800581e:	d8f3      	bhi.n	8005808 <_scanf_float+0x340>
 8005820:	e698      	b.n	8005554 <_scanf_float+0x8c>
 8005822:	9b03      	ldr	r3, [sp, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0bf      	beq.n	80057a8 <_scanf_float+0x2e0>
 8005828:	9904      	ldr	r1, [sp, #16]
 800582a:	230a      	movs	r3, #10
 800582c:	4632      	mov	r2, r6
 800582e:	3101      	adds	r1, #1
 8005830:	4638      	mov	r0, r7
 8005832:	f000 fefd 	bl	8006630 <_strtol_r>
 8005836:	9b03      	ldr	r3, [sp, #12]
 8005838:	9d04      	ldr	r5, [sp, #16]
 800583a:	1ac2      	subs	r2, r0, r3
 800583c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005840:	429d      	cmp	r5, r3
 8005842:	bf28      	it	cs
 8005844:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005848:	490f      	ldr	r1, [pc, #60]	; (8005888 <_scanf_float+0x3c0>)
 800584a:	4628      	mov	r0, r5
 800584c:	f000 f834 	bl	80058b8 <siprintf>
 8005850:	e7aa      	b.n	80057a8 <_scanf_float+0x2e0>
 8005852:	f015 0504 	ands.w	r5, r5, #4
 8005856:	d1b8      	bne.n	80057ca <_scanf_float+0x302>
 8005858:	681f      	ldr	r7, [r3, #0]
 800585a:	ee10 2a10 	vmov	r2, s0
 800585e:	464b      	mov	r3, r9
 8005860:	ee10 0a10 	vmov	r0, s0
 8005864:	4649      	mov	r1, r9
 8005866:	f7fb f969 	bl	8000b3c <__aeabi_dcmpun>
 800586a:	b128      	cbz	r0, 8005878 <_scanf_float+0x3b0>
 800586c:	4628      	mov	r0, r5
 800586e:	f000 f81d 	bl	80058ac <nanf>
 8005872:	ed87 0a00 	vstr	s0, [r7]
 8005876:	e7ab      	b.n	80057d0 <_scanf_float+0x308>
 8005878:	4640      	mov	r0, r8
 800587a:	4649      	mov	r1, r9
 800587c:	f7fb f9bc 	bl	8000bf8 <__aeabi_d2f>
 8005880:	6038      	str	r0, [r7, #0]
 8005882:	e7a5      	b.n	80057d0 <_scanf_float+0x308>
 8005884:	2600      	movs	r6, #0
 8005886:	e666      	b.n	8005556 <_scanf_float+0x8e>
 8005888:	08008554 	.word	0x08008554

0800588c <_sbrk_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4c06      	ldr	r4, [pc, #24]	; (80058a8 <_sbrk_r+0x1c>)
 8005890:	2300      	movs	r3, #0
 8005892:	4605      	mov	r5, r0
 8005894:	4608      	mov	r0, r1
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	f7fb fa50 	bl	8000d3c <_sbrk>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_sbrk_r+0x1a>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_sbrk_r+0x1a>
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	20000b80 	.word	0x20000b80

080058ac <nanf>:
 80058ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80058b4 <nanf+0x8>
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	7fc00000 	.word	0x7fc00000

080058b8 <siprintf>:
 80058b8:	b40e      	push	{r1, r2, r3}
 80058ba:	b500      	push	{lr}
 80058bc:	b09c      	sub	sp, #112	; 0x70
 80058be:	ab1d      	add	r3, sp, #116	; 0x74
 80058c0:	9002      	str	r0, [sp, #8]
 80058c2:	9006      	str	r0, [sp, #24]
 80058c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058c8:	4809      	ldr	r0, [pc, #36]	; (80058f0 <siprintf+0x38>)
 80058ca:	9107      	str	r1, [sp, #28]
 80058cc:	9104      	str	r1, [sp, #16]
 80058ce:	4909      	ldr	r1, [pc, #36]	; (80058f4 <siprintf+0x3c>)
 80058d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058d4:	9105      	str	r1, [sp, #20]
 80058d6:	6800      	ldr	r0, [r0, #0]
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	a902      	add	r1, sp, #8
 80058dc:	f002 fcb6 	bl	800824c <_svfiprintf_r>
 80058e0:	9b02      	ldr	r3, [sp, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	b01c      	add	sp, #112	; 0x70
 80058e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058ec:	b003      	add	sp, #12
 80058ee:	4770      	bx	lr
 80058f0:	20000008 	.word	0x20000008
 80058f4:	ffff0208 	.word	0xffff0208

080058f8 <sulp>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4604      	mov	r4, r0
 80058fc:	460d      	mov	r5, r1
 80058fe:	ec45 4b10 	vmov	d0, r4, r5
 8005902:	4616      	mov	r6, r2
 8005904:	f002 fb06 	bl	8007f14 <__ulp>
 8005908:	ec51 0b10 	vmov	r0, r1, d0
 800590c:	b17e      	cbz	r6, 800592e <sulp+0x36>
 800590e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005912:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005916:	2b00      	cmp	r3, #0
 8005918:	dd09      	ble.n	800592e <sulp+0x36>
 800591a:	051b      	lsls	r3, r3, #20
 800591c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005920:	2400      	movs	r4, #0
 8005922:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	f7fa fe6d 	bl	8000608 <__aeabi_dmul>
 800592e:	bd70      	pop	{r4, r5, r6, pc}

08005930 <_strtod_l>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	461f      	mov	r7, r3
 8005936:	b0a1      	sub	sp, #132	; 0x84
 8005938:	2300      	movs	r3, #0
 800593a:	4681      	mov	r9, r0
 800593c:	4638      	mov	r0, r7
 800593e:	460e      	mov	r6, r1
 8005940:	9217      	str	r2, [sp, #92]	; 0x5c
 8005942:	931c      	str	r3, [sp, #112]	; 0x70
 8005944:	f001 fff5 	bl	8007932 <__localeconv_l>
 8005948:	4680      	mov	r8, r0
 800594a:	6800      	ldr	r0, [r0, #0]
 800594c:	f7fa fc48 	bl	80001e0 <strlen>
 8005950:	f04f 0a00 	mov.w	sl, #0
 8005954:	4604      	mov	r4, r0
 8005956:	f04f 0b00 	mov.w	fp, #0
 800595a:	961b      	str	r6, [sp, #108]	; 0x6c
 800595c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800595e:	781a      	ldrb	r2, [r3, #0]
 8005960:	2a0d      	cmp	r2, #13
 8005962:	d832      	bhi.n	80059ca <_strtod_l+0x9a>
 8005964:	2a09      	cmp	r2, #9
 8005966:	d236      	bcs.n	80059d6 <_strtod_l+0xa6>
 8005968:	2a00      	cmp	r2, #0
 800596a:	d03e      	beq.n	80059ea <_strtod_l+0xba>
 800596c:	2300      	movs	r3, #0
 800596e:	930d      	str	r3, [sp, #52]	; 0x34
 8005970:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005972:	782b      	ldrb	r3, [r5, #0]
 8005974:	2b30      	cmp	r3, #48	; 0x30
 8005976:	f040 80ac 	bne.w	8005ad2 <_strtod_l+0x1a2>
 800597a:	786b      	ldrb	r3, [r5, #1]
 800597c:	2b58      	cmp	r3, #88	; 0x58
 800597e:	d001      	beq.n	8005984 <_strtod_l+0x54>
 8005980:	2b78      	cmp	r3, #120	; 0x78
 8005982:	d167      	bne.n	8005a54 <_strtod_l+0x124>
 8005984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	ab1c      	add	r3, sp, #112	; 0x70
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	9702      	str	r7, [sp, #8]
 800598e:	ab1d      	add	r3, sp, #116	; 0x74
 8005990:	4a88      	ldr	r2, [pc, #544]	; (8005bb4 <_strtod_l+0x284>)
 8005992:	a91b      	add	r1, sp, #108	; 0x6c
 8005994:	4648      	mov	r0, r9
 8005996:	f001 fcf2 	bl	800737e <__gethex>
 800599a:	f010 0407 	ands.w	r4, r0, #7
 800599e:	4606      	mov	r6, r0
 80059a0:	d005      	beq.n	80059ae <_strtod_l+0x7e>
 80059a2:	2c06      	cmp	r4, #6
 80059a4:	d12b      	bne.n	80059fe <_strtod_l+0xce>
 80059a6:	3501      	adds	r5, #1
 80059a8:	2300      	movs	r3, #0
 80059aa:	951b      	str	r5, [sp, #108]	; 0x6c
 80059ac:	930d      	str	r3, [sp, #52]	; 0x34
 80059ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 859a 	bne.w	80064ea <_strtod_l+0xbba>
 80059b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059b8:	b1e3      	cbz	r3, 80059f4 <_strtod_l+0xc4>
 80059ba:	4652      	mov	r2, sl
 80059bc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80059c0:	ec43 2b10 	vmov	d0, r2, r3
 80059c4:	b021      	add	sp, #132	; 0x84
 80059c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ca:	2a2b      	cmp	r2, #43	; 0x2b
 80059cc:	d015      	beq.n	80059fa <_strtod_l+0xca>
 80059ce:	2a2d      	cmp	r2, #45	; 0x2d
 80059d0:	d004      	beq.n	80059dc <_strtod_l+0xac>
 80059d2:	2a20      	cmp	r2, #32
 80059d4:	d1ca      	bne.n	800596c <_strtod_l+0x3c>
 80059d6:	3301      	adds	r3, #1
 80059d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80059da:	e7bf      	b.n	800595c <_strtod_l+0x2c>
 80059dc:	2201      	movs	r2, #1
 80059de:	920d      	str	r2, [sp, #52]	; 0x34
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1c2      	bne.n	8005970 <_strtod_l+0x40>
 80059ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f040 8579 	bne.w	80064e6 <_strtod_l+0xbb6>
 80059f4:	4652      	mov	r2, sl
 80059f6:	465b      	mov	r3, fp
 80059f8:	e7e2      	b.n	80059c0 <_strtod_l+0x90>
 80059fa:	2200      	movs	r2, #0
 80059fc:	e7ef      	b.n	80059de <_strtod_l+0xae>
 80059fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005a00:	b13a      	cbz	r2, 8005a12 <_strtod_l+0xe2>
 8005a02:	2135      	movs	r1, #53	; 0x35
 8005a04:	a81e      	add	r0, sp, #120	; 0x78
 8005a06:	f002 fb7d 	bl	8008104 <__copybits>
 8005a0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a0c:	4648      	mov	r0, r9
 8005a0e:	f001 ffe9 	bl	80079e4 <_Bfree>
 8005a12:	3c01      	subs	r4, #1
 8005a14:	2c04      	cmp	r4, #4
 8005a16:	d806      	bhi.n	8005a26 <_strtod_l+0xf6>
 8005a18:	e8df f004 	tbb	[pc, r4]
 8005a1c:	1714030a 	.word	0x1714030a
 8005a20:	0a          	.byte	0x0a
 8005a21:	00          	.byte	0x00
 8005a22:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005a26:	0730      	lsls	r0, r6, #28
 8005a28:	d5c1      	bpl.n	80059ae <_strtod_l+0x7e>
 8005a2a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005a2e:	e7be      	b.n	80059ae <_strtod_l+0x7e>
 8005a30:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8005a34:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005a36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a3a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a3e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a42:	e7f0      	b.n	8005a26 <_strtod_l+0xf6>
 8005a44:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005bb8 <_strtod_l+0x288>
 8005a48:	e7ed      	b.n	8005a26 <_strtod_l+0xf6>
 8005a4a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005a4e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005a52:	e7e8      	b.n	8005a26 <_strtod_l+0xf6>
 8005a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b30      	cmp	r3, #48	; 0x30
 8005a5e:	d0f9      	beq.n	8005a54 <_strtod_l+0x124>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0a4      	beq.n	80059ae <_strtod_l+0x7e>
 8005a64:	2301      	movs	r3, #1
 8005a66:	2500      	movs	r5, #0
 8005a68:	9306      	str	r3, [sp, #24]
 8005a6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a6c:	9308      	str	r3, [sp, #32]
 8005a6e:	9507      	str	r5, [sp, #28]
 8005a70:	9505      	str	r5, [sp, #20]
 8005a72:	220a      	movs	r2, #10
 8005a74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005a76:	7807      	ldrb	r7, [r0, #0]
 8005a78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005a7c:	b2d9      	uxtb	r1, r3
 8005a7e:	2909      	cmp	r1, #9
 8005a80:	d929      	bls.n	8005ad6 <_strtod_l+0x1a6>
 8005a82:	4622      	mov	r2, r4
 8005a84:	f8d8 1000 	ldr.w	r1, [r8]
 8005a88:	f002 fcd8 	bl	800843c <strncmp>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d031      	beq.n	8005af4 <_strtod_l+0x1c4>
 8005a90:	2000      	movs	r0, #0
 8005a92:	9c05      	ldr	r4, [sp, #20]
 8005a94:	9004      	str	r0, [sp, #16]
 8005a96:	463b      	mov	r3, r7
 8005a98:	4602      	mov	r2, r0
 8005a9a:	2b65      	cmp	r3, #101	; 0x65
 8005a9c:	d001      	beq.n	8005aa2 <_strtod_l+0x172>
 8005a9e:	2b45      	cmp	r3, #69	; 0x45
 8005aa0:	d114      	bne.n	8005acc <_strtod_l+0x19c>
 8005aa2:	b924      	cbnz	r4, 8005aae <_strtod_l+0x17e>
 8005aa4:	b910      	cbnz	r0, 8005aac <_strtod_l+0x17c>
 8005aa6:	9b06      	ldr	r3, [sp, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d09e      	beq.n	80059ea <_strtod_l+0xba>
 8005aac:	2400      	movs	r4, #0
 8005aae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005ab0:	1c73      	adds	r3, r6, #1
 8005ab2:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ab4:	7873      	ldrb	r3, [r6, #1]
 8005ab6:	2b2b      	cmp	r3, #43	; 0x2b
 8005ab8:	d078      	beq.n	8005bac <_strtod_l+0x27c>
 8005aba:	2b2d      	cmp	r3, #45	; 0x2d
 8005abc:	d070      	beq.n	8005ba0 <_strtod_l+0x270>
 8005abe:	f04f 0c00 	mov.w	ip, #0
 8005ac2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005ac6:	2f09      	cmp	r7, #9
 8005ac8:	d97c      	bls.n	8005bc4 <_strtod_l+0x294>
 8005aca:	961b      	str	r6, [sp, #108]	; 0x6c
 8005acc:	f04f 0e00 	mov.w	lr, #0
 8005ad0:	e09a      	b.n	8005c08 <_strtod_l+0x2d8>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e7c7      	b.n	8005a66 <_strtod_l+0x136>
 8005ad6:	9905      	ldr	r1, [sp, #20]
 8005ad8:	2908      	cmp	r1, #8
 8005ada:	bfdd      	ittte	le
 8005adc:	9907      	ldrle	r1, [sp, #28]
 8005ade:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ae2:	9307      	strle	r3, [sp, #28]
 8005ae4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005ae8:	9b05      	ldr	r3, [sp, #20]
 8005aea:	3001      	adds	r0, #1
 8005aec:	3301      	adds	r3, #1
 8005aee:	9305      	str	r3, [sp, #20]
 8005af0:	901b      	str	r0, [sp, #108]	; 0x6c
 8005af2:	e7bf      	b.n	8005a74 <_strtod_l+0x144>
 8005af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005af6:	191a      	adds	r2, r3, r4
 8005af8:	921b      	str	r2, [sp, #108]	; 0x6c
 8005afa:	9a05      	ldr	r2, [sp, #20]
 8005afc:	5d1b      	ldrb	r3, [r3, r4]
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d037      	beq.n	8005b72 <_strtod_l+0x242>
 8005b02:	9c05      	ldr	r4, [sp, #20]
 8005b04:	4602      	mov	r2, r0
 8005b06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005b0a:	2909      	cmp	r1, #9
 8005b0c:	d913      	bls.n	8005b36 <_strtod_l+0x206>
 8005b0e:	2101      	movs	r1, #1
 8005b10:	9104      	str	r1, [sp, #16]
 8005b12:	e7c2      	b.n	8005a9a <_strtod_l+0x16a>
 8005b14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	921b      	str	r2, [sp, #108]	; 0x6c
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	2b30      	cmp	r3, #48	; 0x30
 8005b20:	d0f8      	beq.n	8005b14 <_strtod_l+0x1e4>
 8005b22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005b26:	2a08      	cmp	r2, #8
 8005b28:	f200 84e4 	bhi.w	80064f4 <_strtod_l+0xbc4>
 8005b2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005b2e:	9208      	str	r2, [sp, #32]
 8005b30:	4602      	mov	r2, r0
 8005b32:	2000      	movs	r0, #0
 8005b34:	4604      	mov	r4, r0
 8005b36:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005b3a:	f100 0101 	add.w	r1, r0, #1
 8005b3e:	d012      	beq.n	8005b66 <_strtod_l+0x236>
 8005b40:	440a      	add	r2, r1
 8005b42:	eb00 0c04 	add.w	ip, r0, r4
 8005b46:	4621      	mov	r1, r4
 8005b48:	270a      	movs	r7, #10
 8005b4a:	458c      	cmp	ip, r1
 8005b4c:	d113      	bne.n	8005b76 <_strtod_l+0x246>
 8005b4e:	1821      	adds	r1, r4, r0
 8005b50:	2908      	cmp	r1, #8
 8005b52:	f104 0401 	add.w	r4, r4, #1
 8005b56:	4404      	add	r4, r0
 8005b58:	dc19      	bgt.n	8005b8e <_strtod_l+0x25e>
 8005b5a:	9b07      	ldr	r3, [sp, #28]
 8005b5c:	210a      	movs	r1, #10
 8005b5e:	fb01 e303 	mla	r3, r1, r3, lr
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	2100      	movs	r1, #0
 8005b66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b68:	1c58      	adds	r0, r3, #1
 8005b6a:	901b      	str	r0, [sp, #108]	; 0x6c
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	4608      	mov	r0, r1
 8005b70:	e7c9      	b.n	8005b06 <_strtod_l+0x1d6>
 8005b72:	9805      	ldr	r0, [sp, #20]
 8005b74:	e7d3      	b.n	8005b1e <_strtod_l+0x1ee>
 8005b76:	2908      	cmp	r1, #8
 8005b78:	f101 0101 	add.w	r1, r1, #1
 8005b7c:	dc03      	bgt.n	8005b86 <_strtod_l+0x256>
 8005b7e:	9b07      	ldr	r3, [sp, #28]
 8005b80:	437b      	muls	r3, r7
 8005b82:	9307      	str	r3, [sp, #28]
 8005b84:	e7e1      	b.n	8005b4a <_strtod_l+0x21a>
 8005b86:	2910      	cmp	r1, #16
 8005b88:	bfd8      	it	le
 8005b8a:	437d      	mulle	r5, r7
 8005b8c:	e7dd      	b.n	8005b4a <_strtod_l+0x21a>
 8005b8e:	2c10      	cmp	r4, #16
 8005b90:	bfdc      	itt	le
 8005b92:	210a      	movle	r1, #10
 8005b94:	fb01 e505 	mlale	r5, r1, r5, lr
 8005b98:	e7e4      	b.n	8005b64 <_strtod_l+0x234>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	e781      	b.n	8005aa4 <_strtod_l+0x174>
 8005ba0:	f04f 0c01 	mov.w	ip, #1
 8005ba4:	1cb3      	adds	r3, r6, #2
 8005ba6:	931b      	str	r3, [sp, #108]	; 0x6c
 8005ba8:	78b3      	ldrb	r3, [r6, #2]
 8005baa:	e78a      	b.n	8005ac2 <_strtod_l+0x192>
 8005bac:	f04f 0c00 	mov.w	ip, #0
 8005bb0:	e7f8      	b.n	8005ba4 <_strtod_l+0x274>
 8005bb2:	bf00      	nop
 8005bb4:	0800855c 	.word	0x0800855c
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bbe:	1c5f      	adds	r7, r3, #1
 8005bc0:	971b      	str	r7, [sp, #108]	; 0x6c
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b30      	cmp	r3, #48	; 0x30
 8005bc6:	d0f9      	beq.n	8005bbc <_strtod_l+0x28c>
 8005bc8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005bcc:	2f08      	cmp	r7, #8
 8005bce:	f63f af7d 	bhi.w	8005acc <_strtod_l+0x19c>
 8005bd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005bd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8005bda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bdc:	1c5f      	adds	r7, r3, #1
 8005bde:	971b      	str	r7, [sp, #108]	; 0x6c
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005be6:	f1b8 0f09 	cmp.w	r8, #9
 8005bea:	d937      	bls.n	8005c5c <_strtod_l+0x32c>
 8005bec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bee:	1a7f      	subs	r7, r7, r1
 8005bf0:	2f08      	cmp	r7, #8
 8005bf2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005bf6:	dc37      	bgt.n	8005c68 <_strtod_l+0x338>
 8005bf8:	45be      	cmp	lr, r7
 8005bfa:	bfa8      	it	ge
 8005bfc:	46be      	movge	lr, r7
 8005bfe:	f1bc 0f00 	cmp.w	ip, #0
 8005c02:	d001      	beq.n	8005c08 <_strtod_l+0x2d8>
 8005c04:	f1ce 0e00 	rsb	lr, lr, #0
 8005c08:	2c00      	cmp	r4, #0
 8005c0a:	d151      	bne.n	8005cb0 <_strtod_l+0x380>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	f47f aece 	bne.w	80059ae <_strtod_l+0x7e>
 8005c12:	9a06      	ldr	r2, [sp, #24]
 8005c14:	2a00      	cmp	r2, #0
 8005c16:	f47f aeca 	bne.w	80059ae <_strtod_l+0x7e>
 8005c1a:	9a04      	ldr	r2, [sp, #16]
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	f47f aee4 	bne.w	80059ea <_strtod_l+0xba>
 8005c22:	2b4e      	cmp	r3, #78	; 0x4e
 8005c24:	d027      	beq.n	8005c76 <_strtod_l+0x346>
 8005c26:	dc21      	bgt.n	8005c6c <_strtod_l+0x33c>
 8005c28:	2b49      	cmp	r3, #73	; 0x49
 8005c2a:	f47f aede 	bne.w	80059ea <_strtod_l+0xba>
 8005c2e:	49a0      	ldr	r1, [pc, #640]	; (8005eb0 <_strtod_l+0x580>)
 8005c30:	a81b      	add	r0, sp, #108	; 0x6c
 8005c32:	f001 fdd7 	bl	80077e4 <__match>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	f43f aed7 	beq.w	80059ea <_strtod_l+0xba>
 8005c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c3e:	499d      	ldr	r1, [pc, #628]	; (8005eb4 <_strtod_l+0x584>)
 8005c40:	3b01      	subs	r3, #1
 8005c42:	a81b      	add	r0, sp, #108	; 0x6c
 8005c44:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c46:	f001 fdcd 	bl	80077e4 <__match>
 8005c4a:	b910      	cbnz	r0, 8005c52 <_strtod_l+0x322>
 8005c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c4e:	3301      	adds	r3, #1
 8005c50:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c52:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005ec8 <_strtod_l+0x598>
 8005c56:	f04f 0a00 	mov.w	sl, #0
 8005c5a:	e6a8      	b.n	80059ae <_strtod_l+0x7e>
 8005c5c:	210a      	movs	r1, #10
 8005c5e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005c62:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005c66:	e7b8      	b.n	8005bda <_strtod_l+0x2aa>
 8005c68:	46be      	mov	lr, r7
 8005c6a:	e7c8      	b.n	8005bfe <_strtod_l+0x2ce>
 8005c6c:	2b69      	cmp	r3, #105	; 0x69
 8005c6e:	d0de      	beq.n	8005c2e <_strtod_l+0x2fe>
 8005c70:	2b6e      	cmp	r3, #110	; 0x6e
 8005c72:	f47f aeba 	bne.w	80059ea <_strtod_l+0xba>
 8005c76:	4990      	ldr	r1, [pc, #576]	; (8005eb8 <_strtod_l+0x588>)
 8005c78:	a81b      	add	r0, sp, #108	; 0x6c
 8005c7a:	f001 fdb3 	bl	80077e4 <__match>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	f43f aeb3 	beq.w	80059ea <_strtod_l+0xba>
 8005c84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b28      	cmp	r3, #40	; 0x28
 8005c8a:	d10e      	bne.n	8005caa <_strtod_l+0x37a>
 8005c8c:	aa1e      	add	r2, sp, #120	; 0x78
 8005c8e:	498b      	ldr	r1, [pc, #556]	; (8005ebc <_strtod_l+0x58c>)
 8005c90:	a81b      	add	r0, sp, #108	; 0x6c
 8005c92:	f001 fdbb 	bl	800780c <__hexnan>
 8005c96:	2805      	cmp	r0, #5
 8005c98:	d107      	bne.n	8005caa <_strtod_l+0x37a>
 8005c9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c9c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005ca0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005ca4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005ca8:	e681      	b.n	80059ae <_strtod_l+0x7e>
 8005caa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005ed0 <_strtod_l+0x5a0>
 8005cae:	e7d2      	b.n	8005c56 <_strtod_l+0x326>
 8005cb0:	ebae 0302 	sub.w	r3, lr, r2
 8005cb4:	9306      	str	r3, [sp, #24]
 8005cb6:	9b05      	ldr	r3, [sp, #20]
 8005cb8:	9807      	ldr	r0, [sp, #28]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bf08      	it	eq
 8005cbe:	4623      	moveq	r3, r4
 8005cc0:	2c10      	cmp	r4, #16
 8005cc2:	9305      	str	r3, [sp, #20]
 8005cc4:	46a0      	mov	r8, r4
 8005cc6:	bfa8      	it	ge
 8005cc8:	f04f 0810 	movge.w	r8, #16
 8005ccc:	f7fa fc22 	bl	8000514 <__aeabi_ui2d>
 8005cd0:	2c09      	cmp	r4, #9
 8005cd2:	4682      	mov	sl, r0
 8005cd4:	468b      	mov	fp, r1
 8005cd6:	dc13      	bgt.n	8005d00 <_strtod_l+0x3d0>
 8005cd8:	9b06      	ldr	r3, [sp, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f43f ae67 	beq.w	80059ae <_strtod_l+0x7e>
 8005ce0:	9b06      	ldr	r3, [sp, #24]
 8005ce2:	dd7a      	ble.n	8005dda <_strtod_l+0x4aa>
 8005ce4:	2b16      	cmp	r3, #22
 8005ce6:	dc61      	bgt.n	8005dac <_strtod_l+0x47c>
 8005ce8:	4a75      	ldr	r2, [pc, #468]	; (8005ec0 <_strtod_l+0x590>)
 8005cea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005cee:	e9de 0100 	ldrd	r0, r1, [lr]
 8005cf2:	4652      	mov	r2, sl
 8005cf4:	465b      	mov	r3, fp
 8005cf6:	f7fa fc87 	bl	8000608 <__aeabi_dmul>
 8005cfa:	4682      	mov	sl, r0
 8005cfc:	468b      	mov	fp, r1
 8005cfe:	e656      	b.n	80059ae <_strtod_l+0x7e>
 8005d00:	4b6f      	ldr	r3, [pc, #444]	; (8005ec0 <_strtod_l+0x590>)
 8005d02:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d0a:	f7fa fc7d 	bl	8000608 <__aeabi_dmul>
 8005d0e:	4606      	mov	r6, r0
 8005d10:	4628      	mov	r0, r5
 8005d12:	460f      	mov	r7, r1
 8005d14:	f7fa fbfe 	bl	8000514 <__aeabi_ui2d>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	4639      	mov	r1, r7
 8005d20:	f7fa fabc 	bl	800029c <__adddf3>
 8005d24:	2c0f      	cmp	r4, #15
 8005d26:	4682      	mov	sl, r0
 8005d28:	468b      	mov	fp, r1
 8005d2a:	ddd5      	ble.n	8005cd8 <_strtod_l+0x3a8>
 8005d2c:	9b06      	ldr	r3, [sp, #24]
 8005d2e:	eba4 0808 	sub.w	r8, r4, r8
 8005d32:	4498      	add	r8, r3
 8005d34:	f1b8 0f00 	cmp.w	r8, #0
 8005d38:	f340 8096 	ble.w	8005e68 <_strtod_l+0x538>
 8005d3c:	f018 030f 	ands.w	r3, r8, #15
 8005d40:	d00a      	beq.n	8005d58 <_strtod_l+0x428>
 8005d42:	495f      	ldr	r1, [pc, #380]	; (8005ec0 <_strtod_l+0x590>)
 8005d44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d48:	4652      	mov	r2, sl
 8005d4a:	465b      	mov	r3, fp
 8005d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d50:	f7fa fc5a 	bl	8000608 <__aeabi_dmul>
 8005d54:	4682      	mov	sl, r0
 8005d56:	468b      	mov	fp, r1
 8005d58:	f038 080f 	bics.w	r8, r8, #15
 8005d5c:	d073      	beq.n	8005e46 <_strtod_l+0x516>
 8005d5e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d62:	dd47      	ble.n	8005df4 <_strtod_l+0x4c4>
 8005d64:	2400      	movs	r4, #0
 8005d66:	46a0      	mov	r8, r4
 8005d68:	9407      	str	r4, [sp, #28]
 8005d6a:	9405      	str	r4, [sp, #20]
 8005d6c:	2322      	movs	r3, #34	; 0x22
 8005d6e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005ec8 <_strtod_l+0x598>
 8005d72:	f8c9 3000 	str.w	r3, [r9]
 8005d76:	f04f 0a00 	mov.w	sl, #0
 8005d7a:	9b07      	ldr	r3, [sp, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f43f ae16 	beq.w	80059ae <_strtod_l+0x7e>
 8005d82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d84:	4648      	mov	r0, r9
 8005d86:	f001 fe2d 	bl	80079e4 <_Bfree>
 8005d8a:	9905      	ldr	r1, [sp, #20]
 8005d8c:	4648      	mov	r0, r9
 8005d8e:	f001 fe29 	bl	80079e4 <_Bfree>
 8005d92:	4641      	mov	r1, r8
 8005d94:	4648      	mov	r0, r9
 8005d96:	f001 fe25 	bl	80079e4 <_Bfree>
 8005d9a:	9907      	ldr	r1, [sp, #28]
 8005d9c:	4648      	mov	r0, r9
 8005d9e:	f001 fe21 	bl	80079e4 <_Bfree>
 8005da2:	4621      	mov	r1, r4
 8005da4:	4648      	mov	r0, r9
 8005da6:	f001 fe1d 	bl	80079e4 <_Bfree>
 8005daa:	e600      	b.n	80059ae <_strtod_l+0x7e>
 8005dac:	9a06      	ldr	r2, [sp, #24]
 8005dae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005db2:	4293      	cmp	r3, r2
 8005db4:	dbba      	blt.n	8005d2c <_strtod_l+0x3fc>
 8005db6:	4d42      	ldr	r5, [pc, #264]	; (8005ec0 <_strtod_l+0x590>)
 8005db8:	f1c4 040f 	rsb	r4, r4, #15
 8005dbc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005dc0:	4652      	mov	r2, sl
 8005dc2:	465b      	mov	r3, fp
 8005dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dc8:	f7fa fc1e 	bl	8000608 <__aeabi_dmul>
 8005dcc:	9b06      	ldr	r3, [sp, #24]
 8005dce:	1b1c      	subs	r4, r3, r4
 8005dd0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005dd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dd8:	e78d      	b.n	8005cf6 <_strtod_l+0x3c6>
 8005dda:	f113 0f16 	cmn.w	r3, #22
 8005dde:	dba5      	blt.n	8005d2c <_strtod_l+0x3fc>
 8005de0:	4a37      	ldr	r2, [pc, #220]	; (8005ec0 <_strtod_l+0x590>)
 8005de2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005de6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005dea:	4650      	mov	r0, sl
 8005dec:	4659      	mov	r1, fp
 8005dee:	f7fa fd35 	bl	800085c <__aeabi_ddiv>
 8005df2:	e782      	b.n	8005cfa <_strtod_l+0x3ca>
 8005df4:	2300      	movs	r3, #0
 8005df6:	4e33      	ldr	r6, [pc, #204]	; (8005ec4 <_strtod_l+0x594>)
 8005df8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005dfc:	4650      	mov	r0, sl
 8005dfe:	4659      	mov	r1, fp
 8005e00:	461d      	mov	r5, r3
 8005e02:	f1b8 0f01 	cmp.w	r8, #1
 8005e06:	dc21      	bgt.n	8005e4c <_strtod_l+0x51c>
 8005e08:	b10b      	cbz	r3, 8005e0e <_strtod_l+0x4de>
 8005e0a:	4682      	mov	sl, r0
 8005e0c:	468b      	mov	fp, r1
 8005e0e:	4b2d      	ldr	r3, [pc, #180]	; (8005ec4 <_strtod_l+0x594>)
 8005e10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005e14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005e18:	4652      	mov	r2, sl
 8005e1a:	465b      	mov	r3, fp
 8005e1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005e20:	f7fa fbf2 	bl	8000608 <__aeabi_dmul>
 8005e24:	4b28      	ldr	r3, [pc, #160]	; (8005ec8 <_strtod_l+0x598>)
 8005e26:	460a      	mov	r2, r1
 8005e28:	400b      	ands	r3, r1
 8005e2a:	4928      	ldr	r1, [pc, #160]	; (8005ecc <_strtod_l+0x59c>)
 8005e2c:	428b      	cmp	r3, r1
 8005e2e:	4682      	mov	sl, r0
 8005e30:	d898      	bhi.n	8005d64 <_strtod_l+0x434>
 8005e32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e36:	428b      	cmp	r3, r1
 8005e38:	bf86      	itte	hi
 8005e3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005ed4 <_strtod_l+0x5a4>
 8005e3e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005e42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005e46:	2300      	movs	r3, #0
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	e077      	b.n	8005f3c <_strtod_l+0x60c>
 8005e4c:	f018 0f01 	tst.w	r8, #1
 8005e50:	d006      	beq.n	8005e60 <_strtod_l+0x530>
 8005e52:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa fbd5 	bl	8000608 <__aeabi_dmul>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	3501      	adds	r5, #1
 8005e62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e66:	e7cc      	b.n	8005e02 <_strtod_l+0x4d2>
 8005e68:	d0ed      	beq.n	8005e46 <_strtod_l+0x516>
 8005e6a:	f1c8 0800 	rsb	r8, r8, #0
 8005e6e:	f018 020f 	ands.w	r2, r8, #15
 8005e72:	d00a      	beq.n	8005e8a <_strtod_l+0x55a>
 8005e74:	4b12      	ldr	r3, [pc, #72]	; (8005ec0 <_strtod_l+0x590>)
 8005e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e7a:	4650      	mov	r0, sl
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f7fa fceb 	bl	800085c <__aeabi_ddiv>
 8005e86:	4682      	mov	sl, r0
 8005e88:	468b      	mov	fp, r1
 8005e8a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e8e:	d0da      	beq.n	8005e46 <_strtod_l+0x516>
 8005e90:	f1b8 0f1f 	cmp.w	r8, #31
 8005e94:	dd20      	ble.n	8005ed8 <_strtod_l+0x5a8>
 8005e96:	2400      	movs	r4, #0
 8005e98:	46a0      	mov	r8, r4
 8005e9a:	9407      	str	r4, [sp, #28]
 8005e9c:	9405      	str	r4, [sp, #20]
 8005e9e:	2322      	movs	r3, #34	; 0x22
 8005ea0:	f04f 0a00 	mov.w	sl, #0
 8005ea4:	f04f 0b00 	mov.w	fp, #0
 8005ea8:	f8c9 3000 	str.w	r3, [r9]
 8005eac:	e765      	b.n	8005d7a <_strtod_l+0x44a>
 8005eae:	bf00      	nop
 8005eb0:	08008525 	.word	0x08008525
 8005eb4:	080085b3 	.word	0x080085b3
 8005eb8:	0800852d 	.word	0x0800852d
 8005ebc:	08008570 	.word	0x08008570
 8005ec0:	08008658 	.word	0x08008658
 8005ec4:	08008630 	.word	0x08008630
 8005ec8:	7ff00000 	.word	0x7ff00000
 8005ecc:	7ca00000 	.word	0x7ca00000
 8005ed0:	fff80000 	.word	0xfff80000
 8005ed4:	7fefffff 	.word	0x7fefffff
 8005ed8:	f018 0310 	ands.w	r3, r8, #16
 8005edc:	bf18      	it	ne
 8005ede:	236a      	movne	r3, #106	; 0x6a
 8005ee0:	4da0      	ldr	r5, [pc, #640]	; (8006164 <_strtod_l+0x834>)
 8005ee2:	9304      	str	r3, [sp, #16]
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	4659      	mov	r1, fp
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f1b8 0f00 	cmp.w	r8, #0
 8005eee:	f300 810a 	bgt.w	8006106 <_strtod_l+0x7d6>
 8005ef2:	b10b      	cbz	r3, 8005ef8 <_strtod_l+0x5c8>
 8005ef4:	4682      	mov	sl, r0
 8005ef6:	468b      	mov	fp, r1
 8005ef8:	9b04      	ldr	r3, [sp, #16]
 8005efa:	b1bb      	cbz	r3, 8005f2c <_strtod_l+0x5fc>
 8005efc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005f00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	4659      	mov	r1, fp
 8005f08:	dd10      	ble.n	8005f2c <_strtod_l+0x5fc>
 8005f0a:	2b1f      	cmp	r3, #31
 8005f0c:	f340 8107 	ble.w	800611e <_strtod_l+0x7ee>
 8005f10:	2b34      	cmp	r3, #52	; 0x34
 8005f12:	bfde      	ittt	le
 8005f14:	3b20      	suble	r3, #32
 8005f16:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005f1a:	fa02 f303 	lslle.w	r3, r2, r3
 8005f1e:	f04f 0a00 	mov.w	sl, #0
 8005f22:	bfcc      	ite	gt
 8005f24:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005f28:	ea03 0b01 	andle.w	fp, r3, r1
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4650      	mov	r0, sl
 8005f32:	4659      	mov	r1, fp
 8005f34:	f7fa fdd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d1ac      	bne.n	8005e96 <_strtod_l+0x566>
 8005f3c:	9b07      	ldr	r3, [sp, #28]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	9a05      	ldr	r2, [sp, #20]
 8005f42:	9908      	ldr	r1, [sp, #32]
 8005f44:	4623      	mov	r3, r4
 8005f46:	4648      	mov	r0, r9
 8005f48:	f001 fd9e 	bl	8007a88 <__s2b>
 8005f4c:	9007      	str	r0, [sp, #28]
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	f43f af08 	beq.w	8005d64 <_strtod_l+0x434>
 8005f54:	9a06      	ldr	r2, [sp, #24]
 8005f56:	9b06      	ldr	r3, [sp, #24]
 8005f58:	2a00      	cmp	r2, #0
 8005f5a:	f1c3 0300 	rsb	r3, r3, #0
 8005f5e:	bfa8      	it	ge
 8005f60:	2300      	movge	r3, #0
 8005f62:	930e      	str	r3, [sp, #56]	; 0x38
 8005f64:	2400      	movs	r4, #0
 8005f66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005f6a:	9316      	str	r3, [sp, #88]	; 0x58
 8005f6c:	46a0      	mov	r8, r4
 8005f6e:	9b07      	ldr	r3, [sp, #28]
 8005f70:	4648      	mov	r0, r9
 8005f72:	6859      	ldr	r1, [r3, #4]
 8005f74:	f001 fd02 	bl	800797c <_Balloc>
 8005f78:	9005      	str	r0, [sp, #20]
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f43f aef6 	beq.w	8005d6c <_strtod_l+0x43c>
 8005f80:	9b07      	ldr	r3, [sp, #28]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	3202      	adds	r2, #2
 8005f86:	f103 010c 	add.w	r1, r3, #12
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	300c      	adds	r0, #12
 8005f8e:	f7fe fd83 	bl	8004a98 <memcpy>
 8005f92:	aa1e      	add	r2, sp, #120	; 0x78
 8005f94:	a91d      	add	r1, sp, #116	; 0x74
 8005f96:	ec4b ab10 	vmov	d0, sl, fp
 8005f9a:	4648      	mov	r0, r9
 8005f9c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005fa0:	f002 f82e 	bl	8008000 <__d2b>
 8005fa4:	901c      	str	r0, [sp, #112]	; 0x70
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f43f aee0 	beq.w	8005d6c <_strtod_l+0x43c>
 8005fac:	2101      	movs	r1, #1
 8005fae:	4648      	mov	r0, r9
 8005fb0:	f001 fdf6 	bl	8007ba0 <__i2b>
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	f43f aed8 	beq.w	8005d6c <_strtod_l+0x43c>
 8005fbc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005fbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005fc0:	2e00      	cmp	r6, #0
 8005fc2:	bfab      	itete	ge
 8005fc4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005fc6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005fc8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005fca:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005fcc:	bfac      	ite	ge
 8005fce:	18f7      	addge	r7, r6, r3
 8005fd0:	1b9d      	sublt	r5, r3, r6
 8005fd2:	9b04      	ldr	r3, [sp, #16]
 8005fd4:	1af6      	subs	r6, r6, r3
 8005fd6:	4416      	add	r6, r2
 8005fd8:	4b63      	ldr	r3, [pc, #396]	; (8006168 <_strtod_l+0x838>)
 8005fda:	3e01      	subs	r6, #1
 8005fdc:	429e      	cmp	r6, r3
 8005fde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005fe2:	f280 80af 	bge.w	8006144 <_strtod_l+0x814>
 8005fe6:	1b9b      	subs	r3, r3, r6
 8005fe8:	2b1f      	cmp	r3, #31
 8005fea:	eba2 0203 	sub.w	r2, r2, r3
 8005fee:	f04f 0101 	mov.w	r1, #1
 8005ff2:	f300 809b 	bgt.w	800612c <_strtod_l+0x7fc>
 8005ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffa:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8006000:	18be      	adds	r6, r7, r2
 8006002:	9b04      	ldr	r3, [sp, #16]
 8006004:	42b7      	cmp	r7, r6
 8006006:	4415      	add	r5, r2
 8006008:	441d      	add	r5, r3
 800600a:	463b      	mov	r3, r7
 800600c:	bfa8      	it	ge
 800600e:	4633      	movge	r3, r6
 8006010:	42ab      	cmp	r3, r5
 8006012:	bfa8      	it	ge
 8006014:	462b      	movge	r3, r5
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfc2      	ittt	gt
 800601a:	1af6      	subgt	r6, r6, r3
 800601c:	1aed      	subgt	r5, r5, r3
 800601e:	1aff      	subgt	r7, r7, r3
 8006020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006022:	b1bb      	cbz	r3, 8006054 <_strtod_l+0x724>
 8006024:	4641      	mov	r1, r8
 8006026:	461a      	mov	r2, r3
 8006028:	4648      	mov	r0, r9
 800602a:	f001 fe59 	bl	8007ce0 <__pow5mult>
 800602e:	4680      	mov	r8, r0
 8006030:	2800      	cmp	r0, #0
 8006032:	f43f ae9b 	beq.w	8005d6c <_strtod_l+0x43c>
 8006036:	4601      	mov	r1, r0
 8006038:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800603a:	4648      	mov	r0, r9
 800603c:	f001 fdb9 	bl	8007bb2 <__multiply>
 8006040:	900c      	str	r0, [sp, #48]	; 0x30
 8006042:	2800      	cmp	r0, #0
 8006044:	f43f ae92 	beq.w	8005d6c <_strtod_l+0x43c>
 8006048:	991c      	ldr	r1, [sp, #112]	; 0x70
 800604a:	4648      	mov	r0, r9
 800604c:	f001 fcca 	bl	80079e4 <_Bfree>
 8006050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006052:	931c      	str	r3, [sp, #112]	; 0x70
 8006054:	2e00      	cmp	r6, #0
 8006056:	dc7a      	bgt.n	800614e <_strtod_l+0x81e>
 8006058:	9b06      	ldr	r3, [sp, #24]
 800605a:	2b00      	cmp	r3, #0
 800605c:	dd08      	ble.n	8006070 <_strtod_l+0x740>
 800605e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006060:	9905      	ldr	r1, [sp, #20]
 8006062:	4648      	mov	r0, r9
 8006064:	f001 fe3c 	bl	8007ce0 <__pow5mult>
 8006068:	9005      	str	r0, [sp, #20]
 800606a:	2800      	cmp	r0, #0
 800606c:	f43f ae7e 	beq.w	8005d6c <_strtod_l+0x43c>
 8006070:	2d00      	cmp	r5, #0
 8006072:	dd08      	ble.n	8006086 <_strtod_l+0x756>
 8006074:	462a      	mov	r2, r5
 8006076:	9905      	ldr	r1, [sp, #20]
 8006078:	4648      	mov	r0, r9
 800607a:	f001 fe7f 	bl	8007d7c <__lshift>
 800607e:	9005      	str	r0, [sp, #20]
 8006080:	2800      	cmp	r0, #0
 8006082:	f43f ae73 	beq.w	8005d6c <_strtod_l+0x43c>
 8006086:	2f00      	cmp	r7, #0
 8006088:	dd08      	ble.n	800609c <_strtod_l+0x76c>
 800608a:	4641      	mov	r1, r8
 800608c:	463a      	mov	r2, r7
 800608e:	4648      	mov	r0, r9
 8006090:	f001 fe74 	bl	8007d7c <__lshift>
 8006094:	4680      	mov	r8, r0
 8006096:	2800      	cmp	r0, #0
 8006098:	f43f ae68 	beq.w	8005d6c <_strtod_l+0x43c>
 800609c:	9a05      	ldr	r2, [sp, #20]
 800609e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060a0:	4648      	mov	r0, r9
 80060a2:	f001 fed9 	bl	8007e58 <__mdiff>
 80060a6:	4604      	mov	r4, r0
 80060a8:	2800      	cmp	r0, #0
 80060aa:	f43f ae5f 	beq.w	8005d6c <_strtod_l+0x43c>
 80060ae:	68c3      	ldr	r3, [r0, #12]
 80060b0:	930c      	str	r3, [sp, #48]	; 0x30
 80060b2:	2300      	movs	r3, #0
 80060b4:	60c3      	str	r3, [r0, #12]
 80060b6:	4641      	mov	r1, r8
 80060b8:	f001 feb4 	bl	8007e24 <__mcmp>
 80060bc:	2800      	cmp	r0, #0
 80060be:	da55      	bge.n	800616c <_strtod_l+0x83c>
 80060c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060c2:	b9e3      	cbnz	r3, 80060fe <_strtod_l+0x7ce>
 80060c4:	f1ba 0f00 	cmp.w	sl, #0
 80060c8:	d119      	bne.n	80060fe <_strtod_l+0x7ce>
 80060ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060ce:	b9b3      	cbnz	r3, 80060fe <_strtod_l+0x7ce>
 80060d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060d4:	0d1b      	lsrs	r3, r3, #20
 80060d6:	051b      	lsls	r3, r3, #20
 80060d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060dc:	d90f      	bls.n	80060fe <_strtod_l+0x7ce>
 80060de:	6963      	ldr	r3, [r4, #20]
 80060e0:	b913      	cbnz	r3, 80060e8 <_strtod_l+0x7b8>
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	dd0a      	ble.n	80060fe <_strtod_l+0x7ce>
 80060e8:	4621      	mov	r1, r4
 80060ea:	2201      	movs	r2, #1
 80060ec:	4648      	mov	r0, r9
 80060ee:	f001 fe45 	bl	8007d7c <__lshift>
 80060f2:	4641      	mov	r1, r8
 80060f4:	4604      	mov	r4, r0
 80060f6:	f001 fe95 	bl	8007e24 <__mcmp>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	dc67      	bgt.n	80061ce <_strtod_l+0x89e>
 80060fe:	9b04      	ldr	r3, [sp, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d171      	bne.n	80061e8 <_strtod_l+0x8b8>
 8006104:	e63d      	b.n	8005d82 <_strtod_l+0x452>
 8006106:	f018 0f01 	tst.w	r8, #1
 800610a:	d004      	beq.n	8006116 <_strtod_l+0x7e6>
 800610c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006110:	f7fa fa7a 	bl	8000608 <__aeabi_dmul>
 8006114:	2301      	movs	r3, #1
 8006116:	ea4f 0868 	mov.w	r8, r8, asr #1
 800611a:	3508      	adds	r5, #8
 800611c:	e6e5      	b.n	8005eea <_strtod_l+0x5ba>
 800611e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	ea03 0a0a 	and.w	sl, r3, sl
 800612a:	e6ff      	b.n	8005f2c <_strtod_l+0x5fc>
 800612c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006130:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006134:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006138:	36e2      	adds	r6, #226	; 0xe2
 800613a:	fa01 f306 	lsl.w	r3, r1, r6
 800613e:	930a      	str	r3, [sp, #40]	; 0x28
 8006140:	910f      	str	r1, [sp, #60]	; 0x3c
 8006142:	e75d      	b.n	8006000 <_strtod_l+0x6d0>
 8006144:	2300      	movs	r3, #0
 8006146:	930a      	str	r3, [sp, #40]	; 0x28
 8006148:	2301      	movs	r3, #1
 800614a:	930f      	str	r3, [sp, #60]	; 0x3c
 800614c:	e758      	b.n	8006000 <_strtod_l+0x6d0>
 800614e:	4632      	mov	r2, r6
 8006150:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006152:	4648      	mov	r0, r9
 8006154:	f001 fe12 	bl	8007d7c <__lshift>
 8006158:	901c      	str	r0, [sp, #112]	; 0x70
 800615a:	2800      	cmp	r0, #0
 800615c:	f47f af7c 	bne.w	8006058 <_strtod_l+0x728>
 8006160:	e604      	b.n	8005d6c <_strtod_l+0x43c>
 8006162:	bf00      	nop
 8006164:	08008588 	.word	0x08008588
 8006168:	fffffc02 	.word	0xfffffc02
 800616c:	465d      	mov	r5, fp
 800616e:	f040 8086 	bne.w	800627e <_strtod_l+0x94e>
 8006172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006178:	b32a      	cbz	r2, 80061c6 <_strtod_l+0x896>
 800617a:	4aaf      	ldr	r2, [pc, #700]	; (8006438 <_strtod_l+0xb08>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d153      	bne.n	8006228 <_strtod_l+0x8f8>
 8006180:	9b04      	ldr	r3, [sp, #16]
 8006182:	4650      	mov	r0, sl
 8006184:	b1d3      	cbz	r3, 80061bc <_strtod_l+0x88c>
 8006186:	4aad      	ldr	r2, [pc, #692]	; (800643c <_strtod_l+0xb0c>)
 8006188:	402a      	ands	r2, r5
 800618a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800618e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006192:	d816      	bhi.n	80061c2 <_strtod_l+0x892>
 8006194:	0d12      	lsrs	r2, r2, #20
 8006196:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800619a:	fa01 f303 	lsl.w	r3, r1, r3
 800619e:	4298      	cmp	r0, r3
 80061a0:	d142      	bne.n	8006228 <_strtod_l+0x8f8>
 80061a2:	4ba7      	ldr	r3, [pc, #668]	; (8006440 <_strtod_l+0xb10>)
 80061a4:	429d      	cmp	r5, r3
 80061a6:	d102      	bne.n	80061ae <_strtod_l+0x87e>
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f addf 	beq.w	8005d6c <_strtod_l+0x43c>
 80061ae:	4ba3      	ldr	r3, [pc, #652]	; (800643c <_strtod_l+0xb0c>)
 80061b0:	402b      	ands	r3, r5
 80061b2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80061b6:	f04f 0a00 	mov.w	sl, #0
 80061ba:	e7a0      	b.n	80060fe <_strtod_l+0x7ce>
 80061bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061c0:	e7ed      	b.n	800619e <_strtod_l+0x86e>
 80061c2:	460b      	mov	r3, r1
 80061c4:	e7eb      	b.n	800619e <_strtod_l+0x86e>
 80061c6:	bb7b      	cbnz	r3, 8006228 <_strtod_l+0x8f8>
 80061c8:	f1ba 0f00 	cmp.w	sl, #0
 80061cc:	d12c      	bne.n	8006228 <_strtod_l+0x8f8>
 80061ce:	9904      	ldr	r1, [sp, #16]
 80061d0:	4a9a      	ldr	r2, [pc, #616]	; (800643c <_strtod_l+0xb0c>)
 80061d2:	465b      	mov	r3, fp
 80061d4:	b1f1      	cbz	r1, 8006214 <_strtod_l+0x8e4>
 80061d6:	ea02 010b 	and.w	r1, r2, fp
 80061da:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80061de:	dc19      	bgt.n	8006214 <_strtod_l+0x8e4>
 80061e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80061e4:	f77f ae5b 	ble.w	8005e9e <_strtod_l+0x56e>
 80061e8:	4a96      	ldr	r2, [pc, #600]	; (8006444 <_strtod_l+0xb14>)
 80061ea:	2300      	movs	r3, #0
 80061ec:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80061f0:	4650      	mov	r0, sl
 80061f2:	4659      	mov	r1, fp
 80061f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80061f8:	f7fa fa06 	bl	8000608 <__aeabi_dmul>
 80061fc:	4682      	mov	sl, r0
 80061fe:	468b      	mov	fp, r1
 8006200:	2900      	cmp	r1, #0
 8006202:	f47f adbe 	bne.w	8005d82 <_strtod_l+0x452>
 8006206:	2800      	cmp	r0, #0
 8006208:	f47f adbb 	bne.w	8005d82 <_strtod_l+0x452>
 800620c:	2322      	movs	r3, #34	; 0x22
 800620e:	f8c9 3000 	str.w	r3, [r9]
 8006212:	e5b6      	b.n	8005d82 <_strtod_l+0x452>
 8006214:	4013      	ands	r3, r2
 8006216:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800621a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800621e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006222:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006226:	e76a      	b.n	80060fe <_strtod_l+0x7ce>
 8006228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622a:	b193      	cbz	r3, 8006252 <_strtod_l+0x922>
 800622c:	422b      	tst	r3, r5
 800622e:	f43f af66 	beq.w	80060fe <_strtod_l+0x7ce>
 8006232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006234:	9a04      	ldr	r2, [sp, #16]
 8006236:	4650      	mov	r0, sl
 8006238:	4659      	mov	r1, fp
 800623a:	b173      	cbz	r3, 800625a <_strtod_l+0x92a>
 800623c:	f7ff fb5c 	bl	80058f8 <sulp>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006248:	f7fa f828 	bl	800029c <__adddf3>
 800624c:	4682      	mov	sl, r0
 800624e:	468b      	mov	fp, r1
 8006250:	e755      	b.n	80060fe <_strtod_l+0x7ce>
 8006252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006254:	ea13 0f0a 	tst.w	r3, sl
 8006258:	e7e9      	b.n	800622e <_strtod_l+0x8fe>
 800625a:	f7ff fb4d 	bl	80058f8 <sulp>
 800625e:	4602      	mov	r2, r0
 8006260:	460b      	mov	r3, r1
 8006262:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006266:	f7fa f817 	bl	8000298 <__aeabi_dsub>
 800626a:	2200      	movs	r2, #0
 800626c:	2300      	movs	r3, #0
 800626e:	4682      	mov	sl, r0
 8006270:	468b      	mov	fp, r1
 8006272:	f7fa fc31 	bl	8000ad8 <__aeabi_dcmpeq>
 8006276:	2800      	cmp	r0, #0
 8006278:	f47f ae11 	bne.w	8005e9e <_strtod_l+0x56e>
 800627c:	e73f      	b.n	80060fe <_strtod_l+0x7ce>
 800627e:	4641      	mov	r1, r8
 8006280:	4620      	mov	r0, r4
 8006282:	f001 ff0c 	bl	800809e <__ratio>
 8006286:	ec57 6b10 	vmov	r6, r7, d0
 800628a:	2200      	movs	r2, #0
 800628c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006290:	ee10 0a10 	vmov	r0, s0
 8006294:	4639      	mov	r1, r7
 8006296:	f7fa fc33 	bl	8000b00 <__aeabi_dcmple>
 800629a:	2800      	cmp	r0, #0
 800629c:	d077      	beq.n	800638e <_strtod_l+0xa5e>
 800629e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d04a      	beq.n	800633a <_strtod_l+0xa0a>
 80062a4:	4b68      	ldr	r3, [pc, #416]	; (8006448 <_strtod_l+0xb18>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80062ac:	4f66      	ldr	r7, [pc, #408]	; (8006448 <_strtod_l+0xb18>)
 80062ae:	2600      	movs	r6, #0
 80062b0:	4b62      	ldr	r3, [pc, #392]	; (800643c <_strtod_l+0xb0c>)
 80062b2:	402b      	ands	r3, r5
 80062b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062b8:	4b64      	ldr	r3, [pc, #400]	; (800644c <_strtod_l+0xb1c>)
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f040 80ce 	bne.w	800645c <_strtod_l+0xb2c>
 80062c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062c8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80062cc:	ec4b ab10 	vmov	d0, sl, fp
 80062d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80062d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062d8:	f001 fe1c 	bl	8007f14 <__ulp>
 80062dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062e0:	ec53 2b10 	vmov	r2, r3, d0
 80062e4:	f7fa f990 	bl	8000608 <__aeabi_dmul>
 80062e8:	4652      	mov	r2, sl
 80062ea:	465b      	mov	r3, fp
 80062ec:	f7f9 ffd6 	bl	800029c <__adddf3>
 80062f0:	460b      	mov	r3, r1
 80062f2:	4952      	ldr	r1, [pc, #328]	; (800643c <_strtod_l+0xb0c>)
 80062f4:	4a56      	ldr	r2, [pc, #344]	; (8006450 <_strtod_l+0xb20>)
 80062f6:	4019      	ands	r1, r3
 80062f8:	4291      	cmp	r1, r2
 80062fa:	4682      	mov	sl, r0
 80062fc:	d95b      	bls.n	80063b6 <_strtod_l+0xa86>
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006304:	4293      	cmp	r3, r2
 8006306:	d103      	bne.n	8006310 <_strtod_l+0x9e0>
 8006308:	9b08      	ldr	r3, [sp, #32]
 800630a:	3301      	adds	r3, #1
 800630c:	f43f ad2e 	beq.w	8005d6c <_strtod_l+0x43c>
 8006310:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006440 <_strtod_l+0xb10>
 8006314:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006318:	991c      	ldr	r1, [sp, #112]	; 0x70
 800631a:	4648      	mov	r0, r9
 800631c:	f001 fb62 	bl	80079e4 <_Bfree>
 8006320:	9905      	ldr	r1, [sp, #20]
 8006322:	4648      	mov	r0, r9
 8006324:	f001 fb5e 	bl	80079e4 <_Bfree>
 8006328:	4641      	mov	r1, r8
 800632a:	4648      	mov	r0, r9
 800632c:	f001 fb5a 	bl	80079e4 <_Bfree>
 8006330:	4621      	mov	r1, r4
 8006332:	4648      	mov	r0, r9
 8006334:	f001 fb56 	bl	80079e4 <_Bfree>
 8006338:	e619      	b.n	8005f6e <_strtod_l+0x63e>
 800633a:	f1ba 0f00 	cmp.w	sl, #0
 800633e:	d11a      	bne.n	8006376 <_strtod_l+0xa46>
 8006340:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006344:	b9eb      	cbnz	r3, 8006382 <_strtod_l+0xa52>
 8006346:	2200      	movs	r2, #0
 8006348:	4b3f      	ldr	r3, [pc, #252]	; (8006448 <_strtod_l+0xb18>)
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7fa fbcd 	bl	8000aec <__aeabi_dcmplt>
 8006352:	b9c8      	cbnz	r0, 8006388 <_strtod_l+0xa58>
 8006354:	4630      	mov	r0, r6
 8006356:	4639      	mov	r1, r7
 8006358:	2200      	movs	r2, #0
 800635a:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <_strtod_l+0xb24>)
 800635c:	f7fa f954 	bl	8000608 <__aeabi_dmul>
 8006360:	4606      	mov	r6, r0
 8006362:	460f      	mov	r7, r1
 8006364:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006368:	9618      	str	r6, [sp, #96]	; 0x60
 800636a:	9319      	str	r3, [sp, #100]	; 0x64
 800636c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006370:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006374:	e79c      	b.n	80062b0 <_strtod_l+0x980>
 8006376:	f1ba 0f01 	cmp.w	sl, #1
 800637a:	d102      	bne.n	8006382 <_strtod_l+0xa52>
 800637c:	2d00      	cmp	r5, #0
 800637e:	f43f ad8e 	beq.w	8005e9e <_strtod_l+0x56e>
 8006382:	2200      	movs	r2, #0
 8006384:	4b34      	ldr	r3, [pc, #208]	; (8006458 <_strtod_l+0xb28>)
 8006386:	e78f      	b.n	80062a8 <_strtod_l+0x978>
 8006388:	2600      	movs	r6, #0
 800638a:	4f32      	ldr	r7, [pc, #200]	; (8006454 <_strtod_l+0xb24>)
 800638c:	e7ea      	b.n	8006364 <_strtod_l+0xa34>
 800638e:	4b31      	ldr	r3, [pc, #196]	; (8006454 <_strtod_l+0xb24>)
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	2200      	movs	r2, #0
 8006396:	f7fa f937 	bl	8000608 <__aeabi_dmul>
 800639a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800639c:	4606      	mov	r6, r0
 800639e:	460f      	mov	r7, r1
 80063a0:	b933      	cbnz	r3, 80063b0 <_strtod_l+0xa80>
 80063a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063a6:	9010      	str	r0, [sp, #64]	; 0x40
 80063a8:	9311      	str	r3, [sp, #68]	; 0x44
 80063aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80063ae:	e7df      	b.n	8006370 <_strtod_l+0xa40>
 80063b0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80063b4:	e7f9      	b.n	80063aa <_strtod_l+0xa7a>
 80063b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80063ba:	9b04      	ldr	r3, [sp, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1ab      	bne.n	8006318 <_strtod_l+0x9e8>
 80063c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063c4:	0d1b      	lsrs	r3, r3, #20
 80063c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063c8:	051b      	lsls	r3, r3, #20
 80063ca:	429a      	cmp	r2, r3
 80063cc:	465d      	mov	r5, fp
 80063ce:	d1a3      	bne.n	8006318 <_strtod_l+0x9e8>
 80063d0:	4639      	mov	r1, r7
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7fa fbc8 	bl	8000b68 <__aeabi_d2iz>
 80063d8:	f7fa f8ac 	bl	8000534 <__aeabi_i2d>
 80063dc:	460b      	mov	r3, r1
 80063de:	4602      	mov	r2, r0
 80063e0:	4639      	mov	r1, r7
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7f9 ff58 	bl	8000298 <__aeabi_dsub>
 80063e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ea:	4606      	mov	r6, r0
 80063ec:	460f      	mov	r7, r1
 80063ee:	b933      	cbnz	r3, 80063fe <_strtod_l+0xace>
 80063f0:	f1ba 0f00 	cmp.w	sl, #0
 80063f4:	d103      	bne.n	80063fe <_strtod_l+0xace>
 80063f6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80063fa:	2d00      	cmp	r5, #0
 80063fc:	d06d      	beq.n	80064da <_strtod_l+0xbaa>
 80063fe:	a30a      	add	r3, pc, #40	; (adr r3, 8006428 <_strtod_l+0xaf8>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f7fa fb70 	bl	8000aec <__aeabi_dcmplt>
 800640c:	2800      	cmp	r0, #0
 800640e:	f47f acb8 	bne.w	8005d82 <_strtod_l+0x452>
 8006412:	a307      	add	r3, pc, #28	; (adr r3, 8006430 <_strtod_l+0xb00>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	4630      	mov	r0, r6
 800641a:	4639      	mov	r1, r7
 800641c:	f7fa fb84 	bl	8000b28 <__aeabi_dcmpgt>
 8006420:	2800      	cmp	r0, #0
 8006422:	f43f af79 	beq.w	8006318 <_strtod_l+0x9e8>
 8006426:	e4ac      	b.n	8005d82 <_strtod_l+0x452>
 8006428:	94a03595 	.word	0x94a03595
 800642c:	3fdfffff 	.word	0x3fdfffff
 8006430:	35afe535 	.word	0x35afe535
 8006434:	3fe00000 	.word	0x3fe00000
 8006438:	000fffff 	.word	0x000fffff
 800643c:	7ff00000 	.word	0x7ff00000
 8006440:	7fefffff 	.word	0x7fefffff
 8006444:	39500000 	.word	0x39500000
 8006448:	3ff00000 	.word	0x3ff00000
 800644c:	7fe00000 	.word	0x7fe00000
 8006450:	7c9fffff 	.word	0x7c9fffff
 8006454:	3fe00000 	.word	0x3fe00000
 8006458:	bff00000 	.word	0xbff00000
 800645c:	9b04      	ldr	r3, [sp, #16]
 800645e:	b333      	cbz	r3, 80064ae <_strtod_l+0xb7e>
 8006460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006462:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006466:	d822      	bhi.n	80064ae <_strtod_l+0xb7e>
 8006468:	a327      	add	r3, pc, #156	; (adr r3, 8006508 <_strtod_l+0xbd8>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	4630      	mov	r0, r6
 8006470:	4639      	mov	r1, r7
 8006472:	f7fa fb45 	bl	8000b00 <__aeabi_dcmple>
 8006476:	b1a0      	cbz	r0, 80064a2 <_strtod_l+0xb72>
 8006478:	4639      	mov	r1, r7
 800647a:	4630      	mov	r0, r6
 800647c:	f7fa fb9c 	bl	8000bb8 <__aeabi_d2uiz>
 8006480:	2800      	cmp	r0, #0
 8006482:	bf08      	it	eq
 8006484:	2001      	moveq	r0, #1
 8006486:	f7fa f845 	bl	8000514 <__aeabi_ui2d>
 800648a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800648c:	4606      	mov	r6, r0
 800648e:	460f      	mov	r7, r1
 8006490:	bb03      	cbnz	r3, 80064d4 <_strtod_l+0xba4>
 8006492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006496:	9012      	str	r0, [sp, #72]	; 0x48
 8006498:	9313      	str	r3, [sp, #76]	; 0x4c
 800649a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800649e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80064a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064a6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80064aa:	1a9b      	subs	r3, r3, r2
 80064ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80064ae:	ed9d 0b08 	vldr	d0, [sp, #32]
 80064b2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80064b6:	f001 fd2d 	bl	8007f14 <__ulp>
 80064ba:	4650      	mov	r0, sl
 80064bc:	ec53 2b10 	vmov	r2, r3, d0
 80064c0:	4659      	mov	r1, fp
 80064c2:	f7fa f8a1 	bl	8000608 <__aeabi_dmul>
 80064c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064ca:	f7f9 fee7 	bl	800029c <__adddf3>
 80064ce:	4682      	mov	sl, r0
 80064d0:	468b      	mov	fp, r1
 80064d2:	e772      	b.n	80063ba <_strtod_l+0xa8a>
 80064d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80064d8:	e7df      	b.n	800649a <_strtod_l+0xb6a>
 80064da:	a30d      	add	r3, pc, #52	; (adr r3, 8006510 <_strtod_l+0xbe0>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f7fa fb04 	bl	8000aec <__aeabi_dcmplt>
 80064e4:	e79c      	b.n	8006420 <_strtod_l+0xaf0>
 80064e6:	2300      	movs	r3, #0
 80064e8:	930d      	str	r3, [sp, #52]	; 0x34
 80064ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	f7ff ba61 	b.w	80059b6 <_strtod_l+0x86>
 80064f4:	2b65      	cmp	r3, #101	; 0x65
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	f43f ab4e 	beq.w	8005b9a <_strtod_l+0x26a>
 80064fe:	2101      	movs	r1, #1
 8006500:	4614      	mov	r4, r2
 8006502:	9104      	str	r1, [sp, #16]
 8006504:	f7ff bacb 	b.w	8005a9e <_strtod_l+0x16e>
 8006508:	ffc00000 	.word	0xffc00000
 800650c:	41dfffff 	.word	0x41dfffff
 8006510:	94a03595 	.word	0x94a03595
 8006514:	3fcfffff 	.word	0x3fcfffff

08006518 <_strtod_r>:
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <_strtod_r+0x18>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	b410      	push	{r4}
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	4c04      	ldr	r4, [pc, #16]	; (8006534 <_strtod_r+0x1c>)
 8006522:	2b00      	cmp	r3, #0
 8006524:	bf08      	it	eq
 8006526:	4623      	moveq	r3, r4
 8006528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800652c:	f7ff ba00 	b.w	8005930 <_strtod_l>
 8006530:	20000008 	.word	0x20000008
 8006534:	2000006c 	.word	0x2000006c

08006538 <_strtol_l.isra.0>:
 8006538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800653c:	4680      	mov	r8, r0
 800653e:	4689      	mov	r9, r1
 8006540:	4692      	mov	sl, r2
 8006542:	461e      	mov	r6, r3
 8006544:	460f      	mov	r7, r1
 8006546:	463d      	mov	r5, r7
 8006548:	9808      	ldr	r0, [sp, #32]
 800654a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800654e:	f001 f9ed 	bl	800792c <__locale_ctype_ptr_l>
 8006552:	4420      	add	r0, r4
 8006554:	7843      	ldrb	r3, [r0, #1]
 8006556:	f013 0308 	ands.w	r3, r3, #8
 800655a:	d132      	bne.n	80065c2 <_strtol_l.isra.0+0x8a>
 800655c:	2c2d      	cmp	r4, #45	; 0x2d
 800655e:	d132      	bne.n	80065c6 <_strtol_l.isra.0+0x8e>
 8006560:	787c      	ldrb	r4, [r7, #1]
 8006562:	1cbd      	adds	r5, r7, #2
 8006564:	2201      	movs	r2, #1
 8006566:	2e00      	cmp	r6, #0
 8006568:	d05d      	beq.n	8006626 <_strtol_l.isra.0+0xee>
 800656a:	2e10      	cmp	r6, #16
 800656c:	d109      	bne.n	8006582 <_strtol_l.isra.0+0x4a>
 800656e:	2c30      	cmp	r4, #48	; 0x30
 8006570:	d107      	bne.n	8006582 <_strtol_l.isra.0+0x4a>
 8006572:	782b      	ldrb	r3, [r5, #0]
 8006574:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006578:	2b58      	cmp	r3, #88	; 0x58
 800657a:	d14f      	bne.n	800661c <_strtol_l.isra.0+0xe4>
 800657c:	786c      	ldrb	r4, [r5, #1]
 800657e:	2610      	movs	r6, #16
 8006580:	3502      	adds	r5, #2
 8006582:	2a00      	cmp	r2, #0
 8006584:	bf14      	ite	ne
 8006586:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800658a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800658e:	2700      	movs	r7, #0
 8006590:	fbb1 fcf6 	udiv	ip, r1, r6
 8006594:	4638      	mov	r0, r7
 8006596:	fb06 1e1c 	mls	lr, r6, ip, r1
 800659a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800659e:	2b09      	cmp	r3, #9
 80065a0:	d817      	bhi.n	80065d2 <_strtol_l.isra.0+0x9a>
 80065a2:	461c      	mov	r4, r3
 80065a4:	42a6      	cmp	r6, r4
 80065a6:	dd23      	ble.n	80065f0 <_strtol_l.isra.0+0xb8>
 80065a8:	1c7b      	adds	r3, r7, #1
 80065aa:	d007      	beq.n	80065bc <_strtol_l.isra.0+0x84>
 80065ac:	4584      	cmp	ip, r0
 80065ae:	d31c      	bcc.n	80065ea <_strtol_l.isra.0+0xb2>
 80065b0:	d101      	bne.n	80065b6 <_strtol_l.isra.0+0x7e>
 80065b2:	45a6      	cmp	lr, r4
 80065b4:	db19      	blt.n	80065ea <_strtol_l.isra.0+0xb2>
 80065b6:	fb00 4006 	mla	r0, r0, r6, r4
 80065ba:	2701      	movs	r7, #1
 80065bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065c0:	e7eb      	b.n	800659a <_strtol_l.isra.0+0x62>
 80065c2:	462f      	mov	r7, r5
 80065c4:	e7bf      	b.n	8006546 <_strtol_l.isra.0+0xe>
 80065c6:	2c2b      	cmp	r4, #43	; 0x2b
 80065c8:	bf04      	itt	eq
 80065ca:	1cbd      	addeq	r5, r7, #2
 80065cc:	787c      	ldrbeq	r4, [r7, #1]
 80065ce:	461a      	mov	r2, r3
 80065d0:	e7c9      	b.n	8006566 <_strtol_l.isra.0+0x2e>
 80065d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80065d6:	2b19      	cmp	r3, #25
 80065d8:	d801      	bhi.n	80065de <_strtol_l.isra.0+0xa6>
 80065da:	3c37      	subs	r4, #55	; 0x37
 80065dc:	e7e2      	b.n	80065a4 <_strtol_l.isra.0+0x6c>
 80065de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80065e2:	2b19      	cmp	r3, #25
 80065e4:	d804      	bhi.n	80065f0 <_strtol_l.isra.0+0xb8>
 80065e6:	3c57      	subs	r4, #87	; 0x57
 80065e8:	e7dc      	b.n	80065a4 <_strtol_l.isra.0+0x6c>
 80065ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80065ee:	e7e5      	b.n	80065bc <_strtol_l.isra.0+0x84>
 80065f0:	1c7b      	adds	r3, r7, #1
 80065f2:	d108      	bne.n	8006606 <_strtol_l.isra.0+0xce>
 80065f4:	2322      	movs	r3, #34	; 0x22
 80065f6:	f8c8 3000 	str.w	r3, [r8]
 80065fa:	4608      	mov	r0, r1
 80065fc:	f1ba 0f00 	cmp.w	sl, #0
 8006600:	d107      	bne.n	8006612 <_strtol_l.isra.0+0xda>
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	b102      	cbz	r2, 800660a <_strtol_l.isra.0+0xd2>
 8006608:	4240      	negs	r0, r0
 800660a:	f1ba 0f00 	cmp.w	sl, #0
 800660e:	d0f8      	beq.n	8006602 <_strtol_l.isra.0+0xca>
 8006610:	b10f      	cbz	r7, 8006616 <_strtol_l.isra.0+0xde>
 8006612:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006616:	f8ca 9000 	str.w	r9, [sl]
 800661a:	e7f2      	b.n	8006602 <_strtol_l.isra.0+0xca>
 800661c:	2430      	movs	r4, #48	; 0x30
 800661e:	2e00      	cmp	r6, #0
 8006620:	d1af      	bne.n	8006582 <_strtol_l.isra.0+0x4a>
 8006622:	2608      	movs	r6, #8
 8006624:	e7ad      	b.n	8006582 <_strtol_l.isra.0+0x4a>
 8006626:	2c30      	cmp	r4, #48	; 0x30
 8006628:	d0a3      	beq.n	8006572 <_strtol_l.isra.0+0x3a>
 800662a:	260a      	movs	r6, #10
 800662c:	e7a9      	b.n	8006582 <_strtol_l.isra.0+0x4a>
	...

08006630 <_strtol_r>:
 8006630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006632:	4c06      	ldr	r4, [pc, #24]	; (800664c <_strtol_r+0x1c>)
 8006634:	4d06      	ldr	r5, [pc, #24]	; (8006650 <_strtol_r+0x20>)
 8006636:	6824      	ldr	r4, [r4, #0]
 8006638:	6a24      	ldr	r4, [r4, #32]
 800663a:	2c00      	cmp	r4, #0
 800663c:	bf08      	it	eq
 800663e:	462c      	moveq	r4, r5
 8006640:	9400      	str	r4, [sp, #0]
 8006642:	f7ff ff79 	bl	8006538 <_strtol_l.isra.0>
 8006646:	b003      	add	sp, #12
 8006648:	bd30      	pop	{r4, r5, pc}
 800664a:	bf00      	nop
 800664c:	20000008 	.word	0x20000008
 8006650:	2000006c 	.word	0x2000006c

08006654 <quorem>:
 8006654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	6903      	ldr	r3, [r0, #16]
 800665a:	690c      	ldr	r4, [r1, #16]
 800665c:	42a3      	cmp	r3, r4
 800665e:	4680      	mov	r8, r0
 8006660:	f2c0 8082 	blt.w	8006768 <quorem+0x114>
 8006664:	3c01      	subs	r4, #1
 8006666:	f101 0714 	add.w	r7, r1, #20
 800666a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800666e:	f100 0614 	add.w	r6, r0, #20
 8006672:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006676:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800667a:	eb06 030c 	add.w	r3, r6, ip
 800667e:	3501      	adds	r5, #1
 8006680:	eb07 090c 	add.w	r9, r7, ip
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	fbb0 f5f5 	udiv	r5, r0, r5
 800668a:	b395      	cbz	r5, 80066f2 <quorem+0x9e>
 800668c:	f04f 0a00 	mov.w	sl, #0
 8006690:	4638      	mov	r0, r7
 8006692:	46b6      	mov	lr, r6
 8006694:	46d3      	mov	fp, sl
 8006696:	f850 2b04 	ldr.w	r2, [r0], #4
 800669a:	b293      	uxth	r3, r2
 800669c:	fb05 a303 	mla	r3, r5, r3, sl
 80066a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	ebab 0303 	sub.w	r3, fp, r3
 80066aa:	0c12      	lsrs	r2, r2, #16
 80066ac:	f8de b000 	ldr.w	fp, [lr]
 80066b0:	fb05 a202 	mla	r2, r5, r2, sl
 80066b4:	fa13 f38b 	uxtah	r3, r3, fp
 80066b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80066bc:	fa1f fb82 	uxth.w	fp, r2
 80066c0:	f8de 2000 	ldr.w	r2, [lr]
 80066c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80066c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066d2:	4581      	cmp	r9, r0
 80066d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80066d8:	f84e 3b04 	str.w	r3, [lr], #4
 80066dc:	d2db      	bcs.n	8006696 <quorem+0x42>
 80066de:	f856 300c 	ldr.w	r3, [r6, ip]
 80066e2:	b933      	cbnz	r3, 80066f2 <quorem+0x9e>
 80066e4:	9b01      	ldr	r3, [sp, #4]
 80066e6:	3b04      	subs	r3, #4
 80066e8:	429e      	cmp	r6, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	d330      	bcc.n	8006750 <quorem+0xfc>
 80066ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80066f2:	4640      	mov	r0, r8
 80066f4:	f001 fb96 	bl	8007e24 <__mcmp>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	db25      	blt.n	8006748 <quorem+0xf4>
 80066fc:	3501      	adds	r5, #1
 80066fe:	4630      	mov	r0, r6
 8006700:	f04f 0c00 	mov.w	ip, #0
 8006704:	f857 2b04 	ldr.w	r2, [r7], #4
 8006708:	f8d0 e000 	ldr.w	lr, [r0]
 800670c:	b293      	uxth	r3, r2
 800670e:	ebac 0303 	sub.w	r3, ip, r3
 8006712:	0c12      	lsrs	r2, r2, #16
 8006714:	fa13 f38e 	uxtah	r3, r3, lr
 8006718:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800671c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006720:	b29b      	uxth	r3, r3
 8006722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006726:	45b9      	cmp	r9, r7
 8006728:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800672c:	f840 3b04 	str.w	r3, [r0], #4
 8006730:	d2e8      	bcs.n	8006704 <quorem+0xb0>
 8006732:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006736:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800673a:	b92a      	cbnz	r2, 8006748 <quorem+0xf4>
 800673c:	3b04      	subs	r3, #4
 800673e:	429e      	cmp	r6, r3
 8006740:	461a      	mov	r2, r3
 8006742:	d30b      	bcc.n	800675c <quorem+0x108>
 8006744:	f8c8 4010 	str.w	r4, [r8, #16]
 8006748:	4628      	mov	r0, r5
 800674a:	b003      	add	sp, #12
 800674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	3b04      	subs	r3, #4
 8006754:	2a00      	cmp	r2, #0
 8006756:	d1ca      	bne.n	80066ee <quorem+0x9a>
 8006758:	3c01      	subs	r4, #1
 800675a:	e7c5      	b.n	80066e8 <quorem+0x94>
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	3b04      	subs	r3, #4
 8006760:	2a00      	cmp	r2, #0
 8006762:	d1ef      	bne.n	8006744 <quorem+0xf0>
 8006764:	3c01      	subs	r4, #1
 8006766:	e7ea      	b.n	800673e <quorem+0xea>
 8006768:	2000      	movs	r0, #0
 800676a:	e7ee      	b.n	800674a <quorem+0xf6>
 800676c:	0000      	movs	r0, r0
	...

08006770 <_dtoa_r>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	ec57 6b10 	vmov	r6, r7, d0
 8006778:	b097      	sub	sp, #92	; 0x5c
 800677a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800677c:	9106      	str	r1, [sp, #24]
 800677e:	4604      	mov	r4, r0
 8006780:	920b      	str	r2, [sp, #44]	; 0x2c
 8006782:	9312      	str	r3, [sp, #72]	; 0x48
 8006784:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006788:	e9cd 6700 	strd	r6, r7, [sp]
 800678c:	b93d      	cbnz	r5, 800679e <_dtoa_r+0x2e>
 800678e:	2010      	movs	r0, #16
 8006790:	f7fe f97a 	bl	8004a88 <malloc>
 8006794:	6260      	str	r0, [r4, #36]	; 0x24
 8006796:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800679a:	6005      	str	r5, [r0, #0]
 800679c:	60c5      	str	r5, [r0, #12]
 800679e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067a0:	6819      	ldr	r1, [r3, #0]
 80067a2:	b151      	cbz	r1, 80067ba <_dtoa_r+0x4a>
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	604a      	str	r2, [r1, #4]
 80067a8:	2301      	movs	r3, #1
 80067aa:	4093      	lsls	r3, r2
 80067ac:	608b      	str	r3, [r1, #8]
 80067ae:	4620      	mov	r0, r4
 80067b0:	f001 f918 	bl	80079e4 <_Bfree>
 80067b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	1e3b      	subs	r3, r7, #0
 80067bc:	bfbb      	ittet	lt
 80067be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067c2:	9301      	strlt	r3, [sp, #4]
 80067c4:	2300      	movge	r3, #0
 80067c6:	2201      	movlt	r2, #1
 80067c8:	bfac      	ite	ge
 80067ca:	f8c8 3000 	strge.w	r3, [r8]
 80067ce:	f8c8 2000 	strlt.w	r2, [r8]
 80067d2:	4baf      	ldr	r3, [pc, #700]	; (8006a90 <_dtoa_r+0x320>)
 80067d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80067d8:	ea33 0308 	bics.w	r3, r3, r8
 80067dc:	d114      	bne.n	8006808 <_dtoa_r+0x98>
 80067de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	b923      	cbnz	r3, 80067f4 <_dtoa_r+0x84>
 80067ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f000 8542 	beq.w	8007278 <_dtoa_r+0xb08>
 80067f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006aa4 <_dtoa_r+0x334>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 8544 	beq.w	8007288 <_dtoa_r+0xb18>
 8006800:	f10b 0303 	add.w	r3, fp, #3
 8006804:	f000 bd3e 	b.w	8007284 <_dtoa_r+0xb14>
 8006808:	e9dd 6700 	ldrd	r6, r7, [sp]
 800680c:	2200      	movs	r2, #0
 800680e:	2300      	movs	r3, #0
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7fa f960 	bl	8000ad8 <__aeabi_dcmpeq>
 8006818:	4681      	mov	r9, r0
 800681a:	b168      	cbz	r0, 8006838 <_dtoa_r+0xc8>
 800681c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800681e:	2301      	movs	r3, #1
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8524 	beq.w	8007272 <_dtoa_r+0xb02>
 800682a:	4b9a      	ldr	r3, [pc, #616]	; (8006a94 <_dtoa_r+0x324>)
 800682c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800682e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	f000 bd28 	b.w	8007288 <_dtoa_r+0xb18>
 8006838:	aa14      	add	r2, sp, #80	; 0x50
 800683a:	a915      	add	r1, sp, #84	; 0x54
 800683c:	ec47 6b10 	vmov	d0, r6, r7
 8006840:	4620      	mov	r0, r4
 8006842:	f001 fbdd 	bl	8008000 <__d2b>
 8006846:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800684a:	9004      	str	r0, [sp, #16]
 800684c:	2d00      	cmp	r5, #0
 800684e:	d07c      	beq.n	800694a <_dtoa_r+0x1da>
 8006850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006854:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006858:	46b2      	mov	sl, r6
 800685a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800685e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006862:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006866:	2200      	movs	r2, #0
 8006868:	4b8b      	ldr	r3, [pc, #556]	; (8006a98 <_dtoa_r+0x328>)
 800686a:	4650      	mov	r0, sl
 800686c:	4659      	mov	r1, fp
 800686e:	f7f9 fd13 	bl	8000298 <__aeabi_dsub>
 8006872:	a381      	add	r3, pc, #516	; (adr r3, 8006a78 <_dtoa_r+0x308>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7f9 fec6 	bl	8000608 <__aeabi_dmul>
 800687c:	a380      	add	r3, pc, #512	; (adr r3, 8006a80 <_dtoa_r+0x310>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fd0b 	bl	800029c <__adddf3>
 8006886:	4606      	mov	r6, r0
 8006888:	4628      	mov	r0, r5
 800688a:	460f      	mov	r7, r1
 800688c:	f7f9 fe52 	bl	8000534 <__aeabi_i2d>
 8006890:	a37d      	add	r3, pc, #500	; (adr r3, 8006a88 <_dtoa_r+0x318>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 feb7 	bl	8000608 <__aeabi_dmul>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7f9 fcfb 	bl	800029c <__adddf3>
 80068a6:	4606      	mov	r6, r0
 80068a8:	460f      	mov	r7, r1
 80068aa:	f7fa f95d 	bl	8000b68 <__aeabi_d2iz>
 80068ae:	2200      	movs	r2, #0
 80068b0:	4682      	mov	sl, r0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4630      	mov	r0, r6
 80068b6:	4639      	mov	r1, r7
 80068b8:	f7fa f918 	bl	8000aec <__aeabi_dcmplt>
 80068bc:	b148      	cbz	r0, 80068d2 <_dtoa_r+0x162>
 80068be:	4650      	mov	r0, sl
 80068c0:	f7f9 fe38 	bl	8000534 <__aeabi_i2d>
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	f7fa f906 	bl	8000ad8 <__aeabi_dcmpeq>
 80068cc:	b908      	cbnz	r0, 80068d2 <_dtoa_r+0x162>
 80068ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068d2:	f1ba 0f16 	cmp.w	sl, #22
 80068d6:	d859      	bhi.n	800698c <_dtoa_r+0x21c>
 80068d8:	4970      	ldr	r1, [pc, #448]	; (8006a9c <_dtoa_r+0x32c>)
 80068da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80068de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068e6:	f7fa f91f 	bl	8000b28 <__aeabi_dcmpgt>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d050      	beq.n	8006990 <_dtoa_r+0x220>
 80068ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068f2:	2300      	movs	r3, #0
 80068f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80068f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068f8:	1b5d      	subs	r5, r3, r5
 80068fa:	f1b5 0801 	subs.w	r8, r5, #1
 80068fe:	bf49      	itett	mi
 8006900:	f1c5 0301 	rsbmi	r3, r5, #1
 8006904:	2300      	movpl	r3, #0
 8006906:	9305      	strmi	r3, [sp, #20]
 8006908:	f04f 0800 	movmi.w	r8, #0
 800690c:	bf58      	it	pl
 800690e:	9305      	strpl	r3, [sp, #20]
 8006910:	f1ba 0f00 	cmp.w	sl, #0
 8006914:	db3e      	blt.n	8006994 <_dtoa_r+0x224>
 8006916:	2300      	movs	r3, #0
 8006918:	44d0      	add	r8, sl
 800691a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800691e:	9307      	str	r3, [sp, #28]
 8006920:	9b06      	ldr	r3, [sp, #24]
 8006922:	2b09      	cmp	r3, #9
 8006924:	f200 8090 	bhi.w	8006a48 <_dtoa_r+0x2d8>
 8006928:	2b05      	cmp	r3, #5
 800692a:	bfc4      	itt	gt
 800692c:	3b04      	subgt	r3, #4
 800692e:	9306      	strgt	r3, [sp, #24]
 8006930:	9b06      	ldr	r3, [sp, #24]
 8006932:	f1a3 0302 	sub.w	r3, r3, #2
 8006936:	bfcc      	ite	gt
 8006938:	2500      	movgt	r5, #0
 800693a:	2501      	movle	r5, #1
 800693c:	2b03      	cmp	r3, #3
 800693e:	f200 808f 	bhi.w	8006a60 <_dtoa_r+0x2f0>
 8006942:	e8df f003 	tbb	[pc, r3]
 8006946:	7f7d      	.short	0x7f7d
 8006948:	7131      	.short	0x7131
 800694a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800694e:	441d      	add	r5, r3
 8006950:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006954:	2820      	cmp	r0, #32
 8006956:	dd13      	ble.n	8006980 <_dtoa_r+0x210>
 8006958:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800695c:	9b00      	ldr	r3, [sp, #0]
 800695e:	fa08 f800 	lsl.w	r8, r8, r0
 8006962:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006966:	fa23 f000 	lsr.w	r0, r3, r0
 800696a:	ea48 0000 	orr.w	r0, r8, r0
 800696e:	f7f9 fdd1 	bl	8000514 <__aeabi_ui2d>
 8006972:	2301      	movs	r3, #1
 8006974:	4682      	mov	sl, r0
 8006976:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800697a:	3d01      	subs	r5, #1
 800697c:	9313      	str	r3, [sp, #76]	; 0x4c
 800697e:	e772      	b.n	8006866 <_dtoa_r+0xf6>
 8006980:	9b00      	ldr	r3, [sp, #0]
 8006982:	f1c0 0020 	rsb	r0, r0, #32
 8006986:	fa03 f000 	lsl.w	r0, r3, r0
 800698a:	e7f0      	b.n	800696e <_dtoa_r+0x1fe>
 800698c:	2301      	movs	r3, #1
 800698e:	e7b1      	b.n	80068f4 <_dtoa_r+0x184>
 8006990:	900f      	str	r0, [sp, #60]	; 0x3c
 8006992:	e7b0      	b.n	80068f6 <_dtoa_r+0x186>
 8006994:	9b05      	ldr	r3, [sp, #20]
 8006996:	eba3 030a 	sub.w	r3, r3, sl
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	f1ca 0300 	rsb	r3, sl, #0
 80069a0:	9307      	str	r3, [sp, #28]
 80069a2:	2300      	movs	r3, #0
 80069a4:	930e      	str	r3, [sp, #56]	; 0x38
 80069a6:	e7bb      	b.n	8006920 <_dtoa_r+0x1b0>
 80069a8:	2301      	movs	r3, #1
 80069aa:	930a      	str	r3, [sp, #40]	; 0x28
 80069ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dd59      	ble.n	8006a66 <_dtoa_r+0x2f6>
 80069b2:	9302      	str	r3, [sp, #8]
 80069b4:	4699      	mov	r9, r3
 80069b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069b8:	2200      	movs	r2, #0
 80069ba:	6072      	str	r2, [r6, #4]
 80069bc:	2204      	movs	r2, #4
 80069be:	f102 0014 	add.w	r0, r2, #20
 80069c2:	4298      	cmp	r0, r3
 80069c4:	6871      	ldr	r1, [r6, #4]
 80069c6:	d953      	bls.n	8006a70 <_dtoa_r+0x300>
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 ffd7 	bl	800797c <_Balloc>
 80069ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069d0:	6030      	str	r0, [r6, #0]
 80069d2:	f1b9 0f0e 	cmp.w	r9, #14
 80069d6:	f8d3 b000 	ldr.w	fp, [r3]
 80069da:	f200 80e6 	bhi.w	8006baa <_dtoa_r+0x43a>
 80069de:	2d00      	cmp	r5, #0
 80069e0:	f000 80e3 	beq.w	8006baa <_dtoa_r+0x43a>
 80069e4:	ed9d 7b00 	vldr	d7, [sp]
 80069e8:	f1ba 0f00 	cmp.w	sl, #0
 80069ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80069f0:	dd74      	ble.n	8006adc <_dtoa_r+0x36c>
 80069f2:	4a2a      	ldr	r2, [pc, #168]	; (8006a9c <_dtoa_r+0x32c>)
 80069f4:	f00a 030f 	and.w	r3, sl, #15
 80069f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069fc:	ed93 7b00 	vldr	d7, [r3]
 8006a00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006a04:	06f0      	lsls	r0, r6, #27
 8006a06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006a0a:	d565      	bpl.n	8006ad8 <_dtoa_r+0x368>
 8006a0c:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <_dtoa_r+0x330>)
 8006a0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a16:	f7f9 ff21 	bl	800085c <__aeabi_ddiv>
 8006a1a:	e9cd 0100 	strd	r0, r1, [sp]
 8006a1e:	f006 060f 	and.w	r6, r6, #15
 8006a22:	2503      	movs	r5, #3
 8006a24:	4f1e      	ldr	r7, [pc, #120]	; (8006aa0 <_dtoa_r+0x330>)
 8006a26:	e04c      	b.n	8006ac2 <_dtoa_r+0x352>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a2e:	4453      	add	r3, sl
 8006a30:	f103 0901 	add.w	r9, r3, #1
 8006a34:	9302      	str	r3, [sp, #8]
 8006a36:	464b      	mov	r3, r9
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	bfb8      	it	lt
 8006a3c:	2301      	movlt	r3, #1
 8006a3e:	e7ba      	b.n	80069b6 <_dtoa_r+0x246>
 8006a40:	2300      	movs	r3, #0
 8006a42:	e7b2      	b.n	80069aa <_dtoa_r+0x23a>
 8006a44:	2300      	movs	r3, #0
 8006a46:	e7f0      	b.n	8006a2a <_dtoa_r+0x2ba>
 8006a48:	2501      	movs	r5, #1
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	9306      	str	r3, [sp, #24]
 8006a4e:	950a      	str	r5, [sp, #40]	; 0x28
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a54:	9302      	str	r3, [sp, #8]
 8006a56:	4699      	mov	r9, r3
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2312      	movs	r3, #18
 8006a5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a5e:	e7aa      	b.n	80069b6 <_dtoa_r+0x246>
 8006a60:	2301      	movs	r3, #1
 8006a62:	930a      	str	r3, [sp, #40]	; 0x28
 8006a64:	e7f4      	b.n	8006a50 <_dtoa_r+0x2e0>
 8006a66:	2301      	movs	r3, #1
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	4699      	mov	r9, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	e7f5      	b.n	8006a5c <_dtoa_r+0x2ec>
 8006a70:	3101      	adds	r1, #1
 8006a72:	6071      	str	r1, [r6, #4]
 8006a74:	0052      	lsls	r2, r2, #1
 8006a76:	e7a2      	b.n	80069be <_dtoa_r+0x24e>
 8006a78:	636f4361 	.word	0x636f4361
 8006a7c:	3fd287a7 	.word	0x3fd287a7
 8006a80:	8b60c8b3 	.word	0x8b60c8b3
 8006a84:	3fc68a28 	.word	0x3fc68a28
 8006a88:	509f79fb 	.word	0x509f79fb
 8006a8c:	3fd34413 	.word	0x3fd34413
 8006a90:	7ff00000 	.word	0x7ff00000
 8006a94:	08008531 	.word	0x08008531
 8006a98:	3ff80000 	.word	0x3ff80000
 8006a9c:	08008658 	.word	0x08008658
 8006aa0:	08008630 	.word	0x08008630
 8006aa4:	080085b9 	.word	0x080085b9
 8006aa8:	07f1      	lsls	r1, r6, #31
 8006aaa:	d508      	bpl.n	8006abe <_dtoa_r+0x34e>
 8006aac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab4:	f7f9 fda8 	bl	8000608 <__aeabi_dmul>
 8006ab8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006abc:	3501      	adds	r5, #1
 8006abe:	1076      	asrs	r6, r6, #1
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	2e00      	cmp	r6, #0
 8006ac4:	d1f0      	bne.n	8006aa8 <_dtoa_r+0x338>
 8006ac6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ace:	f7f9 fec5 	bl	800085c <__aeabi_ddiv>
 8006ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8006ad6:	e01a      	b.n	8006b0e <_dtoa_r+0x39e>
 8006ad8:	2502      	movs	r5, #2
 8006ada:	e7a3      	b.n	8006a24 <_dtoa_r+0x2b4>
 8006adc:	f000 80a0 	beq.w	8006c20 <_dtoa_r+0x4b0>
 8006ae0:	f1ca 0600 	rsb	r6, sl, #0
 8006ae4:	4b9f      	ldr	r3, [pc, #636]	; (8006d64 <_dtoa_r+0x5f4>)
 8006ae6:	4fa0      	ldr	r7, [pc, #640]	; (8006d68 <_dtoa_r+0x5f8>)
 8006ae8:	f006 020f 	and.w	r2, r6, #15
 8006aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006af8:	f7f9 fd86 	bl	8000608 <__aeabi_dmul>
 8006afc:	e9cd 0100 	strd	r0, r1, [sp]
 8006b00:	1136      	asrs	r6, r6, #4
 8006b02:	2300      	movs	r3, #0
 8006b04:	2502      	movs	r5, #2
 8006b06:	2e00      	cmp	r6, #0
 8006b08:	d17f      	bne.n	8006c0a <_dtoa_r+0x49a>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e1      	bne.n	8006ad2 <_dtoa_r+0x362>
 8006b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8087 	beq.w	8006c24 <_dtoa_r+0x4b4>
 8006b16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4b93      	ldr	r3, [pc, #588]	; (8006d6c <_dtoa_r+0x5fc>)
 8006b1e:	4630      	mov	r0, r6
 8006b20:	4639      	mov	r1, r7
 8006b22:	f7f9 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d07c      	beq.n	8006c24 <_dtoa_r+0x4b4>
 8006b2a:	f1b9 0f00 	cmp.w	r9, #0
 8006b2e:	d079      	beq.n	8006c24 <_dtoa_r+0x4b4>
 8006b30:	9b02      	ldr	r3, [sp, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	dd35      	ble.n	8006ba2 <_dtoa_r+0x432>
 8006b36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006b3a:	9308      	str	r3, [sp, #32]
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4b8b      	ldr	r3, [pc, #556]	; (8006d70 <_dtoa_r+0x600>)
 8006b42:	4630      	mov	r0, r6
 8006b44:	f7f9 fd60 	bl	8000608 <__aeabi_dmul>
 8006b48:	e9cd 0100 	strd	r0, r1, [sp]
 8006b4c:	9f02      	ldr	r7, [sp, #8]
 8006b4e:	3501      	adds	r5, #1
 8006b50:	4628      	mov	r0, r5
 8006b52:	f7f9 fcef 	bl	8000534 <__aeabi_i2d>
 8006b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b5a:	f7f9 fd55 	bl	8000608 <__aeabi_dmul>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4b84      	ldr	r3, [pc, #528]	; (8006d74 <_dtoa_r+0x604>)
 8006b62:	f7f9 fb9b 	bl	800029c <__adddf3>
 8006b66:	4605      	mov	r5, r0
 8006b68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006b6c:	2f00      	cmp	r7, #0
 8006b6e:	d15d      	bne.n	8006c2c <_dtoa_r+0x4bc>
 8006b70:	2200      	movs	r2, #0
 8006b72:	4b81      	ldr	r3, [pc, #516]	; (8006d78 <_dtoa_r+0x608>)
 8006b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b78:	f7f9 fb8e 	bl	8000298 <__aeabi_dsub>
 8006b7c:	462a      	mov	r2, r5
 8006b7e:	4633      	mov	r3, r6
 8006b80:	e9cd 0100 	strd	r0, r1, [sp]
 8006b84:	f7f9 ffd0 	bl	8000b28 <__aeabi_dcmpgt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f040 8288 	bne.w	800709e <_dtoa_r+0x92e>
 8006b8e:	462a      	mov	r2, r5
 8006b90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b98:	f7f9 ffa8 	bl	8000aec <__aeabi_dcmplt>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f040 827c 	bne.w	800709a <_dtoa_r+0x92a>
 8006ba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8006baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f2c0 8150 	blt.w	8006e52 <_dtoa_r+0x6e2>
 8006bb2:	f1ba 0f0e 	cmp.w	sl, #14
 8006bb6:	f300 814c 	bgt.w	8006e52 <_dtoa_r+0x6e2>
 8006bba:	4b6a      	ldr	r3, [pc, #424]	; (8006d64 <_dtoa_r+0x5f4>)
 8006bbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006bc0:	ed93 7b00 	vldr	d7, [r3]
 8006bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006bcc:	f280 80d8 	bge.w	8006d80 <_dtoa_r+0x610>
 8006bd0:	f1b9 0f00 	cmp.w	r9, #0
 8006bd4:	f300 80d4 	bgt.w	8006d80 <_dtoa_r+0x610>
 8006bd8:	f040 825e 	bne.w	8007098 <_dtoa_r+0x928>
 8006bdc:	2200      	movs	r2, #0
 8006bde:	4b66      	ldr	r3, [pc, #408]	; (8006d78 <_dtoa_r+0x608>)
 8006be0:	ec51 0b17 	vmov	r0, r1, d7
 8006be4:	f7f9 fd10 	bl	8000608 <__aeabi_dmul>
 8006be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bec:	f7f9 ff92 	bl	8000b14 <__aeabi_dcmpge>
 8006bf0:	464f      	mov	r7, r9
 8006bf2:	464e      	mov	r6, r9
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f040 8234 	bne.w	8007062 <_dtoa_r+0x8f2>
 8006bfa:	2331      	movs	r3, #49	; 0x31
 8006bfc:	f10b 0501 	add.w	r5, fp, #1
 8006c00:	f88b 3000 	strb.w	r3, [fp]
 8006c04:	f10a 0a01 	add.w	sl, sl, #1
 8006c08:	e22f      	b.n	800706a <_dtoa_r+0x8fa>
 8006c0a:	07f2      	lsls	r2, r6, #31
 8006c0c:	d505      	bpl.n	8006c1a <_dtoa_r+0x4aa>
 8006c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c12:	f7f9 fcf9 	bl	8000608 <__aeabi_dmul>
 8006c16:	3501      	adds	r5, #1
 8006c18:	2301      	movs	r3, #1
 8006c1a:	1076      	asrs	r6, r6, #1
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	e772      	b.n	8006b06 <_dtoa_r+0x396>
 8006c20:	2502      	movs	r5, #2
 8006c22:	e774      	b.n	8006b0e <_dtoa_r+0x39e>
 8006c24:	f8cd a020 	str.w	sl, [sp, #32]
 8006c28:	464f      	mov	r7, r9
 8006c2a:	e791      	b.n	8006b50 <_dtoa_r+0x3e0>
 8006c2c:	4b4d      	ldr	r3, [pc, #308]	; (8006d64 <_dtoa_r+0x5f4>)
 8006c2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d047      	beq.n	8006ccc <_dtoa_r+0x55c>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	2000      	movs	r0, #0
 8006c42:	494e      	ldr	r1, [pc, #312]	; (8006d7c <_dtoa_r+0x60c>)
 8006c44:	f7f9 fe0a 	bl	800085c <__aeabi_ddiv>
 8006c48:	462a      	mov	r2, r5
 8006c4a:	4633      	mov	r3, r6
 8006c4c:	f7f9 fb24 	bl	8000298 <__aeabi_dsub>
 8006c50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006c54:	465d      	mov	r5, fp
 8006c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c5a:	f7f9 ff85 	bl	8000b68 <__aeabi_d2iz>
 8006c5e:	4606      	mov	r6, r0
 8006c60:	f7f9 fc68 	bl	8000534 <__aeabi_i2d>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006c6c:	f7f9 fb14 	bl	8000298 <__aeabi_dsub>
 8006c70:	3630      	adds	r6, #48	; 0x30
 8006c72:	f805 6b01 	strb.w	r6, [r5], #1
 8006c76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c7a:	e9cd 0100 	strd	r0, r1, [sp]
 8006c7e:	f7f9 ff35 	bl	8000aec <__aeabi_dcmplt>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d163      	bne.n	8006d4e <_dtoa_r+0x5de>
 8006c86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	4937      	ldr	r1, [pc, #220]	; (8006d6c <_dtoa_r+0x5fc>)
 8006c8e:	f7f9 fb03 	bl	8000298 <__aeabi_dsub>
 8006c92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c96:	f7f9 ff29 	bl	8000aec <__aeabi_dcmplt>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f040 80b7 	bne.w	8006e0e <_dtoa_r+0x69e>
 8006ca0:	eba5 030b 	sub.w	r3, r5, fp
 8006ca4:	429f      	cmp	r7, r3
 8006ca6:	f77f af7c 	ble.w	8006ba2 <_dtoa_r+0x432>
 8006caa:	2200      	movs	r2, #0
 8006cac:	4b30      	ldr	r3, [pc, #192]	; (8006d70 <_dtoa_r+0x600>)
 8006cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cb2:	f7f9 fca9 	bl	8000608 <__aeabi_dmul>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006cbc:	4b2c      	ldr	r3, [pc, #176]	; (8006d70 <_dtoa_r+0x600>)
 8006cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cc2:	f7f9 fca1 	bl	8000608 <__aeabi_dmul>
 8006cc6:	e9cd 0100 	strd	r0, r1, [sp]
 8006cca:	e7c4      	b.n	8006c56 <_dtoa_r+0x4e6>
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4633      	mov	r3, r6
 8006cd0:	f7f9 fc9a 	bl	8000608 <__aeabi_dmul>
 8006cd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006cd8:	eb0b 0507 	add.w	r5, fp, r7
 8006cdc:	465e      	mov	r6, fp
 8006cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ce2:	f7f9 ff41 	bl	8000b68 <__aeabi_d2iz>
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	f7f9 fc24 	bl	8000534 <__aeabi_i2d>
 8006cec:	3730      	adds	r7, #48	; 0x30
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cf6:	f7f9 facf 	bl	8000298 <__aeabi_dsub>
 8006cfa:	f806 7b01 	strb.w	r7, [r6], #1
 8006cfe:	42ae      	cmp	r6, r5
 8006d00:	e9cd 0100 	strd	r0, r1, [sp]
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	d126      	bne.n	8006d58 <_dtoa_r+0x5e8>
 8006d0a:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <_dtoa_r+0x60c>)
 8006d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d10:	f7f9 fac4 	bl	800029c <__adddf3>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d1c:	f7f9 ff04 	bl	8000b28 <__aeabi_dcmpgt>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d174      	bne.n	8006e0e <_dtoa_r+0x69e>
 8006d24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006d28:	2000      	movs	r0, #0
 8006d2a:	4914      	ldr	r1, [pc, #80]	; (8006d7c <_dtoa_r+0x60c>)
 8006d2c:	f7f9 fab4 	bl	8000298 <__aeabi_dsub>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d38:	f7f9 fed8 	bl	8000aec <__aeabi_dcmplt>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f43f af30 	beq.w	8006ba2 <_dtoa_r+0x432>
 8006d42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d46:	2b30      	cmp	r3, #48	; 0x30
 8006d48:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006d4c:	d002      	beq.n	8006d54 <_dtoa_r+0x5e4>
 8006d4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006d52:	e04a      	b.n	8006dea <_dtoa_r+0x67a>
 8006d54:	4615      	mov	r5, r2
 8006d56:	e7f4      	b.n	8006d42 <_dtoa_r+0x5d2>
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <_dtoa_r+0x600>)
 8006d5a:	f7f9 fc55 	bl	8000608 <__aeabi_dmul>
 8006d5e:	e9cd 0100 	strd	r0, r1, [sp]
 8006d62:	e7bc      	b.n	8006cde <_dtoa_r+0x56e>
 8006d64:	08008658 	.word	0x08008658
 8006d68:	08008630 	.word	0x08008630
 8006d6c:	3ff00000 	.word	0x3ff00000
 8006d70:	40240000 	.word	0x40240000
 8006d74:	401c0000 	.word	0x401c0000
 8006d78:	40140000 	.word	0x40140000
 8006d7c:	3fe00000 	.word	0x3fe00000
 8006d80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d84:	465d      	mov	r5, fp
 8006d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 fd65 	bl	800085c <__aeabi_ddiv>
 8006d92:	f7f9 fee9 	bl	8000b68 <__aeabi_d2iz>
 8006d96:	4680      	mov	r8, r0
 8006d98:	f7f9 fbcc 	bl	8000534 <__aeabi_i2d>
 8006d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006da0:	f7f9 fc32 	bl	8000608 <__aeabi_dmul>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4630      	mov	r0, r6
 8006daa:	4639      	mov	r1, r7
 8006dac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006db0:	f7f9 fa72 	bl	8000298 <__aeabi_dsub>
 8006db4:	f805 6b01 	strb.w	r6, [r5], #1
 8006db8:	eba5 060b 	sub.w	r6, r5, fp
 8006dbc:	45b1      	cmp	r9, r6
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	d139      	bne.n	8006e38 <_dtoa_r+0x6c8>
 8006dc4:	f7f9 fa6a 	bl	800029c <__adddf3>
 8006dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dcc:	4606      	mov	r6, r0
 8006dce:	460f      	mov	r7, r1
 8006dd0:	f7f9 feaa 	bl	8000b28 <__aeabi_dcmpgt>
 8006dd4:	b9c8      	cbnz	r0, 8006e0a <_dtoa_r+0x69a>
 8006dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dda:	4630      	mov	r0, r6
 8006ddc:	4639      	mov	r1, r7
 8006dde:	f7f9 fe7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006de2:	b110      	cbz	r0, 8006dea <_dtoa_r+0x67a>
 8006de4:	f018 0f01 	tst.w	r8, #1
 8006de8:	d10f      	bne.n	8006e0a <_dtoa_r+0x69a>
 8006dea:	9904      	ldr	r1, [sp, #16]
 8006dec:	4620      	mov	r0, r4
 8006dee:	f000 fdf9 	bl	80079e4 <_Bfree>
 8006df2:	2300      	movs	r3, #0
 8006df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006df6:	702b      	strb	r3, [r5, #0]
 8006df8:	f10a 0301 	add.w	r3, sl, #1
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8241 	beq.w	8007288 <_dtoa_r+0xb18>
 8006e06:	601d      	str	r5, [r3, #0]
 8006e08:	e23e      	b.n	8007288 <_dtoa_r+0xb18>
 8006e0a:	f8cd a020 	str.w	sl, [sp, #32]
 8006e0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e12:	2a39      	cmp	r2, #57	; 0x39
 8006e14:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006e18:	d108      	bne.n	8006e2c <_dtoa_r+0x6bc>
 8006e1a:	459b      	cmp	fp, r3
 8006e1c:	d10a      	bne.n	8006e34 <_dtoa_r+0x6c4>
 8006e1e:	9b08      	ldr	r3, [sp, #32]
 8006e20:	3301      	adds	r3, #1
 8006e22:	9308      	str	r3, [sp, #32]
 8006e24:	2330      	movs	r3, #48	; 0x30
 8006e26:	f88b 3000 	strb.w	r3, [fp]
 8006e2a:	465b      	mov	r3, fp
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	3201      	adds	r2, #1
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	e78c      	b.n	8006d4e <_dtoa_r+0x5de>
 8006e34:	461d      	mov	r5, r3
 8006e36:	e7ea      	b.n	8006e0e <_dtoa_r+0x69e>
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4b9b      	ldr	r3, [pc, #620]	; (80070a8 <_dtoa_r+0x938>)
 8006e3c:	f7f9 fbe4 	bl	8000608 <__aeabi_dmul>
 8006e40:	2200      	movs	r2, #0
 8006e42:	2300      	movs	r3, #0
 8006e44:	4606      	mov	r6, r0
 8006e46:	460f      	mov	r7, r1
 8006e48:	f7f9 fe46 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d09a      	beq.n	8006d86 <_dtoa_r+0x616>
 8006e50:	e7cb      	b.n	8006dea <_dtoa_r+0x67a>
 8006e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	f000 808b 	beq.w	8006f70 <_dtoa_r+0x800>
 8006e5a:	9a06      	ldr	r2, [sp, #24]
 8006e5c:	2a01      	cmp	r2, #1
 8006e5e:	dc6e      	bgt.n	8006f3e <_dtoa_r+0x7ce>
 8006e60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e62:	2a00      	cmp	r2, #0
 8006e64:	d067      	beq.n	8006f36 <_dtoa_r+0x7c6>
 8006e66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e6a:	9f07      	ldr	r7, [sp, #28]
 8006e6c:	9d05      	ldr	r5, [sp, #20]
 8006e6e:	9a05      	ldr	r2, [sp, #20]
 8006e70:	2101      	movs	r1, #1
 8006e72:	441a      	add	r2, r3
 8006e74:	4620      	mov	r0, r4
 8006e76:	9205      	str	r2, [sp, #20]
 8006e78:	4498      	add	r8, r3
 8006e7a:	f000 fe91 	bl	8007ba0 <__i2b>
 8006e7e:	4606      	mov	r6, r0
 8006e80:	2d00      	cmp	r5, #0
 8006e82:	dd0c      	ble.n	8006e9e <_dtoa_r+0x72e>
 8006e84:	f1b8 0f00 	cmp.w	r8, #0
 8006e88:	dd09      	ble.n	8006e9e <_dtoa_r+0x72e>
 8006e8a:	4545      	cmp	r5, r8
 8006e8c:	9a05      	ldr	r2, [sp, #20]
 8006e8e:	462b      	mov	r3, r5
 8006e90:	bfa8      	it	ge
 8006e92:	4643      	movge	r3, r8
 8006e94:	1ad2      	subs	r2, r2, r3
 8006e96:	9205      	str	r2, [sp, #20]
 8006e98:	1aed      	subs	r5, r5, r3
 8006e9a:	eba8 0803 	sub.w	r8, r8, r3
 8006e9e:	9b07      	ldr	r3, [sp, #28]
 8006ea0:	b1eb      	cbz	r3, 8006ede <_dtoa_r+0x76e>
 8006ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d067      	beq.n	8006f78 <_dtoa_r+0x808>
 8006ea8:	b18f      	cbz	r7, 8006ece <_dtoa_r+0x75e>
 8006eaa:	4631      	mov	r1, r6
 8006eac:	463a      	mov	r2, r7
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f000 ff16 	bl	8007ce0 <__pow5mult>
 8006eb4:	9a04      	ldr	r2, [sp, #16]
 8006eb6:	4601      	mov	r1, r0
 8006eb8:	4606      	mov	r6, r0
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 fe79 	bl	8007bb2 <__multiply>
 8006ec0:	9904      	ldr	r1, [sp, #16]
 8006ec2:	9008      	str	r0, [sp, #32]
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fd8d 	bl	80079e4 <_Bfree>
 8006eca:	9b08      	ldr	r3, [sp, #32]
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	9b07      	ldr	r3, [sp, #28]
 8006ed0:	1bda      	subs	r2, r3, r7
 8006ed2:	d004      	beq.n	8006ede <_dtoa_r+0x76e>
 8006ed4:	9904      	ldr	r1, [sp, #16]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 ff02 	bl	8007ce0 <__pow5mult>
 8006edc:	9004      	str	r0, [sp, #16]
 8006ede:	2101      	movs	r1, #1
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 fe5d 	bl	8007ba0 <__i2b>
 8006ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ee8:	4607      	mov	r7, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 81d0 	beq.w	8007290 <_dtoa_r+0xb20>
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fef3 	bl	8007ce0 <__pow5mult>
 8006efa:	9b06      	ldr	r3, [sp, #24]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	4607      	mov	r7, r0
 8006f00:	dc40      	bgt.n	8006f84 <_dtoa_r+0x814>
 8006f02:	9b00      	ldr	r3, [sp, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d139      	bne.n	8006f7c <_dtoa_r+0x80c>
 8006f08:	9b01      	ldr	r3, [sp, #4]
 8006f0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d136      	bne.n	8006f80 <_dtoa_r+0x810>
 8006f12:	9b01      	ldr	r3, [sp, #4]
 8006f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	0d1b      	lsrs	r3, r3, #20
 8006f1a:	051b      	lsls	r3, r3, #20
 8006f1c:	b12b      	cbz	r3, 8006f2a <_dtoa_r+0x7ba>
 8006f1e:	9b05      	ldr	r3, [sp, #20]
 8006f20:	3301      	adds	r3, #1
 8006f22:	9305      	str	r3, [sp, #20]
 8006f24:	f108 0801 	add.w	r8, r8, #1
 8006f28:	2301      	movs	r3, #1
 8006f2a:	9307      	str	r3, [sp, #28]
 8006f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d12a      	bne.n	8006f88 <_dtoa_r+0x818>
 8006f32:	2001      	movs	r0, #1
 8006f34:	e030      	b.n	8006f98 <_dtoa_r+0x828>
 8006f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f3c:	e795      	b.n	8006e6a <_dtoa_r+0x6fa>
 8006f3e:	9b07      	ldr	r3, [sp, #28]
 8006f40:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006f44:	42bb      	cmp	r3, r7
 8006f46:	bfbf      	itttt	lt
 8006f48:	9b07      	ldrlt	r3, [sp, #28]
 8006f4a:	9707      	strlt	r7, [sp, #28]
 8006f4c:	1afa      	sublt	r2, r7, r3
 8006f4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006f50:	bfbb      	ittet	lt
 8006f52:	189b      	addlt	r3, r3, r2
 8006f54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006f56:	1bdf      	subge	r7, r3, r7
 8006f58:	2700      	movlt	r7, #0
 8006f5a:	f1b9 0f00 	cmp.w	r9, #0
 8006f5e:	bfb5      	itete	lt
 8006f60:	9b05      	ldrlt	r3, [sp, #20]
 8006f62:	9d05      	ldrge	r5, [sp, #20]
 8006f64:	eba3 0509 	sublt.w	r5, r3, r9
 8006f68:	464b      	movge	r3, r9
 8006f6a:	bfb8      	it	lt
 8006f6c:	2300      	movlt	r3, #0
 8006f6e:	e77e      	b.n	8006e6e <_dtoa_r+0x6fe>
 8006f70:	9f07      	ldr	r7, [sp, #28]
 8006f72:	9d05      	ldr	r5, [sp, #20]
 8006f74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006f76:	e783      	b.n	8006e80 <_dtoa_r+0x710>
 8006f78:	9a07      	ldr	r2, [sp, #28]
 8006f7a:	e7ab      	b.n	8006ed4 <_dtoa_r+0x764>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e7d4      	b.n	8006f2a <_dtoa_r+0x7ba>
 8006f80:	9b00      	ldr	r3, [sp, #0]
 8006f82:	e7d2      	b.n	8006f2a <_dtoa_r+0x7ba>
 8006f84:	2300      	movs	r3, #0
 8006f86:	9307      	str	r3, [sp, #28]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006f8e:	6918      	ldr	r0, [r3, #16]
 8006f90:	f000 fdb8 	bl	8007b04 <__hi0bits>
 8006f94:	f1c0 0020 	rsb	r0, r0, #32
 8006f98:	4440      	add	r0, r8
 8006f9a:	f010 001f 	ands.w	r0, r0, #31
 8006f9e:	d047      	beq.n	8007030 <_dtoa_r+0x8c0>
 8006fa0:	f1c0 0320 	rsb	r3, r0, #32
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	dd3b      	ble.n	8007020 <_dtoa_r+0x8b0>
 8006fa8:	9b05      	ldr	r3, [sp, #20]
 8006faa:	f1c0 001c 	rsb	r0, r0, #28
 8006fae:	4403      	add	r3, r0
 8006fb0:	9305      	str	r3, [sp, #20]
 8006fb2:	4405      	add	r5, r0
 8006fb4:	4480      	add	r8, r0
 8006fb6:	9b05      	ldr	r3, [sp, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dd05      	ble.n	8006fc8 <_dtoa_r+0x858>
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	9904      	ldr	r1, [sp, #16]
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f000 fedb 	bl	8007d7c <__lshift>
 8006fc6:	9004      	str	r0, [sp, #16]
 8006fc8:	f1b8 0f00 	cmp.w	r8, #0
 8006fcc:	dd05      	ble.n	8006fda <_dtoa_r+0x86a>
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 fed2 	bl	8007d7c <__lshift>
 8006fd8:	4607      	mov	r7, r0
 8006fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fdc:	b353      	cbz	r3, 8007034 <_dtoa_r+0x8c4>
 8006fde:	4639      	mov	r1, r7
 8006fe0:	9804      	ldr	r0, [sp, #16]
 8006fe2:	f000 ff1f 	bl	8007e24 <__mcmp>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	da24      	bge.n	8007034 <_dtoa_r+0x8c4>
 8006fea:	2300      	movs	r3, #0
 8006fec:	220a      	movs	r2, #10
 8006fee:	9904      	ldr	r1, [sp, #16]
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 fd0e 	bl	8007a12 <__multadd>
 8006ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff8:	9004      	str	r0, [sp, #16]
 8006ffa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 814d 	beq.w	800729e <_dtoa_r+0xb2e>
 8007004:	2300      	movs	r3, #0
 8007006:	4631      	mov	r1, r6
 8007008:	220a      	movs	r2, #10
 800700a:	4620      	mov	r0, r4
 800700c:	f000 fd01 	bl	8007a12 <__multadd>
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	4606      	mov	r6, r0
 8007016:	dc4f      	bgt.n	80070b8 <_dtoa_r+0x948>
 8007018:	9b06      	ldr	r3, [sp, #24]
 800701a:	2b02      	cmp	r3, #2
 800701c:	dd4c      	ble.n	80070b8 <_dtoa_r+0x948>
 800701e:	e011      	b.n	8007044 <_dtoa_r+0x8d4>
 8007020:	d0c9      	beq.n	8006fb6 <_dtoa_r+0x846>
 8007022:	9a05      	ldr	r2, [sp, #20]
 8007024:	331c      	adds	r3, #28
 8007026:	441a      	add	r2, r3
 8007028:	9205      	str	r2, [sp, #20]
 800702a:	441d      	add	r5, r3
 800702c:	4498      	add	r8, r3
 800702e:	e7c2      	b.n	8006fb6 <_dtoa_r+0x846>
 8007030:	4603      	mov	r3, r0
 8007032:	e7f6      	b.n	8007022 <_dtoa_r+0x8b2>
 8007034:	f1b9 0f00 	cmp.w	r9, #0
 8007038:	dc38      	bgt.n	80070ac <_dtoa_r+0x93c>
 800703a:	9b06      	ldr	r3, [sp, #24]
 800703c:	2b02      	cmp	r3, #2
 800703e:	dd35      	ble.n	80070ac <_dtoa_r+0x93c>
 8007040:	f8cd 9008 	str.w	r9, [sp, #8]
 8007044:	9b02      	ldr	r3, [sp, #8]
 8007046:	b963      	cbnz	r3, 8007062 <_dtoa_r+0x8f2>
 8007048:	4639      	mov	r1, r7
 800704a:	2205      	movs	r2, #5
 800704c:	4620      	mov	r0, r4
 800704e:	f000 fce0 	bl	8007a12 <__multadd>
 8007052:	4601      	mov	r1, r0
 8007054:	4607      	mov	r7, r0
 8007056:	9804      	ldr	r0, [sp, #16]
 8007058:	f000 fee4 	bl	8007e24 <__mcmp>
 800705c:	2800      	cmp	r0, #0
 800705e:	f73f adcc 	bgt.w	8006bfa <_dtoa_r+0x48a>
 8007062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007064:	465d      	mov	r5, fp
 8007066:	ea6f 0a03 	mvn.w	sl, r3
 800706a:	f04f 0900 	mov.w	r9, #0
 800706e:	4639      	mov	r1, r7
 8007070:	4620      	mov	r0, r4
 8007072:	f000 fcb7 	bl	80079e4 <_Bfree>
 8007076:	2e00      	cmp	r6, #0
 8007078:	f43f aeb7 	beq.w	8006dea <_dtoa_r+0x67a>
 800707c:	f1b9 0f00 	cmp.w	r9, #0
 8007080:	d005      	beq.n	800708e <_dtoa_r+0x91e>
 8007082:	45b1      	cmp	r9, r6
 8007084:	d003      	beq.n	800708e <_dtoa_r+0x91e>
 8007086:	4649      	mov	r1, r9
 8007088:	4620      	mov	r0, r4
 800708a:	f000 fcab 	bl	80079e4 <_Bfree>
 800708e:	4631      	mov	r1, r6
 8007090:	4620      	mov	r0, r4
 8007092:	f000 fca7 	bl	80079e4 <_Bfree>
 8007096:	e6a8      	b.n	8006dea <_dtoa_r+0x67a>
 8007098:	2700      	movs	r7, #0
 800709a:	463e      	mov	r6, r7
 800709c:	e7e1      	b.n	8007062 <_dtoa_r+0x8f2>
 800709e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80070a2:	463e      	mov	r6, r7
 80070a4:	e5a9      	b.n	8006bfa <_dtoa_r+0x48a>
 80070a6:	bf00      	nop
 80070a8:	40240000 	.word	0x40240000
 80070ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 80fa 	beq.w	80072ac <_dtoa_r+0xb3c>
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	dd05      	ble.n	80070c8 <_dtoa_r+0x958>
 80070bc:	4631      	mov	r1, r6
 80070be:	462a      	mov	r2, r5
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 fe5b 	bl	8007d7c <__lshift>
 80070c6:	4606      	mov	r6, r0
 80070c8:	9b07      	ldr	r3, [sp, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d04c      	beq.n	8007168 <_dtoa_r+0x9f8>
 80070ce:	6871      	ldr	r1, [r6, #4]
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fc53 	bl	800797c <_Balloc>
 80070d6:	6932      	ldr	r2, [r6, #16]
 80070d8:	3202      	adds	r2, #2
 80070da:	4605      	mov	r5, r0
 80070dc:	0092      	lsls	r2, r2, #2
 80070de:	f106 010c 	add.w	r1, r6, #12
 80070e2:	300c      	adds	r0, #12
 80070e4:	f7fd fcd8 	bl	8004a98 <memcpy>
 80070e8:	2201      	movs	r2, #1
 80070ea:	4629      	mov	r1, r5
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fe45 	bl	8007d7c <__lshift>
 80070f2:	9b00      	ldr	r3, [sp, #0]
 80070f4:	f8cd b014 	str.w	fp, [sp, #20]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	46b1      	mov	r9, r6
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	4606      	mov	r6, r0
 8007102:	4639      	mov	r1, r7
 8007104:	9804      	ldr	r0, [sp, #16]
 8007106:	f7ff faa5 	bl	8006654 <quorem>
 800710a:	4649      	mov	r1, r9
 800710c:	4605      	mov	r5, r0
 800710e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007112:	9804      	ldr	r0, [sp, #16]
 8007114:	f000 fe86 	bl	8007e24 <__mcmp>
 8007118:	4632      	mov	r2, r6
 800711a:	9000      	str	r0, [sp, #0]
 800711c:	4639      	mov	r1, r7
 800711e:	4620      	mov	r0, r4
 8007120:	f000 fe9a 	bl	8007e58 <__mdiff>
 8007124:	68c3      	ldr	r3, [r0, #12]
 8007126:	4602      	mov	r2, r0
 8007128:	bb03      	cbnz	r3, 800716c <_dtoa_r+0x9fc>
 800712a:	4601      	mov	r1, r0
 800712c:	9008      	str	r0, [sp, #32]
 800712e:	9804      	ldr	r0, [sp, #16]
 8007130:	f000 fe78 	bl	8007e24 <__mcmp>
 8007134:	9a08      	ldr	r2, [sp, #32]
 8007136:	4603      	mov	r3, r0
 8007138:	4611      	mov	r1, r2
 800713a:	4620      	mov	r0, r4
 800713c:	9308      	str	r3, [sp, #32]
 800713e:	f000 fc51 	bl	80079e4 <_Bfree>
 8007142:	9b08      	ldr	r3, [sp, #32]
 8007144:	b9a3      	cbnz	r3, 8007170 <_dtoa_r+0xa00>
 8007146:	9a06      	ldr	r2, [sp, #24]
 8007148:	b992      	cbnz	r2, 8007170 <_dtoa_r+0xa00>
 800714a:	9a07      	ldr	r2, [sp, #28]
 800714c:	b982      	cbnz	r2, 8007170 <_dtoa_r+0xa00>
 800714e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007152:	d029      	beq.n	80071a8 <_dtoa_r+0xa38>
 8007154:	9b00      	ldr	r3, [sp, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	dd01      	ble.n	800715e <_dtoa_r+0x9ee>
 800715a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800715e:	9b05      	ldr	r3, [sp, #20]
 8007160:	1c5d      	adds	r5, r3, #1
 8007162:	f883 8000 	strb.w	r8, [r3]
 8007166:	e782      	b.n	800706e <_dtoa_r+0x8fe>
 8007168:	4630      	mov	r0, r6
 800716a:	e7c2      	b.n	80070f2 <_dtoa_r+0x982>
 800716c:	2301      	movs	r3, #1
 800716e:	e7e3      	b.n	8007138 <_dtoa_r+0x9c8>
 8007170:	9a00      	ldr	r2, [sp, #0]
 8007172:	2a00      	cmp	r2, #0
 8007174:	db04      	blt.n	8007180 <_dtoa_r+0xa10>
 8007176:	d125      	bne.n	80071c4 <_dtoa_r+0xa54>
 8007178:	9a06      	ldr	r2, [sp, #24]
 800717a:	bb1a      	cbnz	r2, 80071c4 <_dtoa_r+0xa54>
 800717c:	9a07      	ldr	r2, [sp, #28]
 800717e:	bb0a      	cbnz	r2, 80071c4 <_dtoa_r+0xa54>
 8007180:	2b00      	cmp	r3, #0
 8007182:	ddec      	ble.n	800715e <_dtoa_r+0x9ee>
 8007184:	2201      	movs	r2, #1
 8007186:	9904      	ldr	r1, [sp, #16]
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fdf7 	bl	8007d7c <__lshift>
 800718e:	4639      	mov	r1, r7
 8007190:	9004      	str	r0, [sp, #16]
 8007192:	f000 fe47 	bl	8007e24 <__mcmp>
 8007196:	2800      	cmp	r0, #0
 8007198:	dc03      	bgt.n	80071a2 <_dtoa_r+0xa32>
 800719a:	d1e0      	bne.n	800715e <_dtoa_r+0x9ee>
 800719c:	f018 0f01 	tst.w	r8, #1
 80071a0:	d0dd      	beq.n	800715e <_dtoa_r+0x9ee>
 80071a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80071a6:	d1d8      	bne.n	800715a <_dtoa_r+0x9ea>
 80071a8:	9b05      	ldr	r3, [sp, #20]
 80071aa:	9a05      	ldr	r2, [sp, #20]
 80071ac:	1c5d      	adds	r5, r3, #1
 80071ae:	2339      	movs	r3, #57	; 0x39
 80071b0:	7013      	strb	r3, [r2, #0]
 80071b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80071b6:	2b39      	cmp	r3, #57	; 0x39
 80071b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80071bc:	d04f      	beq.n	800725e <_dtoa_r+0xaee>
 80071be:	3301      	adds	r3, #1
 80071c0:	7013      	strb	r3, [r2, #0]
 80071c2:	e754      	b.n	800706e <_dtoa_r+0x8fe>
 80071c4:	9a05      	ldr	r2, [sp, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f102 0501 	add.w	r5, r2, #1
 80071cc:	dd06      	ble.n	80071dc <_dtoa_r+0xa6c>
 80071ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80071d2:	d0e9      	beq.n	80071a8 <_dtoa_r+0xa38>
 80071d4:	f108 0801 	add.w	r8, r8, #1
 80071d8:	9b05      	ldr	r3, [sp, #20]
 80071da:	e7c2      	b.n	8007162 <_dtoa_r+0x9f2>
 80071dc:	9a02      	ldr	r2, [sp, #8]
 80071de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80071e2:	eba5 030b 	sub.w	r3, r5, fp
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d021      	beq.n	800722e <_dtoa_r+0xabe>
 80071ea:	2300      	movs	r3, #0
 80071ec:	220a      	movs	r2, #10
 80071ee:	9904      	ldr	r1, [sp, #16]
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fc0e 	bl	8007a12 <__multadd>
 80071f6:	45b1      	cmp	r9, r6
 80071f8:	9004      	str	r0, [sp, #16]
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	f04f 020a 	mov.w	r2, #10
 8007202:	4649      	mov	r1, r9
 8007204:	4620      	mov	r0, r4
 8007206:	d105      	bne.n	8007214 <_dtoa_r+0xaa4>
 8007208:	f000 fc03 	bl	8007a12 <__multadd>
 800720c:	4681      	mov	r9, r0
 800720e:	4606      	mov	r6, r0
 8007210:	9505      	str	r5, [sp, #20]
 8007212:	e776      	b.n	8007102 <_dtoa_r+0x992>
 8007214:	f000 fbfd 	bl	8007a12 <__multadd>
 8007218:	4631      	mov	r1, r6
 800721a:	4681      	mov	r9, r0
 800721c:	2300      	movs	r3, #0
 800721e:	220a      	movs	r2, #10
 8007220:	4620      	mov	r0, r4
 8007222:	f000 fbf6 	bl	8007a12 <__multadd>
 8007226:	4606      	mov	r6, r0
 8007228:	e7f2      	b.n	8007210 <_dtoa_r+0xaa0>
 800722a:	f04f 0900 	mov.w	r9, #0
 800722e:	2201      	movs	r2, #1
 8007230:	9904      	ldr	r1, [sp, #16]
 8007232:	4620      	mov	r0, r4
 8007234:	f000 fda2 	bl	8007d7c <__lshift>
 8007238:	4639      	mov	r1, r7
 800723a:	9004      	str	r0, [sp, #16]
 800723c:	f000 fdf2 	bl	8007e24 <__mcmp>
 8007240:	2800      	cmp	r0, #0
 8007242:	dcb6      	bgt.n	80071b2 <_dtoa_r+0xa42>
 8007244:	d102      	bne.n	800724c <_dtoa_r+0xadc>
 8007246:	f018 0f01 	tst.w	r8, #1
 800724a:	d1b2      	bne.n	80071b2 <_dtoa_r+0xa42>
 800724c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007250:	2b30      	cmp	r3, #48	; 0x30
 8007252:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007256:	f47f af0a 	bne.w	800706e <_dtoa_r+0x8fe>
 800725a:	4615      	mov	r5, r2
 800725c:	e7f6      	b.n	800724c <_dtoa_r+0xadc>
 800725e:	4593      	cmp	fp, r2
 8007260:	d105      	bne.n	800726e <_dtoa_r+0xafe>
 8007262:	2331      	movs	r3, #49	; 0x31
 8007264:	f10a 0a01 	add.w	sl, sl, #1
 8007268:	f88b 3000 	strb.w	r3, [fp]
 800726c:	e6ff      	b.n	800706e <_dtoa_r+0x8fe>
 800726e:	4615      	mov	r5, r2
 8007270:	e79f      	b.n	80071b2 <_dtoa_r+0xa42>
 8007272:	f8df b064 	ldr.w	fp, [pc, #100]	; 80072d8 <_dtoa_r+0xb68>
 8007276:	e007      	b.n	8007288 <_dtoa_r+0xb18>
 8007278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800727a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80072dc <_dtoa_r+0xb6c>
 800727e:	b11b      	cbz	r3, 8007288 <_dtoa_r+0xb18>
 8007280:	f10b 0308 	add.w	r3, fp, #8
 8007284:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	4658      	mov	r0, fp
 800728a:	b017      	add	sp, #92	; 0x5c
 800728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	9b06      	ldr	r3, [sp, #24]
 8007292:	2b01      	cmp	r3, #1
 8007294:	f77f ae35 	ble.w	8006f02 <_dtoa_r+0x792>
 8007298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800729a:	9307      	str	r3, [sp, #28]
 800729c:	e649      	b.n	8006f32 <_dtoa_r+0x7c2>
 800729e:	9b02      	ldr	r3, [sp, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	dc03      	bgt.n	80072ac <_dtoa_r+0xb3c>
 80072a4:	9b06      	ldr	r3, [sp, #24]
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	f73f aecc 	bgt.w	8007044 <_dtoa_r+0x8d4>
 80072ac:	465d      	mov	r5, fp
 80072ae:	4639      	mov	r1, r7
 80072b0:	9804      	ldr	r0, [sp, #16]
 80072b2:	f7ff f9cf 	bl	8006654 <quorem>
 80072b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80072ba:	f805 8b01 	strb.w	r8, [r5], #1
 80072be:	9a02      	ldr	r2, [sp, #8]
 80072c0:	eba5 030b 	sub.w	r3, r5, fp
 80072c4:	429a      	cmp	r2, r3
 80072c6:	ddb0      	ble.n	800722a <_dtoa_r+0xaba>
 80072c8:	2300      	movs	r3, #0
 80072ca:	220a      	movs	r2, #10
 80072cc:	9904      	ldr	r1, [sp, #16]
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 fb9f 	bl	8007a12 <__multadd>
 80072d4:	9004      	str	r0, [sp, #16]
 80072d6:	e7ea      	b.n	80072ae <_dtoa_r+0xb3e>
 80072d8:	08008530 	.word	0x08008530
 80072dc:	080085b0 	.word	0x080085b0

080072e0 <rshift>:
 80072e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e2:	6906      	ldr	r6, [r0, #16]
 80072e4:	114b      	asrs	r3, r1, #5
 80072e6:	429e      	cmp	r6, r3
 80072e8:	f100 0414 	add.w	r4, r0, #20
 80072ec:	dd30      	ble.n	8007350 <rshift+0x70>
 80072ee:	f011 011f 	ands.w	r1, r1, #31
 80072f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80072f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80072fa:	d108      	bne.n	800730e <rshift+0x2e>
 80072fc:	4621      	mov	r1, r4
 80072fe:	42b2      	cmp	r2, r6
 8007300:	460b      	mov	r3, r1
 8007302:	d211      	bcs.n	8007328 <rshift+0x48>
 8007304:	f852 3b04 	ldr.w	r3, [r2], #4
 8007308:	f841 3b04 	str.w	r3, [r1], #4
 800730c:	e7f7      	b.n	80072fe <rshift+0x1e>
 800730e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007312:	f1c1 0c20 	rsb	ip, r1, #32
 8007316:	40cd      	lsrs	r5, r1
 8007318:	3204      	adds	r2, #4
 800731a:	4623      	mov	r3, r4
 800731c:	42b2      	cmp	r2, r6
 800731e:	4617      	mov	r7, r2
 8007320:	d30c      	bcc.n	800733c <rshift+0x5c>
 8007322:	601d      	str	r5, [r3, #0]
 8007324:	b105      	cbz	r5, 8007328 <rshift+0x48>
 8007326:	3304      	adds	r3, #4
 8007328:	1b1a      	subs	r2, r3, r4
 800732a:	42a3      	cmp	r3, r4
 800732c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007330:	bf08      	it	eq
 8007332:	2300      	moveq	r3, #0
 8007334:	6102      	str	r2, [r0, #16]
 8007336:	bf08      	it	eq
 8007338:	6143      	streq	r3, [r0, #20]
 800733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800733c:	683f      	ldr	r7, [r7, #0]
 800733e:	fa07 f70c 	lsl.w	r7, r7, ip
 8007342:	433d      	orrs	r5, r7
 8007344:	f843 5b04 	str.w	r5, [r3], #4
 8007348:	f852 5b04 	ldr.w	r5, [r2], #4
 800734c:	40cd      	lsrs	r5, r1
 800734e:	e7e5      	b.n	800731c <rshift+0x3c>
 8007350:	4623      	mov	r3, r4
 8007352:	e7e9      	b.n	8007328 <rshift+0x48>

08007354 <__hexdig_fun>:
 8007354:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007358:	2b09      	cmp	r3, #9
 800735a:	d802      	bhi.n	8007362 <__hexdig_fun+0xe>
 800735c:	3820      	subs	r0, #32
 800735e:	b2c0      	uxtb	r0, r0
 8007360:	4770      	bx	lr
 8007362:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007366:	2b05      	cmp	r3, #5
 8007368:	d801      	bhi.n	800736e <__hexdig_fun+0x1a>
 800736a:	3847      	subs	r0, #71	; 0x47
 800736c:	e7f7      	b.n	800735e <__hexdig_fun+0xa>
 800736e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007372:	2b05      	cmp	r3, #5
 8007374:	d801      	bhi.n	800737a <__hexdig_fun+0x26>
 8007376:	3827      	subs	r0, #39	; 0x27
 8007378:	e7f1      	b.n	800735e <__hexdig_fun+0xa>
 800737a:	2000      	movs	r0, #0
 800737c:	4770      	bx	lr

0800737e <__gethex>:
 800737e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007382:	b08b      	sub	sp, #44	; 0x2c
 8007384:	468a      	mov	sl, r1
 8007386:	9002      	str	r0, [sp, #8]
 8007388:	9816      	ldr	r0, [sp, #88]	; 0x58
 800738a:	9306      	str	r3, [sp, #24]
 800738c:	4690      	mov	r8, r2
 800738e:	f000 fad0 	bl	8007932 <__localeconv_l>
 8007392:	6803      	ldr	r3, [r0, #0]
 8007394:	9303      	str	r3, [sp, #12]
 8007396:	4618      	mov	r0, r3
 8007398:	f7f8 ff22 	bl	80001e0 <strlen>
 800739c:	9b03      	ldr	r3, [sp, #12]
 800739e:	9001      	str	r0, [sp, #4]
 80073a0:	4403      	add	r3, r0
 80073a2:	f04f 0b00 	mov.w	fp, #0
 80073a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80073aa:	9307      	str	r3, [sp, #28]
 80073ac:	f8da 3000 	ldr.w	r3, [sl]
 80073b0:	3302      	adds	r3, #2
 80073b2:	461f      	mov	r7, r3
 80073b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80073b8:	2830      	cmp	r0, #48	; 0x30
 80073ba:	d06c      	beq.n	8007496 <__gethex+0x118>
 80073bc:	f7ff ffca 	bl	8007354 <__hexdig_fun>
 80073c0:	4604      	mov	r4, r0
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d16a      	bne.n	800749c <__gethex+0x11e>
 80073c6:	9a01      	ldr	r2, [sp, #4]
 80073c8:	9903      	ldr	r1, [sp, #12]
 80073ca:	4638      	mov	r0, r7
 80073cc:	f001 f836 	bl	800843c <strncmp>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d166      	bne.n	80074a2 <__gethex+0x124>
 80073d4:	9b01      	ldr	r3, [sp, #4]
 80073d6:	5cf8      	ldrb	r0, [r7, r3]
 80073d8:	18fe      	adds	r6, r7, r3
 80073da:	f7ff ffbb 	bl	8007354 <__hexdig_fun>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d062      	beq.n	80074a8 <__gethex+0x12a>
 80073e2:	4633      	mov	r3, r6
 80073e4:	7818      	ldrb	r0, [r3, #0]
 80073e6:	2830      	cmp	r0, #48	; 0x30
 80073e8:	461f      	mov	r7, r3
 80073ea:	f103 0301 	add.w	r3, r3, #1
 80073ee:	d0f9      	beq.n	80073e4 <__gethex+0x66>
 80073f0:	f7ff ffb0 	bl	8007354 <__hexdig_fun>
 80073f4:	fab0 f580 	clz	r5, r0
 80073f8:	096d      	lsrs	r5, r5, #5
 80073fa:	4634      	mov	r4, r6
 80073fc:	f04f 0b01 	mov.w	fp, #1
 8007400:	463a      	mov	r2, r7
 8007402:	4616      	mov	r6, r2
 8007404:	3201      	adds	r2, #1
 8007406:	7830      	ldrb	r0, [r6, #0]
 8007408:	f7ff ffa4 	bl	8007354 <__hexdig_fun>
 800740c:	2800      	cmp	r0, #0
 800740e:	d1f8      	bne.n	8007402 <__gethex+0x84>
 8007410:	9a01      	ldr	r2, [sp, #4]
 8007412:	9903      	ldr	r1, [sp, #12]
 8007414:	4630      	mov	r0, r6
 8007416:	f001 f811 	bl	800843c <strncmp>
 800741a:	b950      	cbnz	r0, 8007432 <__gethex+0xb4>
 800741c:	b954      	cbnz	r4, 8007434 <__gethex+0xb6>
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	18f4      	adds	r4, r6, r3
 8007422:	4622      	mov	r2, r4
 8007424:	4616      	mov	r6, r2
 8007426:	3201      	adds	r2, #1
 8007428:	7830      	ldrb	r0, [r6, #0]
 800742a:	f7ff ff93 	bl	8007354 <__hexdig_fun>
 800742e:	2800      	cmp	r0, #0
 8007430:	d1f8      	bne.n	8007424 <__gethex+0xa6>
 8007432:	b10c      	cbz	r4, 8007438 <__gethex+0xba>
 8007434:	1ba4      	subs	r4, r4, r6
 8007436:	00a4      	lsls	r4, r4, #2
 8007438:	7833      	ldrb	r3, [r6, #0]
 800743a:	2b50      	cmp	r3, #80	; 0x50
 800743c:	d001      	beq.n	8007442 <__gethex+0xc4>
 800743e:	2b70      	cmp	r3, #112	; 0x70
 8007440:	d140      	bne.n	80074c4 <__gethex+0x146>
 8007442:	7873      	ldrb	r3, [r6, #1]
 8007444:	2b2b      	cmp	r3, #43	; 0x2b
 8007446:	d031      	beq.n	80074ac <__gethex+0x12e>
 8007448:	2b2d      	cmp	r3, #45	; 0x2d
 800744a:	d033      	beq.n	80074b4 <__gethex+0x136>
 800744c:	1c71      	adds	r1, r6, #1
 800744e:	f04f 0900 	mov.w	r9, #0
 8007452:	7808      	ldrb	r0, [r1, #0]
 8007454:	f7ff ff7e 	bl	8007354 <__hexdig_fun>
 8007458:	1e43      	subs	r3, r0, #1
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b18      	cmp	r3, #24
 800745e:	d831      	bhi.n	80074c4 <__gethex+0x146>
 8007460:	f1a0 0210 	sub.w	r2, r0, #16
 8007464:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007468:	f7ff ff74 	bl	8007354 <__hexdig_fun>
 800746c:	1e43      	subs	r3, r0, #1
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b18      	cmp	r3, #24
 8007472:	d922      	bls.n	80074ba <__gethex+0x13c>
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	d000      	beq.n	800747c <__gethex+0xfe>
 800747a:	4252      	negs	r2, r2
 800747c:	4414      	add	r4, r2
 800747e:	f8ca 1000 	str.w	r1, [sl]
 8007482:	b30d      	cbz	r5, 80074c8 <__gethex+0x14a>
 8007484:	f1bb 0f00 	cmp.w	fp, #0
 8007488:	bf0c      	ite	eq
 800748a:	2706      	moveq	r7, #6
 800748c:	2700      	movne	r7, #0
 800748e:	4638      	mov	r0, r7
 8007490:	b00b      	add	sp, #44	; 0x2c
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	f10b 0b01 	add.w	fp, fp, #1
 800749a:	e78a      	b.n	80073b2 <__gethex+0x34>
 800749c:	2500      	movs	r5, #0
 800749e:	462c      	mov	r4, r5
 80074a0:	e7ae      	b.n	8007400 <__gethex+0x82>
 80074a2:	463e      	mov	r6, r7
 80074a4:	2501      	movs	r5, #1
 80074a6:	e7c7      	b.n	8007438 <__gethex+0xba>
 80074a8:	4604      	mov	r4, r0
 80074aa:	e7fb      	b.n	80074a4 <__gethex+0x126>
 80074ac:	f04f 0900 	mov.w	r9, #0
 80074b0:	1cb1      	adds	r1, r6, #2
 80074b2:	e7ce      	b.n	8007452 <__gethex+0xd4>
 80074b4:	f04f 0901 	mov.w	r9, #1
 80074b8:	e7fa      	b.n	80074b0 <__gethex+0x132>
 80074ba:	230a      	movs	r3, #10
 80074bc:	fb03 0202 	mla	r2, r3, r2, r0
 80074c0:	3a10      	subs	r2, #16
 80074c2:	e7cf      	b.n	8007464 <__gethex+0xe6>
 80074c4:	4631      	mov	r1, r6
 80074c6:	e7da      	b.n	800747e <__gethex+0x100>
 80074c8:	1bf3      	subs	r3, r6, r7
 80074ca:	3b01      	subs	r3, #1
 80074cc:	4629      	mov	r1, r5
 80074ce:	2b07      	cmp	r3, #7
 80074d0:	dc49      	bgt.n	8007566 <__gethex+0x1e8>
 80074d2:	9802      	ldr	r0, [sp, #8]
 80074d4:	f000 fa52 	bl	800797c <_Balloc>
 80074d8:	9b01      	ldr	r3, [sp, #4]
 80074da:	f100 0914 	add.w	r9, r0, #20
 80074de:	f04f 0b00 	mov.w	fp, #0
 80074e2:	f1c3 0301 	rsb	r3, r3, #1
 80074e6:	4605      	mov	r5, r0
 80074e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80074ec:	46da      	mov	sl, fp
 80074ee:	9308      	str	r3, [sp, #32]
 80074f0:	42b7      	cmp	r7, r6
 80074f2:	d33b      	bcc.n	800756c <__gethex+0x1ee>
 80074f4:	9804      	ldr	r0, [sp, #16]
 80074f6:	f840 ab04 	str.w	sl, [r0], #4
 80074fa:	eba0 0009 	sub.w	r0, r0, r9
 80074fe:	1080      	asrs	r0, r0, #2
 8007500:	6128      	str	r0, [r5, #16]
 8007502:	0147      	lsls	r7, r0, #5
 8007504:	4650      	mov	r0, sl
 8007506:	f000 fafd 	bl	8007b04 <__hi0bits>
 800750a:	f8d8 6000 	ldr.w	r6, [r8]
 800750e:	1a3f      	subs	r7, r7, r0
 8007510:	42b7      	cmp	r7, r6
 8007512:	dd64      	ble.n	80075de <__gethex+0x260>
 8007514:	1bbf      	subs	r7, r7, r6
 8007516:	4639      	mov	r1, r7
 8007518:	4628      	mov	r0, r5
 800751a:	f000 fe0d 	bl	8008138 <__any_on>
 800751e:	4682      	mov	sl, r0
 8007520:	b178      	cbz	r0, 8007542 <__gethex+0x1c4>
 8007522:	1e7b      	subs	r3, r7, #1
 8007524:	1159      	asrs	r1, r3, #5
 8007526:	f003 021f 	and.w	r2, r3, #31
 800752a:	f04f 0a01 	mov.w	sl, #1
 800752e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007532:	fa0a f202 	lsl.w	r2, sl, r2
 8007536:	420a      	tst	r2, r1
 8007538:	d003      	beq.n	8007542 <__gethex+0x1c4>
 800753a:	4553      	cmp	r3, sl
 800753c:	dc46      	bgt.n	80075cc <__gethex+0x24e>
 800753e:	f04f 0a02 	mov.w	sl, #2
 8007542:	4639      	mov	r1, r7
 8007544:	4628      	mov	r0, r5
 8007546:	f7ff fecb 	bl	80072e0 <rshift>
 800754a:	443c      	add	r4, r7
 800754c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007550:	42a3      	cmp	r3, r4
 8007552:	da52      	bge.n	80075fa <__gethex+0x27c>
 8007554:	4629      	mov	r1, r5
 8007556:	9802      	ldr	r0, [sp, #8]
 8007558:	f000 fa44 	bl	80079e4 <_Bfree>
 800755c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800755e:	2300      	movs	r3, #0
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	27a3      	movs	r7, #163	; 0xa3
 8007564:	e793      	b.n	800748e <__gethex+0x110>
 8007566:	3101      	adds	r1, #1
 8007568:	105b      	asrs	r3, r3, #1
 800756a:	e7b0      	b.n	80074ce <__gethex+0x150>
 800756c:	1e73      	subs	r3, r6, #1
 800756e:	9305      	str	r3, [sp, #20]
 8007570:	9a07      	ldr	r2, [sp, #28]
 8007572:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007576:	4293      	cmp	r3, r2
 8007578:	d018      	beq.n	80075ac <__gethex+0x22e>
 800757a:	f1bb 0f20 	cmp.w	fp, #32
 800757e:	d107      	bne.n	8007590 <__gethex+0x212>
 8007580:	9b04      	ldr	r3, [sp, #16]
 8007582:	f8c3 a000 	str.w	sl, [r3]
 8007586:	3304      	adds	r3, #4
 8007588:	f04f 0a00 	mov.w	sl, #0
 800758c:	9304      	str	r3, [sp, #16]
 800758e:	46d3      	mov	fp, sl
 8007590:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007594:	f7ff fede 	bl	8007354 <__hexdig_fun>
 8007598:	f000 000f 	and.w	r0, r0, #15
 800759c:	fa00 f00b 	lsl.w	r0, r0, fp
 80075a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80075a4:	f10b 0b04 	add.w	fp, fp, #4
 80075a8:	9b05      	ldr	r3, [sp, #20]
 80075aa:	e00d      	b.n	80075c8 <__gethex+0x24a>
 80075ac:	9b05      	ldr	r3, [sp, #20]
 80075ae:	9a08      	ldr	r2, [sp, #32]
 80075b0:	4413      	add	r3, r2
 80075b2:	42bb      	cmp	r3, r7
 80075b4:	d3e1      	bcc.n	800757a <__gethex+0x1fc>
 80075b6:	4618      	mov	r0, r3
 80075b8:	9a01      	ldr	r2, [sp, #4]
 80075ba:	9903      	ldr	r1, [sp, #12]
 80075bc:	9309      	str	r3, [sp, #36]	; 0x24
 80075be:	f000 ff3d 	bl	800843c <strncmp>
 80075c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d1d8      	bne.n	800757a <__gethex+0x1fc>
 80075c8:	461e      	mov	r6, r3
 80075ca:	e791      	b.n	80074f0 <__gethex+0x172>
 80075cc:	1eb9      	subs	r1, r7, #2
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 fdb2 	bl	8008138 <__any_on>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d0b2      	beq.n	800753e <__gethex+0x1c0>
 80075d8:	f04f 0a03 	mov.w	sl, #3
 80075dc:	e7b1      	b.n	8007542 <__gethex+0x1c4>
 80075de:	da09      	bge.n	80075f4 <__gethex+0x276>
 80075e0:	1bf7      	subs	r7, r6, r7
 80075e2:	4629      	mov	r1, r5
 80075e4:	463a      	mov	r2, r7
 80075e6:	9802      	ldr	r0, [sp, #8]
 80075e8:	f000 fbc8 	bl	8007d7c <__lshift>
 80075ec:	1be4      	subs	r4, r4, r7
 80075ee:	4605      	mov	r5, r0
 80075f0:	f100 0914 	add.w	r9, r0, #20
 80075f4:	f04f 0a00 	mov.w	sl, #0
 80075f8:	e7a8      	b.n	800754c <__gethex+0x1ce>
 80075fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80075fe:	42a0      	cmp	r0, r4
 8007600:	dd6a      	ble.n	80076d8 <__gethex+0x35a>
 8007602:	1b04      	subs	r4, r0, r4
 8007604:	42a6      	cmp	r6, r4
 8007606:	dc2e      	bgt.n	8007666 <__gethex+0x2e8>
 8007608:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d022      	beq.n	8007656 <__gethex+0x2d8>
 8007610:	2b03      	cmp	r3, #3
 8007612:	d024      	beq.n	800765e <__gethex+0x2e0>
 8007614:	2b01      	cmp	r3, #1
 8007616:	d115      	bne.n	8007644 <__gethex+0x2c6>
 8007618:	42a6      	cmp	r6, r4
 800761a:	d113      	bne.n	8007644 <__gethex+0x2c6>
 800761c:	2e01      	cmp	r6, #1
 800761e:	dc0b      	bgt.n	8007638 <__gethex+0x2ba>
 8007620:	9a06      	ldr	r2, [sp, #24]
 8007622:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	2301      	movs	r3, #1
 800762a:	612b      	str	r3, [r5, #16]
 800762c:	f8c9 3000 	str.w	r3, [r9]
 8007630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007632:	2762      	movs	r7, #98	; 0x62
 8007634:	601d      	str	r5, [r3, #0]
 8007636:	e72a      	b.n	800748e <__gethex+0x110>
 8007638:	1e71      	subs	r1, r6, #1
 800763a:	4628      	mov	r0, r5
 800763c:	f000 fd7c 	bl	8008138 <__any_on>
 8007640:	2800      	cmp	r0, #0
 8007642:	d1ed      	bne.n	8007620 <__gethex+0x2a2>
 8007644:	4629      	mov	r1, r5
 8007646:	9802      	ldr	r0, [sp, #8]
 8007648:	f000 f9cc 	bl	80079e4 <_Bfree>
 800764c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800764e:	2300      	movs	r3, #0
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	2750      	movs	r7, #80	; 0x50
 8007654:	e71b      	b.n	800748e <__gethex+0x110>
 8007656:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0e1      	beq.n	8007620 <__gethex+0x2a2>
 800765c:	e7f2      	b.n	8007644 <__gethex+0x2c6>
 800765e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1dd      	bne.n	8007620 <__gethex+0x2a2>
 8007664:	e7ee      	b.n	8007644 <__gethex+0x2c6>
 8007666:	1e67      	subs	r7, r4, #1
 8007668:	f1ba 0f00 	cmp.w	sl, #0
 800766c:	d131      	bne.n	80076d2 <__gethex+0x354>
 800766e:	b127      	cbz	r7, 800767a <__gethex+0x2fc>
 8007670:	4639      	mov	r1, r7
 8007672:	4628      	mov	r0, r5
 8007674:	f000 fd60 	bl	8008138 <__any_on>
 8007678:	4682      	mov	sl, r0
 800767a:	117a      	asrs	r2, r7, #5
 800767c:	2301      	movs	r3, #1
 800767e:	f007 071f 	and.w	r7, r7, #31
 8007682:	fa03 f707 	lsl.w	r7, r3, r7
 8007686:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800768a:	4621      	mov	r1, r4
 800768c:	421f      	tst	r7, r3
 800768e:	4628      	mov	r0, r5
 8007690:	bf18      	it	ne
 8007692:	f04a 0a02 	orrne.w	sl, sl, #2
 8007696:	1b36      	subs	r6, r6, r4
 8007698:	f7ff fe22 	bl	80072e0 <rshift>
 800769c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80076a0:	2702      	movs	r7, #2
 80076a2:	f1ba 0f00 	cmp.w	sl, #0
 80076a6:	d048      	beq.n	800773a <__gethex+0x3bc>
 80076a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d015      	beq.n	80076dc <__gethex+0x35e>
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d017      	beq.n	80076e4 <__gethex+0x366>
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d109      	bne.n	80076cc <__gethex+0x34e>
 80076b8:	f01a 0f02 	tst.w	sl, #2
 80076bc:	d006      	beq.n	80076cc <__gethex+0x34e>
 80076be:	f8d9 3000 	ldr.w	r3, [r9]
 80076c2:	ea4a 0a03 	orr.w	sl, sl, r3
 80076c6:	f01a 0f01 	tst.w	sl, #1
 80076ca:	d10e      	bne.n	80076ea <__gethex+0x36c>
 80076cc:	f047 0710 	orr.w	r7, r7, #16
 80076d0:	e033      	b.n	800773a <__gethex+0x3bc>
 80076d2:	f04f 0a01 	mov.w	sl, #1
 80076d6:	e7d0      	b.n	800767a <__gethex+0x2fc>
 80076d8:	2701      	movs	r7, #1
 80076da:	e7e2      	b.n	80076a2 <__gethex+0x324>
 80076dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076de:	f1c3 0301 	rsb	r3, r3, #1
 80076e2:	9315      	str	r3, [sp, #84]	; 0x54
 80076e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0f0      	beq.n	80076cc <__gethex+0x34e>
 80076ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80076ee:	f105 0314 	add.w	r3, r5, #20
 80076f2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80076f6:	eb03 010a 	add.w	r1, r3, sl
 80076fa:	f04f 0c00 	mov.w	ip, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f853 2b04 	ldr.w	r2, [r3], #4
 8007704:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007708:	d01c      	beq.n	8007744 <__gethex+0x3c6>
 800770a:	3201      	adds	r2, #1
 800770c:	6002      	str	r2, [r0, #0]
 800770e:	2f02      	cmp	r7, #2
 8007710:	f105 0314 	add.w	r3, r5, #20
 8007714:	d138      	bne.n	8007788 <__gethex+0x40a>
 8007716:	f8d8 2000 	ldr.w	r2, [r8]
 800771a:	3a01      	subs	r2, #1
 800771c:	42b2      	cmp	r2, r6
 800771e:	d10a      	bne.n	8007736 <__gethex+0x3b8>
 8007720:	1171      	asrs	r1, r6, #5
 8007722:	2201      	movs	r2, #1
 8007724:	f006 061f 	and.w	r6, r6, #31
 8007728:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800772c:	fa02 f606 	lsl.w	r6, r2, r6
 8007730:	421e      	tst	r6, r3
 8007732:	bf18      	it	ne
 8007734:	4617      	movne	r7, r2
 8007736:	f047 0720 	orr.w	r7, r7, #32
 800773a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800773c:	601d      	str	r5, [r3, #0]
 800773e:	9b06      	ldr	r3, [sp, #24]
 8007740:	601c      	str	r4, [r3, #0]
 8007742:	e6a4      	b.n	800748e <__gethex+0x110>
 8007744:	4299      	cmp	r1, r3
 8007746:	f843 cc04 	str.w	ip, [r3, #-4]
 800774a:	d8d8      	bhi.n	80076fe <__gethex+0x380>
 800774c:	68ab      	ldr	r3, [r5, #8]
 800774e:	4599      	cmp	r9, r3
 8007750:	db12      	blt.n	8007778 <__gethex+0x3fa>
 8007752:	6869      	ldr	r1, [r5, #4]
 8007754:	9802      	ldr	r0, [sp, #8]
 8007756:	3101      	adds	r1, #1
 8007758:	f000 f910 	bl	800797c <_Balloc>
 800775c:	692a      	ldr	r2, [r5, #16]
 800775e:	3202      	adds	r2, #2
 8007760:	f105 010c 	add.w	r1, r5, #12
 8007764:	4683      	mov	fp, r0
 8007766:	0092      	lsls	r2, r2, #2
 8007768:	300c      	adds	r0, #12
 800776a:	f7fd f995 	bl	8004a98 <memcpy>
 800776e:	4629      	mov	r1, r5
 8007770:	9802      	ldr	r0, [sp, #8]
 8007772:	f000 f937 	bl	80079e4 <_Bfree>
 8007776:	465d      	mov	r5, fp
 8007778:	692b      	ldr	r3, [r5, #16]
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007780:	612a      	str	r2, [r5, #16]
 8007782:	2201      	movs	r2, #1
 8007784:	615a      	str	r2, [r3, #20]
 8007786:	e7c2      	b.n	800770e <__gethex+0x390>
 8007788:	692a      	ldr	r2, [r5, #16]
 800778a:	454a      	cmp	r2, r9
 800778c:	dd0b      	ble.n	80077a6 <__gethex+0x428>
 800778e:	2101      	movs	r1, #1
 8007790:	4628      	mov	r0, r5
 8007792:	f7ff fda5 	bl	80072e0 <rshift>
 8007796:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800779a:	3401      	adds	r4, #1
 800779c:	42a3      	cmp	r3, r4
 800779e:	f6ff aed9 	blt.w	8007554 <__gethex+0x1d6>
 80077a2:	2701      	movs	r7, #1
 80077a4:	e7c7      	b.n	8007736 <__gethex+0x3b8>
 80077a6:	f016 061f 	ands.w	r6, r6, #31
 80077aa:	d0fa      	beq.n	80077a2 <__gethex+0x424>
 80077ac:	449a      	add	sl, r3
 80077ae:	f1c6 0620 	rsb	r6, r6, #32
 80077b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80077b6:	f000 f9a5 	bl	8007b04 <__hi0bits>
 80077ba:	42b0      	cmp	r0, r6
 80077bc:	dbe7      	blt.n	800778e <__gethex+0x410>
 80077be:	e7f0      	b.n	80077a2 <__gethex+0x424>

080077c0 <L_shift>:
 80077c0:	f1c2 0208 	rsb	r2, r2, #8
 80077c4:	0092      	lsls	r2, r2, #2
 80077c6:	b570      	push	{r4, r5, r6, lr}
 80077c8:	f1c2 0620 	rsb	r6, r2, #32
 80077cc:	6843      	ldr	r3, [r0, #4]
 80077ce:	6804      	ldr	r4, [r0, #0]
 80077d0:	fa03 f506 	lsl.w	r5, r3, r6
 80077d4:	432c      	orrs	r4, r5
 80077d6:	40d3      	lsrs	r3, r2
 80077d8:	6004      	str	r4, [r0, #0]
 80077da:	f840 3f04 	str.w	r3, [r0, #4]!
 80077de:	4288      	cmp	r0, r1
 80077e0:	d3f4      	bcc.n	80077cc <L_shift+0xc>
 80077e2:	bd70      	pop	{r4, r5, r6, pc}

080077e4 <__match>:
 80077e4:	b530      	push	{r4, r5, lr}
 80077e6:	6803      	ldr	r3, [r0, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ee:	b914      	cbnz	r4, 80077f6 <__match+0x12>
 80077f0:	6003      	str	r3, [r0, #0]
 80077f2:	2001      	movs	r0, #1
 80077f4:	bd30      	pop	{r4, r5, pc}
 80077f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80077fe:	2d19      	cmp	r5, #25
 8007800:	bf98      	it	ls
 8007802:	3220      	addls	r2, #32
 8007804:	42a2      	cmp	r2, r4
 8007806:	d0f0      	beq.n	80077ea <__match+0x6>
 8007808:	2000      	movs	r0, #0
 800780a:	e7f3      	b.n	80077f4 <__match+0x10>

0800780c <__hexnan>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	680b      	ldr	r3, [r1, #0]
 8007812:	6801      	ldr	r1, [r0, #0]
 8007814:	115f      	asrs	r7, r3, #5
 8007816:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800781a:	f013 031f 	ands.w	r3, r3, #31
 800781e:	b087      	sub	sp, #28
 8007820:	bf18      	it	ne
 8007822:	3704      	addne	r7, #4
 8007824:	2500      	movs	r5, #0
 8007826:	1f3e      	subs	r6, r7, #4
 8007828:	4682      	mov	sl, r0
 800782a:	4690      	mov	r8, r2
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	f847 5c04 	str.w	r5, [r7, #-4]
 8007832:	46b1      	mov	r9, r6
 8007834:	4634      	mov	r4, r6
 8007836:	9502      	str	r5, [sp, #8]
 8007838:	46ab      	mov	fp, r5
 800783a:	784a      	ldrb	r2, [r1, #1]
 800783c:	1c4b      	adds	r3, r1, #1
 800783e:	9303      	str	r3, [sp, #12]
 8007840:	b342      	cbz	r2, 8007894 <__hexnan+0x88>
 8007842:	4610      	mov	r0, r2
 8007844:	9105      	str	r1, [sp, #20]
 8007846:	9204      	str	r2, [sp, #16]
 8007848:	f7ff fd84 	bl	8007354 <__hexdig_fun>
 800784c:	2800      	cmp	r0, #0
 800784e:	d143      	bne.n	80078d8 <__hexnan+0xcc>
 8007850:	9a04      	ldr	r2, [sp, #16]
 8007852:	9905      	ldr	r1, [sp, #20]
 8007854:	2a20      	cmp	r2, #32
 8007856:	d818      	bhi.n	800788a <__hexnan+0x7e>
 8007858:	9b02      	ldr	r3, [sp, #8]
 800785a:	459b      	cmp	fp, r3
 800785c:	dd13      	ble.n	8007886 <__hexnan+0x7a>
 800785e:	454c      	cmp	r4, r9
 8007860:	d206      	bcs.n	8007870 <__hexnan+0x64>
 8007862:	2d07      	cmp	r5, #7
 8007864:	dc04      	bgt.n	8007870 <__hexnan+0x64>
 8007866:	462a      	mov	r2, r5
 8007868:	4649      	mov	r1, r9
 800786a:	4620      	mov	r0, r4
 800786c:	f7ff ffa8 	bl	80077c0 <L_shift>
 8007870:	4544      	cmp	r4, r8
 8007872:	d944      	bls.n	80078fe <__hexnan+0xf2>
 8007874:	2300      	movs	r3, #0
 8007876:	f1a4 0904 	sub.w	r9, r4, #4
 800787a:	f844 3c04 	str.w	r3, [r4, #-4]
 800787e:	f8cd b008 	str.w	fp, [sp, #8]
 8007882:	464c      	mov	r4, r9
 8007884:	461d      	mov	r5, r3
 8007886:	9903      	ldr	r1, [sp, #12]
 8007888:	e7d7      	b.n	800783a <__hexnan+0x2e>
 800788a:	2a29      	cmp	r2, #41	; 0x29
 800788c:	d14a      	bne.n	8007924 <__hexnan+0x118>
 800788e:	3102      	adds	r1, #2
 8007890:	f8ca 1000 	str.w	r1, [sl]
 8007894:	f1bb 0f00 	cmp.w	fp, #0
 8007898:	d044      	beq.n	8007924 <__hexnan+0x118>
 800789a:	454c      	cmp	r4, r9
 800789c:	d206      	bcs.n	80078ac <__hexnan+0xa0>
 800789e:	2d07      	cmp	r5, #7
 80078a0:	dc04      	bgt.n	80078ac <__hexnan+0xa0>
 80078a2:	462a      	mov	r2, r5
 80078a4:	4649      	mov	r1, r9
 80078a6:	4620      	mov	r0, r4
 80078a8:	f7ff ff8a 	bl	80077c0 <L_shift>
 80078ac:	4544      	cmp	r4, r8
 80078ae:	d928      	bls.n	8007902 <__hexnan+0xf6>
 80078b0:	4643      	mov	r3, r8
 80078b2:	f854 2b04 	ldr.w	r2, [r4], #4
 80078b6:	f843 2b04 	str.w	r2, [r3], #4
 80078ba:	42a6      	cmp	r6, r4
 80078bc:	d2f9      	bcs.n	80078b2 <__hexnan+0xa6>
 80078be:	2200      	movs	r2, #0
 80078c0:	f843 2b04 	str.w	r2, [r3], #4
 80078c4:	429e      	cmp	r6, r3
 80078c6:	d2fb      	bcs.n	80078c0 <__hexnan+0xb4>
 80078c8:	6833      	ldr	r3, [r6, #0]
 80078ca:	b91b      	cbnz	r3, 80078d4 <__hexnan+0xc8>
 80078cc:	4546      	cmp	r6, r8
 80078ce:	d127      	bne.n	8007920 <__hexnan+0x114>
 80078d0:	2301      	movs	r3, #1
 80078d2:	6033      	str	r3, [r6, #0]
 80078d4:	2005      	movs	r0, #5
 80078d6:	e026      	b.n	8007926 <__hexnan+0x11a>
 80078d8:	3501      	adds	r5, #1
 80078da:	2d08      	cmp	r5, #8
 80078dc:	f10b 0b01 	add.w	fp, fp, #1
 80078e0:	dd06      	ble.n	80078f0 <__hexnan+0xe4>
 80078e2:	4544      	cmp	r4, r8
 80078e4:	d9cf      	bls.n	8007886 <__hexnan+0x7a>
 80078e6:	2300      	movs	r3, #0
 80078e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80078ec:	2501      	movs	r5, #1
 80078ee:	3c04      	subs	r4, #4
 80078f0:	6822      	ldr	r2, [r4, #0]
 80078f2:	f000 000f 	and.w	r0, r0, #15
 80078f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80078fa:	6020      	str	r0, [r4, #0]
 80078fc:	e7c3      	b.n	8007886 <__hexnan+0x7a>
 80078fe:	2508      	movs	r5, #8
 8007900:	e7c1      	b.n	8007886 <__hexnan+0x7a>
 8007902:	9b01      	ldr	r3, [sp, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0df      	beq.n	80078c8 <__hexnan+0xbc>
 8007908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790c:	f1c3 0320 	rsb	r3, r3, #32
 8007910:	fa22 f303 	lsr.w	r3, r2, r3
 8007914:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007918:	401a      	ands	r2, r3
 800791a:	f847 2c04 	str.w	r2, [r7, #-4]
 800791e:	e7d3      	b.n	80078c8 <__hexnan+0xbc>
 8007920:	3e04      	subs	r6, #4
 8007922:	e7d1      	b.n	80078c8 <__hexnan+0xbc>
 8007924:	2004      	movs	r0, #4
 8007926:	b007      	add	sp, #28
 8007928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800792c <__locale_ctype_ptr_l>:
 800792c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007930:	4770      	bx	lr

08007932 <__localeconv_l>:
 8007932:	30f0      	adds	r0, #240	; 0xf0
 8007934:	4770      	bx	lr
	...

08007938 <_localeconv_r>:
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <_localeconv_r+0x14>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6a18      	ldr	r0, [r3, #32]
 800793e:	4b04      	ldr	r3, [pc, #16]	; (8007950 <_localeconv_r+0x18>)
 8007940:	2800      	cmp	r0, #0
 8007942:	bf08      	it	eq
 8007944:	4618      	moveq	r0, r3
 8007946:	30f0      	adds	r0, #240	; 0xf0
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000008 	.word	0x20000008
 8007950:	2000006c 	.word	0x2000006c

08007954 <__ascii_mbtowc>:
 8007954:	b082      	sub	sp, #8
 8007956:	b901      	cbnz	r1, 800795a <__ascii_mbtowc+0x6>
 8007958:	a901      	add	r1, sp, #4
 800795a:	b142      	cbz	r2, 800796e <__ascii_mbtowc+0x1a>
 800795c:	b14b      	cbz	r3, 8007972 <__ascii_mbtowc+0x1e>
 800795e:	7813      	ldrb	r3, [r2, #0]
 8007960:	600b      	str	r3, [r1, #0]
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	1c10      	adds	r0, r2, #0
 8007966:	bf18      	it	ne
 8007968:	2001      	movne	r0, #1
 800796a:	b002      	add	sp, #8
 800796c:	4770      	bx	lr
 800796e:	4610      	mov	r0, r2
 8007970:	e7fb      	b.n	800796a <__ascii_mbtowc+0x16>
 8007972:	f06f 0001 	mvn.w	r0, #1
 8007976:	e7f8      	b.n	800796a <__ascii_mbtowc+0x16>

08007978 <__malloc_lock>:
 8007978:	4770      	bx	lr

0800797a <__malloc_unlock>:
 800797a:	4770      	bx	lr

0800797c <_Balloc>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007980:	4604      	mov	r4, r0
 8007982:	460e      	mov	r6, r1
 8007984:	b93d      	cbnz	r5, 8007996 <_Balloc+0x1a>
 8007986:	2010      	movs	r0, #16
 8007988:	f7fd f87e 	bl	8004a88 <malloc>
 800798c:	6260      	str	r0, [r4, #36]	; 0x24
 800798e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007992:	6005      	str	r5, [r0, #0]
 8007994:	60c5      	str	r5, [r0, #12]
 8007996:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007998:	68eb      	ldr	r3, [r5, #12]
 800799a:	b183      	cbz	r3, 80079be <_Balloc+0x42>
 800799c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80079a4:	b9b8      	cbnz	r0, 80079d6 <_Balloc+0x5a>
 80079a6:	2101      	movs	r1, #1
 80079a8:	fa01 f506 	lsl.w	r5, r1, r6
 80079ac:	1d6a      	adds	r2, r5, #5
 80079ae:	0092      	lsls	r2, r2, #2
 80079b0:	4620      	mov	r0, r4
 80079b2:	f000 fbe2 	bl	800817a <_calloc_r>
 80079b6:	b160      	cbz	r0, 80079d2 <_Balloc+0x56>
 80079b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80079bc:	e00e      	b.n	80079dc <_Balloc+0x60>
 80079be:	2221      	movs	r2, #33	; 0x21
 80079c0:	2104      	movs	r1, #4
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 fbd9 	bl	800817a <_calloc_r>
 80079c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ca:	60e8      	str	r0, [r5, #12]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e4      	bne.n	800799c <_Balloc+0x20>
 80079d2:	2000      	movs	r0, #0
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	6802      	ldr	r2, [r0, #0]
 80079d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80079dc:	2300      	movs	r3, #0
 80079de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079e2:	e7f7      	b.n	80079d4 <_Balloc+0x58>

080079e4 <_Bfree>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80079e8:	4606      	mov	r6, r0
 80079ea:	460d      	mov	r5, r1
 80079ec:	b93c      	cbnz	r4, 80079fe <_Bfree+0x1a>
 80079ee:	2010      	movs	r0, #16
 80079f0:	f7fd f84a 	bl	8004a88 <malloc>
 80079f4:	6270      	str	r0, [r6, #36]	; 0x24
 80079f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079fa:	6004      	str	r4, [r0, #0]
 80079fc:	60c4      	str	r4, [r0, #12]
 80079fe:	b13d      	cbz	r5, 8007a10 <_Bfree+0x2c>
 8007a00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a02:	686a      	ldr	r2, [r5, #4]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a0a:	6029      	str	r1, [r5, #0]
 8007a0c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007a10:	bd70      	pop	{r4, r5, r6, pc}

08007a12 <__multadd>:
 8007a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a16:	690d      	ldr	r5, [r1, #16]
 8007a18:	461f      	mov	r7, r3
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	f101 0c14 	add.w	ip, r1, #20
 8007a22:	2300      	movs	r3, #0
 8007a24:	f8dc 0000 	ldr.w	r0, [ip]
 8007a28:	b281      	uxth	r1, r0
 8007a2a:	fb02 7101 	mla	r1, r2, r1, r7
 8007a2e:	0c0f      	lsrs	r7, r1, #16
 8007a30:	0c00      	lsrs	r0, r0, #16
 8007a32:	fb02 7000 	mla	r0, r2, r0, r7
 8007a36:	b289      	uxth	r1, r1
 8007a38:	3301      	adds	r3, #1
 8007a3a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007a3e:	429d      	cmp	r5, r3
 8007a40:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007a44:	f84c 1b04 	str.w	r1, [ip], #4
 8007a48:	dcec      	bgt.n	8007a24 <__multadd+0x12>
 8007a4a:	b1d7      	cbz	r7, 8007a82 <__multadd+0x70>
 8007a4c:	68a3      	ldr	r3, [r4, #8]
 8007a4e:	42ab      	cmp	r3, r5
 8007a50:	dc12      	bgt.n	8007a78 <__multadd+0x66>
 8007a52:	6861      	ldr	r1, [r4, #4]
 8007a54:	4630      	mov	r0, r6
 8007a56:	3101      	adds	r1, #1
 8007a58:	f7ff ff90 	bl	800797c <_Balloc>
 8007a5c:	6922      	ldr	r2, [r4, #16]
 8007a5e:	3202      	adds	r2, #2
 8007a60:	f104 010c 	add.w	r1, r4, #12
 8007a64:	4680      	mov	r8, r0
 8007a66:	0092      	lsls	r2, r2, #2
 8007a68:	300c      	adds	r0, #12
 8007a6a:	f7fd f815 	bl	8004a98 <memcpy>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4630      	mov	r0, r6
 8007a72:	f7ff ffb7 	bl	80079e4 <_Bfree>
 8007a76:	4644      	mov	r4, r8
 8007a78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	615f      	str	r7, [r3, #20]
 8007a80:	6125      	str	r5, [r4, #16]
 8007a82:	4620      	mov	r0, r4
 8007a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a88 <__s2b>:
 8007a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	4615      	mov	r5, r2
 8007a90:	461f      	mov	r7, r3
 8007a92:	2209      	movs	r2, #9
 8007a94:	3308      	adds	r3, #8
 8007a96:	4606      	mov	r6, r0
 8007a98:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	db20      	blt.n	8007ae6 <__s2b+0x5e>
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f7ff ff69 	bl	800797c <_Balloc>
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	6143      	str	r3, [r0, #20]
 8007aae:	2d09      	cmp	r5, #9
 8007ab0:	f04f 0301 	mov.w	r3, #1
 8007ab4:	6103      	str	r3, [r0, #16]
 8007ab6:	dd19      	ble.n	8007aec <__s2b+0x64>
 8007ab8:	f104 0809 	add.w	r8, r4, #9
 8007abc:	46c1      	mov	r9, r8
 8007abe:	442c      	add	r4, r5
 8007ac0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007ac4:	4601      	mov	r1, r0
 8007ac6:	3b30      	subs	r3, #48	; 0x30
 8007ac8:	220a      	movs	r2, #10
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7ff ffa1 	bl	8007a12 <__multadd>
 8007ad0:	45a1      	cmp	r9, r4
 8007ad2:	d1f5      	bne.n	8007ac0 <__s2b+0x38>
 8007ad4:	eb08 0405 	add.w	r4, r8, r5
 8007ad8:	3c08      	subs	r4, #8
 8007ada:	1b2d      	subs	r5, r5, r4
 8007adc:	1963      	adds	r3, r4, r5
 8007ade:	42bb      	cmp	r3, r7
 8007ae0:	db07      	blt.n	8007af2 <__s2b+0x6a>
 8007ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ae6:	0052      	lsls	r2, r2, #1
 8007ae8:	3101      	adds	r1, #1
 8007aea:	e7d9      	b.n	8007aa0 <__s2b+0x18>
 8007aec:	340a      	adds	r4, #10
 8007aee:	2509      	movs	r5, #9
 8007af0:	e7f3      	b.n	8007ada <__s2b+0x52>
 8007af2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007af6:	4601      	mov	r1, r0
 8007af8:	3b30      	subs	r3, #48	; 0x30
 8007afa:	220a      	movs	r2, #10
 8007afc:	4630      	mov	r0, r6
 8007afe:	f7ff ff88 	bl	8007a12 <__multadd>
 8007b02:	e7eb      	b.n	8007adc <__s2b+0x54>

08007b04 <__hi0bits>:
 8007b04:	0c02      	lsrs	r2, r0, #16
 8007b06:	0412      	lsls	r2, r2, #16
 8007b08:	4603      	mov	r3, r0
 8007b0a:	b9b2      	cbnz	r2, 8007b3a <__hi0bits+0x36>
 8007b0c:	0403      	lsls	r3, r0, #16
 8007b0e:	2010      	movs	r0, #16
 8007b10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b14:	bf04      	itt	eq
 8007b16:	021b      	lsleq	r3, r3, #8
 8007b18:	3008      	addeq	r0, #8
 8007b1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b1e:	bf04      	itt	eq
 8007b20:	011b      	lsleq	r3, r3, #4
 8007b22:	3004      	addeq	r0, #4
 8007b24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b28:	bf04      	itt	eq
 8007b2a:	009b      	lsleq	r3, r3, #2
 8007b2c:	3002      	addeq	r0, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	db06      	blt.n	8007b40 <__hi0bits+0x3c>
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	d503      	bpl.n	8007b3e <__hi0bits+0x3a>
 8007b36:	3001      	adds	r0, #1
 8007b38:	4770      	bx	lr
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	e7e8      	b.n	8007b10 <__hi0bits+0xc>
 8007b3e:	2020      	movs	r0, #32
 8007b40:	4770      	bx	lr

08007b42 <__lo0bits>:
 8007b42:	6803      	ldr	r3, [r0, #0]
 8007b44:	f013 0207 	ands.w	r2, r3, #7
 8007b48:	4601      	mov	r1, r0
 8007b4a:	d00b      	beq.n	8007b64 <__lo0bits+0x22>
 8007b4c:	07da      	lsls	r2, r3, #31
 8007b4e:	d423      	bmi.n	8007b98 <__lo0bits+0x56>
 8007b50:	0798      	lsls	r0, r3, #30
 8007b52:	bf49      	itett	mi
 8007b54:	085b      	lsrmi	r3, r3, #1
 8007b56:	089b      	lsrpl	r3, r3, #2
 8007b58:	2001      	movmi	r0, #1
 8007b5a:	600b      	strmi	r3, [r1, #0]
 8007b5c:	bf5c      	itt	pl
 8007b5e:	600b      	strpl	r3, [r1, #0]
 8007b60:	2002      	movpl	r0, #2
 8007b62:	4770      	bx	lr
 8007b64:	b298      	uxth	r0, r3
 8007b66:	b9a8      	cbnz	r0, 8007b94 <__lo0bits+0x52>
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b70:	bf04      	itt	eq
 8007b72:	0a1b      	lsreq	r3, r3, #8
 8007b74:	3008      	addeq	r0, #8
 8007b76:	071a      	lsls	r2, r3, #28
 8007b78:	bf04      	itt	eq
 8007b7a:	091b      	lsreq	r3, r3, #4
 8007b7c:	3004      	addeq	r0, #4
 8007b7e:	079a      	lsls	r2, r3, #30
 8007b80:	bf04      	itt	eq
 8007b82:	089b      	lsreq	r3, r3, #2
 8007b84:	3002      	addeq	r0, #2
 8007b86:	07da      	lsls	r2, r3, #31
 8007b88:	d402      	bmi.n	8007b90 <__lo0bits+0x4e>
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	d006      	beq.n	8007b9c <__lo0bits+0x5a>
 8007b8e:	3001      	adds	r0, #1
 8007b90:	600b      	str	r3, [r1, #0]
 8007b92:	4770      	bx	lr
 8007b94:	4610      	mov	r0, r2
 8007b96:	e7e9      	b.n	8007b6c <__lo0bits+0x2a>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	4770      	bx	lr
 8007b9c:	2020      	movs	r0, #32
 8007b9e:	4770      	bx	lr

08007ba0 <__i2b>:
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	f7ff fee9 	bl	800797c <_Balloc>
 8007baa:	2201      	movs	r2, #1
 8007bac:	6144      	str	r4, [r0, #20]
 8007bae:	6102      	str	r2, [r0, #16]
 8007bb0:	bd10      	pop	{r4, pc}

08007bb2 <__multiply>:
 8007bb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb6:	4614      	mov	r4, r2
 8007bb8:	690a      	ldr	r2, [r1, #16]
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	bfb8      	it	lt
 8007bc0:	460b      	movlt	r3, r1
 8007bc2:	4688      	mov	r8, r1
 8007bc4:	bfbc      	itt	lt
 8007bc6:	46a0      	movlt	r8, r4
 8007bc8:	461c      	movlt	r4, r3
 8007bca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007bce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007bd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007bda:	eb07 0609 	add.w	r6, r7, r9
 8007bde:	42b3      	cmp	r3, r6
 8007be0:	bfb8      	it	lt
 8007be2:	3101      	addlt	r1, #1
 8007be4:	f7ff feca 	bl	800797c <_Balloc>
 8007be8:	f100 0514 	add.w	r5, r0, #20
 8007bec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007bf0:	462b      	mov	r3, r5
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4573      	cmp	r3, lr
 8007bf6:	d316      	bcc.n	8007c26 <__multiply+0x74>
 8007bf8:	f104 0214 	add.w	r2, r4, #20
 8007bfc:	f108 0114 	add.w	r1, r8, #20
 8007c00:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007c04:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	9b00      	ldr	r3, [sp, #0]
 8007c0c:	9201      	str	r2, [sp, #4]
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d80c      	bhi.n	8007c2c <__multiply+0x7a>
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	dd03      	ble.n	8007c1e <__multiply+0x6c>
 8007c16:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d05d      	beq.n	8007cda <__multiply+0x128>
 8007c1e:	6106      	str	r6, [r0, #16]
 8007c20:	b003      	add	sp, #12
 8007c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c26:	f843 2b04 	str.w	r2, [r3], #4
 8007c2a:	e7e3      	b.n	8007bf4 <__multiply+0x42>
 8007c2c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007c30:	f1bb 0f00 	cmp.w	fp, #0
 8007c34:	d023      	beq.n	8007c7e <__multiply+0xcc>
 8007c36:	4689      	mov	r9, r1
 8007c38:	46ac      	mov	ip, r5
 8007c3a:	f04f 0800 	mov.w	r8, #0
 8007c3e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007c42:	f8dc a000 	ldr.w	sl, [ip]
 8007c46:	b2a3      	uxth	r3, r4
 8007c48:	fa1f fa8a 	uxth.w	sl, sl
 8007c4c:	fb0b a303 	mla	r3, fp, r3, sl
 8007c50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c54:	f8dc 4000 	ldr.w	r4, [ip]
 8007c58:	4443      	add	r3, r8
 8007c5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c5e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007c62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007c66:	46e2      	mov	sl, ip
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c6e:	454f      	cmp	r7, r9
 8007c70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c74:	f84a 3b04 	str.w	r3, [sl], #4
 8007c78:	d82b      	bhi.n	8007cd2 <__multiply+0x120>
 8007c7a:	f8cc 8004 	str.w	r8, [ip, #4]
 8007c7e:	9b01      	ldr	r3, [sp, #4]
 8007c80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007c84:	3204      	adds	r2, #4
 8007c86:	f1ba 0f00 	cmp.w	sl, #0
 8007c8a:	d020      	beq.n	8007cce <__multiply+0x11c>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	4689      	mov	r9, r1
 8007c90:	46a8      	mov	r8, r5
 8007c92:	f04f 0b00 	mov.w	fp, #0
 8007c96:	f8b9 c000 	ldrh.w	ip, [r9]
 8007c9a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007c9e:	fb0a 440c 	mla	r4, sl, ip, r4
 8007ca2:	445c      	add	r4, fp
 8007ca4:	46c4      	mov	ip, r8
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007cac:	f84c 3b04 	str.w	r3, [ip], #4
 8007cb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007cb4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007cb8:	0c1b      	lsrs	r3, r3, #16
 8007cba:	fb0a b303 	mla	r3, sl, r3, fp
 8007cbe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007cc2:	454f      	cmp	r7, r9
 8007cc4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007cc8:	d805      	bhi.n	8007cd6 <__multiply+0x124>
 8007cca:	f8c8 3004 	str.w	r3, [r8, #4]
 8007cce:	3504      	adds	r5, #4
 8007cd0:	e79b      	b.n	8007c0a <__multiply+0x58>
 8007cd2:	46d4      	mov	ip, sl
 8007cd4:	e7b3      	b.n	8007c3e <__multiply+0x8c>
 8007cd6:	46e0      	mov	r8, ip
 8007cd8:	e7dd      	b.n	8007c96 <__multiply+0xe4>
 8007cda:	3e01      	subs	r6, #1
 8007cdc:	e799      	b.n	8007c12 <__multiply+0x60>
	...

08007ce0 <__pow5mult>:
 8007ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce4:	4615      	mov	r5, r2
 8007ce6:	f012 0203 	ands.w	r2, r2, #3
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	d007      	beq.n	8007d00 <__pow5mult+0x20>
 8007cf0:	3a01      	subs	r2, #1
 8007cf2:	4c21      	ldr	r4, [pc, #132]	; (8007d78 <__pow5mult+0x98>)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cfa:	f7ff fe8a 	bl	8007a12 <__multadd>
 8007cfe:	4607      	mov	r7, r0
 8007d00:	10ad      	asrs	r5, r5, #2
 8007d02:	d035      	beq.n	8007d70 <__pow5mult+0x90>
 8007d04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d06:	b93c      	cbnz	r4, 8007d18 <__pow5mult+0x38>
 8007d08:	2010      	movs	r0, #16
 8007d0a:	f7fc febd 	bl	8004a88 <malloc>
 8007d0e:	6270      	str	r0, [r6, #36]	; 0x24
 8007d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d14:	6004      	str	r4, [r0, #0]
 8007d16:	60c4      	str	r4, [r0, #12]
 8007d18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d20:	b94c      	cbnz	r4, 8007d36 <__pow5mult+0x56>
 8007d22:	f240 2171 	movw	r1, #625	; 0x271
 8007d26:	4630      	mov	r0, r6
 8007d28:	f7ff ff3a 	bl	8007ba0 <__i2b>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d32:	4604      	mov	r4, r0
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	07eb      	lsls	r3, r5, #31
 8007d3c:	d50a      	bpl.n	8007d54 <__pow5mult+0x74>
 8007d3e:	4639      	mov	r1, r7
 8007d40:	4622      	mov	r2, r4
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff ff35 	bl	8007bb2 <__multiply>
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4681      	mov	r9, r0
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f7ff fe49 	bl	80079e4 <_Bfree>
 8007d52:	464f      	mov	r7, r9
 8007d54:	106d      	asrs	r5, r5, #1
 8007d56:	d00b      	beq.n	8007d70 <__pow5mult+0x90>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	b938      	cbnz	r0, 8007d6c <__pow5mult+0x8c>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff ff26 	bl	8007bb2 <__multiply>
 8007d66:	6020      	str	r0, [r4, #0]
 8007d68:	f8c0 8000 	str.w	r8, [r0]
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	e7e4      	b.n	8007d3a <__pow5mult+0x5a>
 8007d70:	4638      	mov	r0, r7
 8007d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d76:	bf00      	nop
 8007d78:	08008720 	.word	0x08008720

08007d7c <__lshift>:
 8007d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	460c      	mov	r4, r1
 8007d82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d86:	6923      	ldr	r3, [r4, #16]
 8007d88:	6849      	ldr	r1, [r1, #4]
 8007d8a:	eb0a 0903 	add.w	r9, sl, r3
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	4607      	mov	r7, r0
 8007d92:	4616      	mov	r6, r2
 8007d94:	f109 0501 	add.w	r5, r9, #1
 8007d98:	42ab      	cmp	r3, r5
 8007d9a:	db32      	blt.n	8007e02 <__lshift+0x86>
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7ff fded 	bl	800797c <_Balloc>
 8007da2:	2300      	movs	r3, #0
 8007da4:	4680      	mov	r8, r0
 8007da6:	f100 0114 	add.w	r1, r0, #20
 8007daa:	461a      	mov	r2, r3
 8007dac:	4553      	cmp	r3, sl
 8007dae:	db2b      	blt.n	8007e08 <__lshift+0x8c>
 8007db0:	6920      	ldr	r0, [r4, #16]
 8007db2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007db6:	f104 0314 	add.w	r3, r4, #20
 8007dba:	f016 021f 	ands.w	r2, r6, #31
 8007dbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007dc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dc6:	d025      	beq.n	8007e14 <__lshift+0x98>
 8007dc8:	f1c2 0e20 	rsb	lr, r2, #32
 8007dcc:	2000      	movs	r0, #0
 8007dce:	681e      	ldr	r6, [r3, #0]
 8007dd0:	468a      	mov	sl, r1
 8007dd2:	4096      	lsls	r6, r2
 8007dd4:	4330      	orrs	r0, r6
 8007dd6:	f84a 0b04 	str.w	r0, [sl], #4
 8007dda:	f853 0b04 	ldr.w	r0, [r3], #4
 8007dde:	459c      	cmp	ip, r3
 8007de0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007de4:	d814      	bhi.n	8007e10 <__lshift+0x94>
 8007de6:	6048      	str	r0, [r1, #4]
 8007de8:	b108      	cbz	r0, 8007dee <__lshift+0x72>
 8007dea:	f109 0502 	add.w	r5, r9, #2
 8007dee:	3d01      	subs	r5, #1
 8007df0:	4638      	mov	r0, r7
 8007df2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007df6:	4621      	mov	r1, r4
 8007df8:	f7ff fdf4 	bl	80079e4 <_Bfree>
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e02:	3101      	adds	r1, #1
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	e7c7      	b.n	8007d98 <__lshift+0x1c>
 8007e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	e7cd      	b.n	8007dac <__lshift+0x30>
 8007e10:	4651      	mov	r1, sl
 8007e12:	e7dc      	b.n	8007dce <__lshift+0x52>
 8007e14:	3904      	subs	r1, #4
 8007e16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e1e:	459c      	cmp	ip, r3
 8007e20:	d8f9      	bhi.n	8007e16 <__lshift+0x9a>
 8007e22:	e7e4      	b.n	8007dee <__lshift+0x72>

08007e24 <__mcmp>:
 8007e24:	6903      	ldr	r3, [r0, #16]
 8007e26:	690a      	ldr	r2, [r1, #16]
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	b530      	push	{r4, r5, lr}
 8007e2c:	d10c      	bne.n	8007e48 <__mcmp+0x24>
 8007e2e:	0092      	lsls	r2, r2, #2
 8007e30:	3014      	adds	r0, #20
 8007e32:	3114      	adds	r1, #20
 8007e34:	1884      	adds	r4, r0, r2
 8007e36:	4411      	add	r1, r2
 8007e38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e40:	4295      	cmp	r5, r2
 8007e42:	d003      	beq.n	8007e4c <__mcmp+0x28>
 8007e44:	d305      	bcc.n	8007e52 <__mcmp+0x2e>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4618      	mov	r0, r3
 8007e4a:	bd30      	pop	{r4, r5, pc}
 8007e4c:	42a0      	cmp	r0, r4
 8007e4e:	d3f3      	bcc.n	8007e38 <__mcmp+0x14>
 8007e50:	e7fa      	b.n	8007e48 <__mcmp+0x24>
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e56:	e7f7      	b.n	8007e48 <__mcmp+0x24>

08007e58 <__mdiff>:
 8007e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	460d      	mov	r5, r1
 8007e5e:	4607      	mov	r7, r0
 8007e60:	4611      	mov	r1, r2
 8007e62:	4628      	mov	r0, r5
 8007e64:	4614      	mov	r4, r2
 8007e66:	f7ff ffdd 	bl	8007e24 <__mcmp>
 8007e6a:	1e06      	subs	r6, r0, #0
 8007e6c:	d108      	bne.n	8007e80 <__mdiff+0x28>
 8007e6e:	4631      	mov	r1, r6
 8007e70:	4638      	mov	r0, r7
 8007e72:	f7ff fd83 	bl	800797c <_Balloc>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e80:	bfa4      	itt	ge
 8007e82:	4623      	movge	r3, r4
 8007e84:	462c      	movge	r4, r5
 8007e86:	4638      	mov	r0, r7
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	bfa6      	itte	ge
 8007e8c:	461d      	movge	r5, r3
 8007e8e:	2600      	movge	r6, #0
 8007e90:	2601      	movlt	r6, #1
 8007e92:	f7ff fd73 	bl	800797c <_Balloc>
 8007e96:	692b      	ldr	r3, [r5, #16]
 8007e98:	60c6      	str	r6, [r0, #12]
 8007e9a:	6926      	ldr	r6, [r4, #16]
 8007e9c:	f105 0914 	add.w	r9, r5, #20
 8007ea0:	f104 0214 	add.w	r2, r4, #20
 8007ea4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007ea8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007eac:	f100 0514 	add.w	r5, r0, #20
 8007eb0:	f04f 0e00 	mov.w	lr, #0
 8007eb4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007eb8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ebc:	fa1e f18a 	uxtah	r1, lr, sl
 8007ec0:	b2a3      	uxth	r3, r4
 8007ec2:	1ac9      	subs	r1, r1, r3
 8007ec4:	0c23      	lsrs	r3, r4, #16
 8007ec6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007eca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ece:	b289      	uxth	r1, r1
 8007ed0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007ed4:	45c8      	cmp	r8, r9
 8007ed6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007eda:	4694      	mov	ip, r2
 8007edc:	f845 3b04 	str.w	r3, [r5], #4
 8007ee0:	d8e8      	bhi.n	8007eb4 <__mdiff+0x5c>
 8007ee2:	45bc      	cmp	ip, r7
 8007ee4:	d304      	bcc.n	8007ef0 <__mdiff+0x98>
 8007ee6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007eea:	b183      	cbz	r3, 8007f0e <__mdiff+0xb6>
 8007eec:	6106      	str	r6, [r0, #16]
 8007eee:	e7c5      	b.n	8007e7c <__mdiff+0x24>
 8007ef0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ef4:	fa1e f381 	uxtah	r3, lr, r1
 8007ef8:	141a      	asrs	r2, r3, #16
 8007efa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007f08:	f845 3b04 	str.w	r3, [r5], #4
 8007f0c:	e7e9      	b.n	8007ee2 <__mdiff+0x8a>
 8007f0e:	3e01      	subs	r6, #1
 8007f10:	e7e9      	b.n	8007ee6 <__mdiff+0x8e>
	...

08007f14 <__ulp>:
 8007f14:	4b12      	ldr	r3, [pc, #72]	; (8007f60 <__ulp+0x4c>)
 8007f16:	ee10 2a90 	vmov	r2, s1
 8007f1a:	401a      	ands	r2, r3
 8007f1c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dd04      	ble.n	8007f2e <__ulp+0x1a>
 8007f24:	2000      	movs	r0, #0
 8007f26:	4619      	mov	r1, r3
 8007f28:	ec41 0b10 	vmov	d0, r0, r1
 8007f2c:	4770      	bx	lr
 8007f2e:	425b      	negs	r3, r3
 8007f30:	151b      	asrs	r3, r3, #20
 8007f32:	2b13      	cmp	r3, #19
 8007f34:	f04f 0000 	mov.w	r0, #0
 8007f38:	f04f 0100 	mov.w	r1, #0
 8007f3c:	dc04      	bgt.n	8007f48 <__ulp+0x34>
 8007f3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007f42:	fa42 f103 	asr.w	r1, r2, r3
 8007f46:	e7ef      	b.n	8007f28 <__ulp+0x14>
 8007f48:	3b14      	subs	r3, #20
 8007f4a:	2b1e      	cmp	r3, #30
 8007f4c:	f04f 0201 	mov.w	r2, #1
 8007f50:	bfda      	itte	le
 8007f52:	f1c3 031f 	rsble	r3, r3, #31
 8007f56:	fa02 f303 	lslle.w	r3, r2, r3
 8007f5a:	4613      	movgt	r3, r2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	e7e3      	b.n	8007f28 <__ulp+0x14>
 8007f60:	7ff00000 	.word	0x7ff00000

08007f64 <__b2d>:
 8007f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f66:	6905      	ldr	r5, [r0, #16]
 8007f68:	f100 0714 	add.w	r7, r0, #20
 8007f6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007f70:	1f2e      	subs	r6, r5, #4
 8007f72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007f76:	4620      	mov	r0, r4
 8007f78:	f7ff fdc4 	bl	8007b04 <__hi0bits>
 8007f7c:	f1c0 0320 	rsb	r3, r0, #32
 8007f80:	280a      	cmp	r0, #10
 8007f82:	600b      	str	r3, [r1, #0]
 8007f84:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007ffc <__b2d+0x98>
 8007f88:	dc14      	bgt.n	8007fb4 <__b2d+0x50>
 8007f8a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007f8e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007f92:	42b7      	cmp	r7, r6
 8007f94:	ea41 030c 	orr.w	r3, r1, ip
 8007f98:	bf34      	ite	cc
 8007f9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f9e:	2100      	movcs	r1, #0
 8007fa0:	3015      	adds	r0, #21
 8007fa2:	fa04 f000 	lsl.w	r0, r4, r0
 8007fa6:	fa21 f10e 	lsr.w	r1, r1, lr
 8007faa:	ea40 0201 	orr.w	r2, r0, r1
 8007fae:	ec43 2b10 	vmov	d0, r2, r3
 8007fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb4:	42b7      	cmp	r7, r6
 8007fb6:	bf3a      	itte	cc
 8007fb8:	f1a5 0608 	subcc.w	r6, r5, #8
 8007fbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007fc0:	2100      	movcs	r1, #0
 8007fc2:	380b      	subs	r0, #11
 8007fc4:	d015      	beq.n	8007ff2 <__b2d+0x8e>
 8007fc6:	4084      	lsls	r4, r0
 8007fc8:	f1c0 0520 	rsb	r5, r0, #32
 8007fcc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007fd0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007fd4:	42be      	cmp	r6, r7
 8007fd6:	fa21 fc05 	lsr.w	ip, r1, r5
 8007fda:	ea44 030c 	orr.w	r3, r4, ip
 8007fde:	bf8c      	ite	hi
 8007fe0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007fe4:	2400      	movls	r4, #0
 8007fe6:	fa01 f000 	lsl.w	r0, r1, r0
 8007fea:	40ec      	lsrs	r4, r5
 8007fec:	ea40 0204 	orr.w	r2, r0, r4
 8007ff0:	e7dd      	b.n	8007fae <__b2d+0x4a>
 8007ff2:	ea44 030c 	orr.w	r3, r4, ip
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	e7d9      	b.n	8007fae <__b2d+0x4a>
 8007ffa:	bf00      	nop
 8007ffc:	3ff00000 	.word	0x3ff00000

08008000 <__d2b>:
 8008000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008004:	460e      	mov	r6, r1
 8008006:	2101      	movs	r1, #1
 8008008:	ec59 8b10 	vmov	r8, r9, d0
 800800c:	4615      	mov	r5, r2
 800800e:	f7ff fcb5 	bl	800797c <_Balloc>
 8008012:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008016:	4607      	mov	r7, r0
 8008018:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800801c:	bb34      	cbnz	r4, 800806c <__d2b+0x6c>
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	f1b8 0300 	subs.w	r3, r8, #0
 8008024:	d027      	beq.n	8008076 <__d2b+0x76>
 8008026:	a802      	add	r0, sp, #8
 8008028:	f840 3d08 	str.w	r3, [r0, #-8]!
 800802c:	f7ff fd89 	bl	8007b42 <__lo0bits>
 8008030:	9900      	ldr	r1, [sp, #0]
 8008032:	b1f0      	cbz	r0, 8008072 <__d2b+0x72>
 8008034:	9a01      	ldr	r2, [sp, #4]
 8008036:	f1c0 0320 	rsb	r3, r0, #32
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	430b      	orrs	r3, r1
 8008040:	40c2      	lsrs	r2, r0
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	9201      	str	r2, [sp, #4]
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	bf14      	ite	ne
 800804e:	2102      	movne	r1, #2
 8008050:	2101      	moveq	r1, #1
 8008052:	6139      	str	r1, [r7, #16]
 8008054:	b1c4      	cbz	r4, 8008088 <__d2b+0x88>
 8008056:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800805a:	4404      	add	r4, r0
 800805c:	6034      	str	r4, [r6, #0]
 800805e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008062:	6028      	str	r0, [r5, #0]
 8008064:	4638      	mov	r0, r7
 8008066:	b003      	add	sp, #12
 8008068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800806c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008070:	e7d5      	b.n	800801e <__d2b+0x1e>
 8008072:	6179      	str	r1, [r7, #20]
 8008074:	e7e7      	b.n	8008046 <__d2b+0x46>
 8008076:	a801      	add	r0, sp, #4
 8008078:	f7ff fd63 	bl	8007b42 <__lo0bits>
 800807c:	9b01      	ldr	r3, [sp, #4]
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	2101      	movs	r1, #1
 8008082:	6139      	str	r1, [r7, #16]
 8008084:	3020      	adds	r0, #32
 8008086:	e7e5      	b.n	8008054 <__d2b+0x54>
 8008088:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800808c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008090:	6030      	str	r0, [r6, #0]
 8008092:	6918      	ldr	r0, [r3, #16]
 8008094:	f7ff fd36 	bl	8007b04 <__hi0bits>
 8008098:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800809c:	e7e1      	b.n	8008062 <__d2b+0x62>

0800809e <__ratio>:
 800809e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a2:	4688      	mov	r8, r1
 80080a4:	4669      	mov	r1, sp
 80080a6:	4681      	mov	r9, r0
 80080a8:	f7ff ff5c 	bl	8007f64 <__b2d>
 80080ac:	a901      	add	r1, sp, #4
 80080ae:	4640      	mov	r0, r8
 80080b0:	ec57 6b10 	vmov	r6, r7, d0
 80080b4:	f7ff ff56 	bl	8007f64 <__b2d>
 80080b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80080c0:	eba3 0c02 	sub.w	ip, r3, r2
 80080c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80080ce:	ec5b ab10 	vmov	sl, fp, d0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	bfce      	itee	gt
 80080d6:	463a      	movgt	r2, r7
 80080d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080dc:	465a      	movle	r2, fp
 80080de:	4659      	mov	r1, fp
 80080e0:	463d      	mov	r5, r7
 80080e2:	bfd4      	ite	le
 80080e4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80080e8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80080ec:	4630      	mov	r0, r6
 80080ee:	ee10 2a10 	vmov	r2, s0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4629      	mov	r1, r5
 80080f6:	f7f8 fbb1 	bl	800085c <__aeabi_ddiv>
 80080fa:	ec41 0b10 	vmov	d0, r0, r1
 80080fe:	b003      	add	sp, #12
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008104 <__copybits>:
 8008104:	3901      	subs	r1, #1
 8008106:	b510      	push	{r4, lr}
 8008108:	1149      	asrs	r1, r1, #5
 800810a:	6914      	ldr	r4, [r2, #16]
 800810c:	3101      	adds	r1, #1
 800810e:	f102 0314 	add.w	r3, r2, #20
 8008112:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008116:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800811a:	42a3      	cmp	r3, r4
 800811c:	4602      	mov	r2, r0
 800811e:	d303      	bcc.n	8008128 <__copybits+0x24>
 8008120:	2300      	movs	r3, #0
 8008122:	428a      	cmp	r2, r1
 8008124:	d305      	bcc.n	8008132 <__copybits+0x2e>
 8008126:	bd10      	pop	{r4, pc}
 8008128:	f853 2b04 	ldr.w	r2, [r3], #4
 800812c:	f840 2b04 	str.w	r2, [r0], #4
 8008130:	e7f3      	b.n	800811a <__copybits+0x16>
 8008132:	f842 3b04 	str.w	r3, [r2], #4
 8008136:	e7f4      	b.n	8008122 <__copybits+0x1e>

08008138 <__any_on>:
 8008138:	f100 0214 	add.w	r2, r0, #20
 800813c:	6900      	ldr	r0, [r0, #16]
 800813e:	114b      	asrs	r3, r1, #5
 8008140:	4298      	cmp	r0, r3
 8008142:	b510      	push	{r4, lr}
 8008144:	db11      	blt.n	800816a <__any_on+0x32>
 8008146:	dd0a      	ble.n	800815e <__any_on+0x26>
 8008148:	f011 011f 	ands.w	r1, r1, #31
 800814c:	d007      	beq.n	800815e <__any_on+0x26>
 800814e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008152:	fa24 f001 	lsr.w	r0, r4, r1
 8008156:	fa00 f101 	lsl.w	r1, r0, r1
 800815a:	428c      	cmp	r4, r1
 800815c:	d10b      	bne.n	8008176 <__any_on+0x3e>
 800815e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008162:	4293      	cmp	r3, r2
 8008164:	d803      	bhi.n	800816e <__any_on+0x36>
 8008166:	2000      	movs	r0, #0
 8008168:	bd10      	pop	{r4, pc}
 800816a:	4603      	mov	r3, r0
 800816c:	e7f7      	b.n	800815e <__any_on+0x26>
 800816e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008172:	2900      	cmp	r1, #0
 8008174:	d0f5      	beq.n	8008162 <__any_on+0x2a>
 8008176:	2001      	movs	r0, #1
 8008178:	e7f6      	b.n	8008168 <__any_on+0x30>

0800817a <_calloc_r>:
 800817a:	b538      	push	{r3, r4, r5, lr}
 800817c:	fb02 f401 	mul.w	r4, r2, r1
 8008180:	4621      	mov	r1, r4
 8008182:	f7fc fceb 	bl	8004b5c <_malloc_r>
 8008186:	4605      	mov	r5, r0
 8008188:	b118      	cbz	r0, 8008192 <_calloc_r+0x18>
 800818a:	4622      	mov	r2, r4
 800818c:	2100      	movs	r1, #0
 800818e:	f7fc fc8e 	bl	8004aae <memset>
 8008192:	4628      	mov	r0, r5
 8008194:	bd38      	pop	{r3, r4, r5, pc}

08008196 <__ssputs_r>:
 8008196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800819a:	688e      	ldr	r6, [r1, #8]
 800819c:	429e      	cmp	r6, r3
 800819e:	4682      	mov	sl, r0
 80081a0:	460c      	mov	r4, r1
 80081a2:	4690      	mov	r8, r2
 80081a4:	4699      	mov	r9, r3
 80081a6:	d837      	bhi.n	8008218 <__ssputs_r+0x82>
 80081a8:	898a      	ldrh	r2, [r1, #12]
 80081aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081ae:	d031      	beq.n	8008214 <__ssputs_r+0x7e>
 80081b0:	6825      	ldr	r5, [r4, #0]
 80081b2:	6909      	ldr	r1, [r1, #16]
 80081b4:	1a6f      	subs	r7, r5, r1
 80081b6:	6965      	ldr	r5, [r4, #20]
 80081b8:	2302      	movs	r3, #2
 80081ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081be:	fb95 f5f3 	sdiv	r5, r5, r3
 80081c2:	f109 0301 	add.w	r3, r9, #1
 80081c6:	443b      	add	r3, r7
 80081c8:	429d      	cmp	r5, r3
 80081ca:	bf38      	it	cc
 80081cc:	461d      	movcc	r5, r3
 80081ce:	0553      	lsls	r3, r2, #21
 80081d0:	d530      	bpl.n	8008234 <__ssputs_r+0x9e>
 80081d2:	4629      	mov	r1, r5
 80081d4:	f7fc fcc2 	bl	8004b5c <_malloc_r>
 80081d8:	4606      	mov	r6, r0
 80081da:	b950      	cbnz	r0, 80081f2 <__ssputs_r+0x5c>
 80081dc:	230c      	movs	r3, #12
 80081de:	f8ca 3000 	str.w	r3, [sl]
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f2:	463a      	mov	r2, r7
 80081f4:	6921      	ldr	r1, [r4, #16]
 80081f6:	f7fc fc4f 	bl	8004a98 <memcpy>
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008204:	81a3      	strh	r3, [r4, #12]
 8008206:	6126      	str	r6, [r4, #16]
 8008208:	6165      	str	r5, [r4, #20]
 800820a:	443e      	add	r6, r7
 800820c:	1bed      	subs	r5, r5, r7
 800820e:	6026      	str	r6, [r4, #0]
 8008210:	60a5      	str	r5, [r4, #8]
 8008212:	464e      	mov	r6, r9
 8008214:	454e      	cmp	r6, r9
 8008216:	d900      	bls.n	800821a <__ssputs_r+0x84>
 8008218:	464e      	mov	r6, r9
 800821a:	4632      	mov	r2, r6
 800821c:	4641      	mov	r1, r8
 800821e:	6820      	ldr	r0, [r4, #0]
 8008220:	f000 f92b 	bl	800847a <memmove>
 8008224:	68a3      	ldr	r3, [r4, #8]
 8008226:	1b9b      	subs	r3, r3, r6
 8008228:	60a3      	str	r3, [r4, #8]
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	441e      	add	r6, r3
 800822e:	6026      	str	r6, [r4, #0]
 8008230:	2000      	movs	r0, #0
 8008232:	e7dc      	b.n	80081ee <__ssputs_r+0x58>
 8008234:	462a      	mov	r2, r5
 8008236:	f000 f939 	bl	80084ac <_realloc_r>
 800823a:	4606      	mov	r6, r0
 800823c:	2800      	cmp	r0, #0
 800823e:	d1e2      	bne.n	8008206 <__ssputs_r+0x70>
 8008240:	6921      	ldr	r1, [r4, #16]
 8008242:	4650      	mov	r0, sl
 8008244:	f7fc fc3c 	bl	8004ac0 <_free_r>
 8008248:	e7c8      	b.n	80081dc <__ssputs_r+0x46>
	...

0800824c <_svfiprintf_r>:
 800824c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008250:	461d      	mov	r5, r3
 8008252:	898b      	ldrh	r3, [r1, #12]
 8008254:	061f      	lsls	r7, r3, #24
 8008256:	b09d      	sub	sp, #116	; 0x74
 8008258:	4680      	mov	r8, r0
 800825a:	460c      	mov	r4, r1
 800825c:	4616      	mov	r6, r2
 800825e:	d50f      	bpl.n	8008280 <_svfiprintf_r+0x34>
 8008260:	690b      	ldr	r3, [r1, #16]
 8008262:	b96b      	cbnz	r3, 8008280 <_svfiprintf_r+0x34>
 8008264:	2140      	movs	r1, #64	; 0x40
 8008266:	f7fc fc79 	bl	8004b5c <_malloc_r>
 800826a:	6020      	str	r0, [r4, #0]
 800826c:	6120      	str	r0, [r4, #16]
 800826e:	b928      	cbnz	r0, 800827c <_svfiprintf_r+0x30>
 8008270:	230c      	movs	r3, #12
 8008272:	f8c8 3000 	str.w	r3, [r8]
 8008276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800827a:	e0c8      	b.n	800840e <_svfiprintf_r+0x1c2>
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	6163      	str	r3, [r4, #20]
 8008280:	2300      	movs	r3, #0
 8008282:	9309      	str	r3, [sp, #36]	; 0x24
 8008284:	2320      	movs	r3, #32
 8008286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800828a:	2330      	movs	r3, #48	; 0x30
 800828c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008290:	9503      	str	r5, [sp, #12]
 8008292:	f04f 0b01 	mov.w	fp, #1
 8008296:	4637      	mov	r7, r6
 8008298:	463d      	mov	r5, r7
 800829a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800829e:	b10b      	cbz	r3, 80082a4 <_svfiprintf_r+0x58>
 80082a0:	2b25      	cmp	r3, #37	; 0x25
 80082a2:	d13e      	bne.n	8008322 <_svfiprintf_r+0xd6>
 80082a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80082a8:	d00b      	beq.n	80082c2 <_svfiprintf_r+0x76>
 80082aa:	4653      	mov	r3, sl
 80082ac:	4632      	mov	r2, r6
 80082ae:	4621      	mov	r1, r4
 80082b0:	4640      	mov	r0, r8
 80082b2:	f7ff ff70 	bl	8008196 <__ssputs_r>
 80082b6:	3001      	adds	r0, #1
 80082b8:	f000 80a4 	beq.w	8008404 <_svfiprintf_r+0x1b8>
 80082bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082be:	4453      	add	r3, sl
 80082c0:	9309      	str	r3, [sp, #36]	; 0x24
 80082c2:	783b      	ldrb	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 809d 	beq.w	8008404 <_svfiprintf_r+0x1b8>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082dc:	931a      	str	r3, [sp, #104]	; 0x68
 80082de:	462f      	mov	r7, r5
 80082e0:	2205      	movs	r2, #5
 80082e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80082e6:	4850      	ldr	r0, [pc, #320]	; (8008428 <_svfiprintf_r+0x1dc>)
 80082e8:	f7f7 ff82 	bl	80001f0 <memchr>
 80082ec:	9b04      	ldr	r3, [sp, #16]
 80082ee:	b9d0      	cbnz	r0, 8008326 <_svfiprintf_r+0xda>
 80082f0:	06d9      	lsls	r1, r3, #27
 80082f2:	bf44      	itt	mi
 80082f4:	2220      	movmi	r2, #32
 80082f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082fa:	071a      	lsls	r2, r3, #28
 80082fc:	bf44      	itt	mi
 80082fe:	222b      	movmi	r2, #43	; 0x2b
 8008300:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008304:	782a      	ldrb	r2, [r5, #0]
 8008306:	2a2a      	cmp	r2, #42	; 0x2a
 8008308:	d015      	beq.n	8008336 <_svfiprintf_r+0xea>
 800830a:	9a07      	ldr	r2, [sp, #28]
 800830c:	462f      	mov	r7, r5
 800830e:	2000      	movs	r0, #0
 8008310:	250a      	movs	r5, #10
 8008312:	4639      	mov	r1, r7
 8008314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008318:	3b30      	subs	r3, #48	; 0x30
 800831a:	2b09      	cmp	r3, #9
 800831c:	d94d      	bls.n	80083ba <_svfiprintf_r+0x16e>
 800831e:	b1b8      	cbz	r0, 8008350 <_svfiprintf_r+0x104>
 8008320:	e00f      	b.n	8008342 <_svfiprintf_r+0xf6>
 8008322:	462f      	mov	r7, r5
 8008324:	e7b8      	b.n	8008298 <_svfiprintf_r+0x4c>
 8008326:	4a40      	ldr	r2, [pc, #256]	; (8008428 <_svfiprintf_r+0x1dc>)
 8008328:	1a80      	subs	r0, r0, r2
 800832a:	fa0b f000 	lsl.w	r0, fp, r0
 800832e:	4318      	orrs	r0, r3
 8008330:	9004      	str	r0, [sp, #16]
 8008332:	463d      	mov	r5, r7
 8008334:	e7d3      	b.n	80082de <_svfiprintf_r+0x92>
 8008336:	9a03      	ldr	r2, [sp, #12]
 8008338:	1d11      	adds	r1, r2, #4
 800833a:	6812      	ldr	r2, [r2, #0]
 800833c:	9103      	str	r1, [sp, #12]
 800833e:	2a00      	cmp	r2, #0
 8008340:	db01      	blt.n	8008346 <_svfiprintf_r+0xfa>
 8008342:	9207      	str	r2, [sp, #28]
 8008344:	e004      	b.n	8008350 <_svfiprintf_r+0x104>
 8008346:	4252      	negs	r2, r2
 8008348:	f043 0302 	orr.w	r3, r3, #2
 800834c:	9207      	str	r2, [sp, #28]
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	783b      	ldrb	r3, [r7, #0]
 8008352:	2b2e      	cmp	r3, #46	; 0x2e
 8008354:	d10c      	bne.n	8008370 <_svfiprintf_r+0x124>
 8008356:	787b      	ldrb	r3, [r7, #1]
 8008358:	2b2a      	cmp	r3, #42	; 0x2a
 800835a:	d133      	bne.n	80083c4 <_svfiprintf_r+0x178>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	9203      	str	r2, [sp, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	bfb8      	it	lt
 8008368:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800836c:	3702      	adds	r7, #2
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	4d2e      	ldr	r5, [pc, #184]	; (800842c <_svfiprintf_r+0x1e0>)
 8008372:	7839      	ldrb	r1, [r7, #0]
 8008374:	2203      	movs	r2, #3
 8008376:	4628      	mov	r0, r5
 8008378:	f7f7 ff3a 	bl	80001f0 <memchr>
 800837c:	b138      	cbz	r0, 800838e <_svfiprintf_r+0x142>
 800837e:	2340      	movs	r3, #64	; 0x40
 8008380:	1b40      	subs	r0, r0, r5
 8008382:	fa03 f000 	lsl.w	r0, r3, r0
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	4303      	orrs	r3, r0
 800838a:	3701      	adds	r7, #1
 800838c:	9304      	str	r3, [sp, #16]
 800838e:	7839      	ldrb	r1, [r7, #0]
 8008390:	4827      	ldr	r0, [pc, #156]	; (8008430 <_svfiprintf_r+0x1e4>)
 8008392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008396:	2206      	movs	r2, #6
 8008398:	1c7e      	adds	r6, r7, #1
 800839a:	f7f7 ff29 	bl	80001f0 <memchr>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d038      	beq.n	8008414 <_svfiprintf_r+0x1c8>
 80083a2:	4b24      	ldr	r3, [pc, #144]	; (8008434 <_svfiprintf_r+0x1e8>)
 80083a4:	bb13      	cbnz	r3, 80083ec <_svfiprintf_r+0x1a0>
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	3307      	adds	r3, #7
 80083aa:	f023 0307 	bic.w	r3, r3, #7
 80083ae:	3308      	adds	r3, #8
 80083b0:	9303      	str	r3, [sp, #12]
 80083b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b4:	444b      	add	r3, r9
 80083b6:	9309      	str	r3, [sp, #36]	; 0x24
 80083b8:	e76d      	b.n	8008296 <_svfiprintf_r+0x4a>
 80083ba:	fb05 3202 	mla	r2, r5, r2, r3
 80083be:	2001      	movs	r0, #1
 80083c0:	460f      	mov	r7, r1
 80083c2:	e7a6      	b.n	8008312 <_svfiprintf_r+0xc6>
 80083c4:	2300      	movs	r3, #0
 80083c6:	3701      	adds	r7, #1
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	4619      	mov	r1, r3
 80083cc:	250a      	movs	r5, #10
 80083ce:	4638      	mov	r0, r7
 80083d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083d4:	3a30      	subs	r2, #48	; 0x30
 80083d6:	2a09      	cmp	r2, #9
 80083d8:	d903      	bls.n	80083e2 <_svfiprintf_r+0x196>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0c8      	beq.n	8008370 <_svfiprintf_r+0x124>
 80083de:	9105      	str	r1, [sp, #20]
 80083e0:	e7c6      	b.n	8008370 <_svfiprintf_r+0x124>
 80083e2:	fb05 2101 	mla	r1, r5, r1, r2
 80083e6:	2301      	movs	r3, #1
 80083e8:	4607      	mov	r7, r0
 80083ea:	e7f0      	b.n	80083ce <_svfiprintf_r+0x182>
 80083ec:	ab03      	add	r3, sp, #12
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4622      	mov	r2, r4
 80083f2:	4b11      	ldr	r3, [pc, #68]	; (8008438 <_svfiprintf_r+0x1ec>)
 80083f4:	a904      	add	r1, sp, #16
 80083f6:	4640      	mov	r0, r8
 80083f8:	f7fc fc9e 	bl	8004d38 <_printf_float>
 80083fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008400:	4681      	mov	r9, r0
 8008402:	d1d6      	bne.n	80083b2 <_svfiprintf_r+0x166>
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	065b      	lsls	r3, r3, #25
 8008408:	f53f af35 	bmi.w	8008276 <_svfiprintf_r+0x2a>
 800840c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800840e:	b01d      	add	sp, #116	; 0x74
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	ab03      	add	r3, sp, #12
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	4622      	mov	r2, r4
 800841a:	4b07      	ldr	r3, [pc, #28]	; (8008438 <_svfiprintf_r+0x1ec>)
 800841c:	a904      	add	r1, sp, #16
 800841e:	4640      	mov	r0, r8
 8008420:	f7fc ff40 	bl	80052a4 <_printf_i>
 8008424:	e7ea      	b.n	80083fc <_svfiprintf_r+0x1b0>
 8008426:	bf00      	nop
 8008428:	0800872c 	.word	0x0800872c
 800842c:	08008732 	.word	0x08008732
 8008430:	08008736 	.word	0x08008736
 8008434:	08004d39 	.word	0x08004d39
 8008438:	08008197 	.word	0x08008197

0800843c <strncmp>:
 800843c:	b510      	push	{r4, lr}
 800843e:	b16a      	cbz	r2, 800845c <strncmp+0x20>
 8008440:	3901      	subs	r1, #1
 8008442:	1884      	adds	r4, r0, r2
 8008444:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008448:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800844c:	4293      	cmp	r3, r2
 800844e:	d103      	bne.n	8008458 <strncmp+0x1c>
 8008450:	42a0      	cmp	r0, r4
 8008452:	d001      	beq.n	8008458 <strncmp+0x1c>
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1f5      	bne.n	8008444 <strncmp+0x8>
 8008458:	1a98      	subs	r0, r3, r2
 800845a:	bd10      	pop	{r4, pc}
 800845c:	4610      	mov	r0, r2
 800845e:	e7fc      	b.n	800845a <strncmp+0x1e>

08008460 <__ascii_wctomb>:
 8008460:	b149      	cbz	r1, 8008476 <__ascii_wctomb+0x16>
 8008462:	2aff      	cmp	r2, #255	; 0xff
 8008464:	bf85      	ittet	hi
 8008466:	238a      	movhi	r3, #138	; 0x8a
 8008468:	6003      	strhi	r3, [r0, #0]
 800846a:	700a      	strbls	r2, [r1, #0]
 800846c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008470:	bf98      	it	ls
 8008472:	2001      	movls	r0, #1
 8008474:	4770      	bx	lr
 8008476:	4608      	mov	r0, r1
 8008478:	4770      	bx	lr

0800847a <memmove>:
 800847a:	4288      	cmp	r0, r1
 800847c:	b510      	push	{r4, lr}
 800847e:	eb01 0302 	add.w	r3, r1, r2
 8008482:	d807      	bhi.n	8008494 <memmove+0x1a>
 8008484:	1e42      	subs	r2, r0, #1
 8008486:	4299      	cmp	r1, r3
 8008488:	d00a      	beq.n	80084a0 <memmove+0x26>
 800848a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800848e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008492:	e7f8      	b.n	8008486 <memmove+0xc>
 8008494:	4283      	cmp	r3, r0
 8008496:	d9f5      	bls.n	8008484 <memmove+0xa>
 8008498:	1881      	adds	r1, r0, r2
 800849a:	1ad2      	subs	r2, r2, r3
 800849c:	42d3      	cmn	r3, r2
 800849e:	d100      	bne.n	80084a2 <memmove+0x28>
 80084a0:	bd10      	pop	{r4, pc}
 80084a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80084aa:	e7f7      	b.n	800849c <memmove+0x22>

080084ac <_realloc_r>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	4607      	mov	r7, r0
 80084b0:	4614      	mov	r4, r2
 80084b2:	460e      	mov	r6, r1
 80084b4:	b921      	cbnz	r1, 80084c0 <_realloc_r+0x14>
 80084b6:	4611      	mov	r1, r2
 80084b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084bc:	f7fc bb4e 	b.w	8004b5c <_malloc_r>
 80084c0:	b922      	cbnz	r2, 80084cc <_realloc_r+0x20>
 80084c2:	f7fc fafd 	bl	8004ac0 <_free_r>
 80084c6:	4625      	mov	r5, r4
 80084c8:	4628      	mov	r0, r5
 80084ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084cc:	f000 f814 	bl	80084f8 <_malloc_usable_size_r>
 80084d0:	42a0      	cmp	r0, r4
 80084d2:	d20f      	bcs.n	80084f4 <_realloc_r+0x48>
 80084d4:	4621      	mov	r1, r4
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7fc fb40 	bl	8004b5c <_malloc_r>
 80084dc:	4605      	mov	r5, r0
 80084de:	2800      	cmp	r0, #0
 80084e0:	d0f2      	beq.n	80084c8 <_realloc_r+0x1c>
 80084e2:	4631      	mov	r1, r6
 80084e4:	4622      	mov	r2, r4
 80084e6:	f7fc fad7 	bl	8004a98 <memcpy>
 80084ea:	4631      	mov	r1, r6
 80084ec:	4638      	mov	r0, r7
 80084ee:	f7fc fae7 	bl	8004ac0 <_free_r>
 80084f2:	e7e9      	b.n	80084c8 <_realloc_r+0x1c>
 80084f4:	4635      	mov	r5, r6
 80084f6:	e7e7      	b.n	80084c8 <_realloc_r+0x1c>

080084f8 <_malloc_usable_size_r>:
 80084f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084fc:	1f18      	subs	r0, r3, #4
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bfbc      	itt	lt
 8008502:	580b      	ldrlt	r3, [r1, r0]
 8008504:	18c0      	addlt	r0, r0, r3
 8008506:	4770      	bx	lr

08008508 <_init>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	bf00      	nop
 800850c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800850e:	bc08      	pop	{r3}
 8008510:	469e      	mov	lr, r3
 8008512:	4770      	bx	lr

08008514 <_fini>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	bf00      	nop
 8008518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851a:	bc08      	pop	{r3}
 800851c:	469e      	mov	lr, r3
 800851e:	4770      	bx	lr
